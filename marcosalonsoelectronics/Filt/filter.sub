********************************************************************************
* Author: Vlad Ionescu
* Copyright (C) 2008-2019, Vlad Ionescu, <imbvlad@gmail.com>
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Library General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Library General Public License for more details.
*
* You should have received a copy of the GNU Library General Public
* License along with this library; if not, write to the
* Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* Boston, MA 02111-1307, USA.
*
********************************************************************************
********************************************************************************
*
* For more info, go to:
*  https://ltspicegoodies.ltwiki.org
* or visit
*  https://ltwiki.org/?title=Filter_Page_and_LTspice_Goodies
* and choose the link for "Filter"
*
********************************************************************************
********************************************************************************
*
*   ~~ ANALOG PASSIVE ~~
*
********************************************************************************
********************************************************************************
*
* nT=<-1,0>   = if Zout=0, <0> means current (NorTon) source input (Zin=inf),
*             <-1> means voltage source (Zin=0), otherwise has no effect;
* Zin   [Ohm] = input impedance (resistive).
*               Zin=-1  => zero source input;
*               Zin=0   => infinite source input;
*               Zin>0   => <Zin>Ohms input.
* Zout  [Ohm] = output impedance (resistive).
*               Zout=0  => floating output;
*               Zout>0  => Zout>Ohms output.
* sim   [s]   = total .TRAN simulation time, for V(0.2). E.g. if the command
*             is ".TRAN 25m" then sim=25m. (optional)
* fc    [Hz]  = center frequency for BP/BS or 3dBoct.
* BWp   [Hz]  = pass-band bandwidth.
* BWs   [Hz]  = stop-band bandwidth.
*         See the graphs in the introduction on how to get the desired function.
* Ap    [dB]  = pass-band ripple, positive value (Chebyshev).
* As    [dB]  = stop-band attenuation, positive value.
* Asc   [dB]  = frequency-scaling attenuation, positive value.
* N=<0:1:32>  = order of the filter. For LP/HP, N=32 max, for BP/BS, N=64 max,
* N=<0:2:64>  even values. N=0 means minimum order determination based on the
*             values of the four frequencies.
*
* - Hidden:
*
* Rpar  [Ohm] = dummy parallel resistance for elements, default 1G.
* Rser  [Ohm] = dummy series resistance for elements, default null.
*
********************************
*
*     Butterworth
*
********************************
*
* Parameters used: Zin, Zout, fc, BWp, BWs, Asc, As, N
*   (optional: sim; hidden: Rser, Rpar)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2)
*
* [NOTES]
*
* - The starting element, shunt or series, is automatically adjusted internally
* depending on the ratio of Zin/Zout.
* - On rare, random occasions, Rpar=1G may need to be set to make .TRAN analysis
* possible.
*
***********************
.subckt Butterworth_LC IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ Zin=1 Zout=1
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ Asc=3.0103 As=40 N=0
+ Rpar=1G Rser=0
*** preliminary calculations
.parma BWp=if(fc==0,fp1,fp2-fp1)
+ BWs=if(fc==0,fs1,fs2-fs1)
+ fc=if(fp2==0,0,sqrt(fp1*fp2))
+ lphp=(case<=2)
+ bpbs=inv(lphp)
+ N2=Order/2
+ N21=(Order+1)/2
+ nodopt=ceil(N2)
+ oddCase=par(case+1)
+ evenCase=inv(oddCase)
+ allpass=(case==0)
+ low=(case==1)
+ high=(case==2)
+ bandpass=(case==3)
+ bandstop=(case==4)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp<BWs))
+ epsilon_s=10**(As/10)-1
+ epsilon_sc=if(Asc>0,10**(Asc/10)-1,exp(-2*abs(log(ratio))*N)*epsilon_s)
+ wscale=epsilon_sc**(.5/Order)
+ wc=2*pi*if(lphp,BWp,fc)/wscale
+ ratio=BWs/BWp
+ wp=2*pi*BWp
+ Order=if(N,N,ceil(log(epsilon_s**u(As)/epsilon_sc)/abs(2*log(ratio)))*(1+bpbs))
*** node helpers
.param sgnCase=if(evenCase,-1,1)
+ sgnBand=if(bandpass,-1,1)
+ zinGTzout=(Zin>Zout)
+ zinLEzout=inv(zinGTzout)
+ zout0=(Zout==0)
+ ZoutGT0=inv(zout0)
+ zin0=(Zin==0)
+ zinGT0=(Zin>0)
+ zin1=(Zin==-1)
+ varN=Order/(1+bpbs)
+ evenN=par(varN)
+ oddN=inv(evenN)
+ maxN=int(VarN/2)
+ chkZinZout=((zin1 | zin0) ^ zout0)
*** LC network parameters
.param nodoptL=(oddCase | (zinGTzout & zoutGT0)) | (evenCase & (zin0 | (oddN & zout0)))
.param nodoptC=(evenCase | (zinGTzout & zoutGT0)) | (oddCase & (zin0 | (oddN & zout0)))
.param elemopt=(oddCase & zinLEzout & zinGT0) ^ (evenCase & zinGTzout & zoutGT0) ^
+ (evenCase & zin0) ^ (oddCase & zin1) ^ (zout0 & ( (oddCase & evenN) ^ (evenCase & oddN) ))
.param extraL=oddN & ( (oddCase & ((zinLEzout & zinGT0) ^ zin1)) |
+ (evenCase & ((zinGTzout & zoutGT0) ^ zin0 ^ zout0)) )
.param extraC=oddN & ( (evenCase & ((zinLEzout & zinGT0) ^ zin1)) |
+ (oddCase & ((zinGTzout & zoutGT0) ^ zin0 ^ zout0)) )
*** auxilliary coefficients
.param alfa=(abs(Zout-Zin)/(Zout+abs(Zin)))**(1/varN)
.func realpart(x) {sin((2*x-1)*pi/2/varN)}
.func beta(x) {if(x==0, 1, if( (zin0|zin1)^zout0,cos(x*pi/2/varN)**2,1+alfa*(alfa-2*cos(x*pi/varN)) ))}
* for i=1 thru N-1 do prod(beta[k],k,1,i/2)
.func prodP(x) {beta(2*(2<x))*beta(4*(4<x))*beta(6*(6<x))*beta(8*(8<x))*beta(10*(10<x))*
+ beta(12*(12<x))*beta(14*(14<x))*beta(16*(16<x))*beta(18*(18<x))*beta(20*(20<x))*
+ beta(22*(22<x))*beta(24*(24<x))*beta(26*(26<x))*beta(28*(28<x))*beta(30*(30<x))*beta(32*(32<x))}
.func prodI(x) {beta(1*(1<x))*beta(3*(3<x))*beta(5*(5<x))*beta(7*(7<x))*beta(9*(9<x))*
+ beta(11*(11<x))*beta(13*(13<x))*beta(15*(15<x))*beta(17*(17<x))*beta(19*(19<x))*
+ beta(21*(21<x))*beta(23*(23<x))*beta(25*(25<x))*beta(27*(27<x))*beta(29*(29<x))*beta(31*(31<x))}
*** unnormalizing impedance and frequency
.param ZNorm=if(chkZinZout,max(Zin,Zout),Zin) fNorm=wc*(fc/BWp)**bpbs
*** recursion formulas for LC elements
.func element(x) {if(x>varN, 1, 2**inv(chkZinZout)*realpart(x)*
+ (prodP(x)/prodI(x)*(1-alfa*inv(chkZinZout)))**((-1)**x) )}
.func ics(x) {if(zin0 | zin1, varN+1-x, x)}
*** "L" elements, series or shunt
L_1 {666**nodoptL} {if(oddCase,1,-1)} {element(ics(2-elemopt))**sgnCase/fNorm*Znorm}
+  Cpar={element(ics(2-elemopt))**sgnBand/wp/Znorm*bpbs} Rser={Rser} Rpar={Rpar}
L_2 {(2-nodoptL)*(2<=maxN+extraL)} {if(2<=maxN+extraL,if(oddCase,2,-1),0)}
+  {element(ics(4-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(4-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_3 {(3-nodoptL)*(3<=maxN+extraL)} {if(3<=maxN+extraL,if(oddCase,3,-1),0)}
+  {element(ics(6-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(6-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_4 {(4-nodoptL)*(4<=maxN+extraL)} {if(4<=maxN+extraL,if(oddCase,4,-1),0)}
+  {element(ics(8-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(8-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_5 {(5-nodoptL)*(5<=maxN+extraL)} {if(5<=maxN+extraL,if(oddCase,5,-1),0)}
+  {element(ics(10-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(10-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_6 {(6-nodoptL)*(6<=maxN+extraL)} {if(6<=maxN+extraL,if(oddCase,6,-1),0)}
+  {element(ics(12-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(12-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_7 {(7-nodoptL)*(7<=maxN+extraL)} {if(7<=maxN+extraL,if(oddCase,7,-1),0)}
+  {element(ics(14-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(14-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_8 {(8-nodoptL)*(8<=maxN+extraL)} {if(8<=maxN+extraL,if(oddCase,8,-1),0)}
+  {element(ics(16-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(16-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_9 {(9-nodoptL)*(9<=maxN+extraL)} {if(9<=maxN+extraL,if(oddCase,9,-1),0)}
+  {element(ics(18-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(18-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_10 {(10-nodoptL)*(10<=maxN+extraL)} {if(10<=maxN+extraL,if(oddCase,10,-1),0)}
+  {element(ics(20-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(20-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_11 {(11-nodoptL)*(11<=maxN+extraL)} {if(11<=maxN+extraL,if(oddCase,11,-1),0)}
+  {element(ics(22-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(22-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_12 {(12-nodoptL)*(12<=maxN+extraL)} {if(12<=maxN+extraL,if(oddCase,12,-1),0)}
+  {element(ics(24-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(24-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_13 {(13-nodoptL)*(13<=maxN+extraL)} {if(13<=maxN+extraL,if(oddCase,13,-1),0)}
+  {element(ics(26-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(26-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_14 {(14-nodoptL)*(14<=maxN+extraL)} {if(14<=maxN+extraL,if(oddCase,14,-1),0)}
+  {element(ics(28-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(28-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_15 {(15-nodoptL)*(15<=maxN+extraL)} {if(15<=maxN+extraL,if(oddCase,15,-1),0)}
+  {element(ics(30-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(30-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_16 {(16-nodoptL)*(16<=maxN+extraL)} {if(16<=maxN+extraL,if(oddCase,16,-1),0)}
+  {element(ics(32-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(32-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
*** "C" elements, series or shunt
C_1 {666**nodoptC} {if(evenCase,1,-1)} {element(ics(1+elemopt))**sgnCase/fNorm/Znorm}
+  Lser={element(ics(1+elemopt))**sgnBand/wp*Znorm*bpbs} RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_2 {(2-nodoptC)*(2<=maxN+extraC)} {if(2<=maxN+extraC,if(evenCase,2,-1),0)}
+  {element(ics(3+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(3+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_3 {(3-nodoptC)*(3<=maxN+extraC)} {if(3<=maxN+extraC,if(evenCase,3,-1),0)}
+  {element(ics(5+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(5+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_4 {(4-nodoptC)*(4<=maxN+extraC)} {if(4<=maxN+extraC,if(evenCase,4,-1),0)}
+  {element(ics(7+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(7+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_5 {(5-nodoptC)*(5<=maxN+extraC)} {if(5<=maxN+extraC,if(evenCase,5,-1),0)}
+  {element(ics(9+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(9+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_6 {(6-nodoptC)*(6<=maxN+extraC)} {if(6<=maxN+extraC,if(evenCase,6,-1),0)}
+  {element(ics(11+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(11+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_7 {(7-nodoptC)*(7<=maxN+extraC)} {if(7<=maxN+extraC,if(evenCase,7,-1),0)}
+  {element(ics(13+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(13+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_8 {(8-nodoptC)*(8<=maxN+extraC)} {if(8<=maxN+extraC,if(evenCase,8,-1),0)}
+  {element(ics(15+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(15+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_9 {(9-nodoptC)*(9<=maxN+extraC)} {if(9<=maxN+extraC,if(evenCase,9,-1),0)}
+  {element(ics(17+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(17+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_10 {(10-nodoptC)*(10<=maxN+extraC)} {if(10<=maxN+extraC,if(evenCase,10,-1),0)}
+  {element(ics(19+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(19+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_11 {(11-nodoptC)*(11<=maxN+extraC)} {if(11<=maxN+extraC,if(evenCase,11,-1),0)}
+  {element(ics(21+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(21+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_12 {(12-nodoptC)*(12<=maxN+extraC)} {if(12<=maxN+extraC,if(evenCase,12,-1),0)}
+  {element(ics(23+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(23+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_13 {(13-nodoptC)*(13<=maxN+extraC)} {if(13<=maxN+extraC,if(evenCase,13,-1),0)}
+  {element(ics(25+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(25+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_14 {(14-nodoptC)*(14<=maxN+extraC)} {if(14<=maxN+extraC,if(evenCase,14,-1),0)}
+  {element(ics(27+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(27+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_15 {(15-nodoptC)*(15<=maxN+extraC)} {if(15<=maxN+extraC,if(evenCase,15,-1),0)}
+  {element(ics(29+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(29+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_16 {(16-nodoptC)*(16<=maxN+extraC)} {if(16<=maxN+extraC,if(evenCase,16,-1),0)}
+  {element(ics(31+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(31+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
*** I/O numbers to letters
Vin in 666
Vout {maxN+(oddN&((zinLEzout&zinGT0)|zin1))} out
Vgnd -1 GROUND
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Velem 0.2 0 PWL time_scale_factor={sim/varN}
+ (0.1 {element(1)} 0.9 {element(1)})
+ (1.1 {element(2)} 1.9 {element(2)})
+ (2.1 {element(3)} 2.9 {element(3)})
+ (3.1 {element(4)} 3.9 {element(4)})
+ (4.1 {element(5)} 4.9 {element(5)})
+ (5.1 {element(6)} 5.9 {element(6)})
+ (6.1 {element(7)} 6.9 {element(7)})
+ (7.1 {element(8)} 7.9 {element(8)})
+ (8.1 {element(9)} 8.9 {element(9)})
+ (9.1 {element(10)} 9.9 {element(10)})
+ (10.1 {element(11)} 10.9 {element(11)})
+ (11.1 {element(12)} 11.9 {element(12)})
+ (12.1 {element(13)} 12.9 {element(13)})
+ (13.1 {element(14)} 13.9 {element(14)})
+ (14.1 {element(15)} 14.9 {element(15)})
+ (15.1 {element(16)} 15.9 {element(16)})
+ (16.1 {element(17)} 16.9 {element(17)})
+ (17.1 {element(18)} 17.9 {element(18)})
+ (18.1 {element(19)} 18.9 {element(19)})
+ (19.1 {element(20)} 19.9 {element(20)})
+ (20.1 {element(21)} 20.9 {element(21)})
+ (21.1 {element(22)} 21.9 {element(22)})
+ (22.1 {element(23)} 22.9 {element(23)})
+ (23.1 {element(24)} 23.9 {element(24)})
+ (24.1 {element(25)} 24.9 {element(25)})
+ (25.1 {element(26)} 25.9 {element(26)})
+ (26.1 {element(27)} 26.9 {element(27)})
+ (27.1 {element(28)} 27.9 {element(28)})
+ (28.1 {element(29)} 28.9 {element(29)})
+ (29.1 {element(30)} 29.9 {element(30)})
+ (30.1 {element(31)} 30.9 {element(31)})
+ (31.1 {element(32)} 31.9 {element(32)})
.ends Butterworth_LC
********************************
*
*     Chebyshev
*
********************************
*
* Parameters used: Zin, Zout, fc, BWp, BWs, Asc, As, N
*   (optional: sim; hidden: Rser, Rpar)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2)
*
* [NOTES]
*
* - Frequency scaling is only possible for LP/HP, otherwise it's fp@Ap.
* - Zout=0 is only valid for odd orders.
* - The starting element, shunt or series, is automatically adjusted internally
* depending on the ratio of Zin/Zout.
* - On rare, random occasions, Rpar=1G may need to be set to make .TRAN analysis
* possible.
*
***********************
.subckt Chebyshev_LC IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ Zin=1 Zout=1
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ Asc=3.0103 Ap=1 As=60 N=0
+ Rpar=1G Rser=0
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1)
+ fc=if(fp2==0,0,sqrt(fp1*fp2)) lphp=(case<=2) bpbs=inv(lphp)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2) oddCase=par(case+1) evenCase=inv(oddCase)
+ allpass=(case==0) low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp<BWs))
+ epsilon_sc=sqrt(10**(Asc/10)-1) epsilon_s=sqrt(10**(As/10)-1)
+ epsilon_p=if(Ap>0,sqrt(10**(Ap/10)-1),1/cosh(acosh(ratio)*N)/epsilon_s)
+ wc=2*pi*if(lphp,BWp,fc)*wscale**table(case,1,-1,2,1,3,0) wscale=cosh(acosh(epsilon_sc/epsilon_p)/Order)
+ ratio=max(BWs/BWp, BWp/BWs) wp=2*pi*BWp
+ Order=if(N==0,ceil(acosh(epsilon_s/epsilon_p**u(Ap))/acosh(ratio))*(1+bpbs),N)
*** node helpers
.param sgnCase=if(evenCase,-1,1) sgnBand=if(bandpass,-1,1) zinGTzout=(Zin>Zout) zinLEzout=inv(zinGTzout)
+ zout0=(Zout==0) ZoutGT0=inv(zout0) zin0=(Zin==0) zinGT0=(Zin>0) zin1=(Zin==-1)
+ varN=Order/(1+bpbs) evenN=par(varN) oddN=inv(evenN) maxN=int(VarN/2) chkZinZout=((zin1 | zin0) ^ zout0)
*** LC network parameters
.param nodoptL=(oddCase | (zinGTzout & zoutGT0)) | (evenCase & (zin0 | (oddN & zout0)))
.param nodoptC=(evenCase | (zinGTzout & zoutGT0)) | (oddCase & (zin0 | (oddN & zout0)))
.param elemopt=(oddCase & zinLEzout & zinGT0) ^ (evenCase & zinGTzout & zoutGT0) ^
+ (evenCase & zin0) ^ (oddCase & zin1) ^ (zout0 & ( (oddCase & evenN) ^ (evenCase & oddN) ))
.param extraL=oddN & ( (oddCase & ((zinLEzout & zinGT0) ^ zin1)) |
+ (evenCase & ((zinGTzout & zoutGT0) ^ zin0 ^ zout0)) )
.param extraC=oddN & ( (evenCase & ((zinLEzout & zinGT0) ^ zin1)) |
+ (oddCase & ((zinGTzout & zoutGT0) ^ zin0 ^ zout0)) )
*** auxilliary coefficients
.param alfa=sqrt(1-4*Zin*Zout*(1+epsilon_p**2)**evenN/(abs(Zin)+Zout)**2)
.param delta=sinh(asinh(alfa/epsilon_p)/varN)
.param gamma=sinh(asinh(1/epsilon_p)/varN)
.func realpart(x) {sin((2*x-1)*pi/2/varN)}
.func beta(x) {if(x==0,1,if(chkZinZout,(gamma**2+sin(x*pi/2/varN)**2)*cos(x*pi/2/varN)**2,
+ gamma**2+delta**2-2*gamma*delta*cos(x*pi/varN)+sin(x*pi/varN)**2))}
* for i=1 thru N-1 do prod(beta[k],k,1,i/2)
.func prodP(x) {beta(2*(2<x))*beta(4*(4<x))*beta(6*(6<x))*beta(8*(8<x))*beta(10*(10<x))*
+ beta(12*(12<x))*beta(14*(14<x))*beta(16*(16<x))*beta(18*(18<x))*beta(20*(20<x))*
+ beta(22*(22<x))*beta(24*(24<x))*beta(26*(26<x))*beta(28*(28<x))*beta(30*(30<x))*beta(32*(32<x))}
.func prodI(x) {beta(1*(1<x))*beta(3*(3<x))*beta(5*(5<x))*beta(7*(7<x))*beta(9*(9<x))*
+ beta(11*(11<x))*beta(13*(13<x))*beta(15*(15<x))*beta(17*(17<x))*beta(19*(19<x))*
+ beta(21*(21<x))*beta(23*(23<x))*beta(25*(25<x))*beta(27*(27<x))*beta(29*(29<x))*beta(31*(31<x))}
*** unnormalizing impedance and frequency
.param Znorm=if(chkZinZout,max(Zout,Zin),Zin) fNorm=wc*(fc/BWp)**bpbs
*** recursion formulas for LC elements
.func element(x) {if(x>varN,1,2**inv(chkZinZout)*realpart(x)*
+ (prodP(x)/prodI(x)*(gamma-delta*inv(chkZinZout)))**((-1)**x))}
.func ics(x) {if(Zin<=0, varN+1-x, x)}
*** "L" elements, series or shunt
L_1 {666**nodoptL} {if(oddCase,1,-1)} {element(ics(2-elemopt))**sgnCase/fNorm*Znorm}
+  Cpar={element(ics(2-elemopt))**sgnBand/wp/Znorm*bpbs} Rser={Rser} Rpar={Rpar}
L_2 {(2-nodoptL)*(2<=maxN+extraL)} {if(2<=maxN+extraL,if(oddCase,2,-1),0)}
+  {element(ics(4-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(4-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_3 {(3-nodoptL)*(3<=maxN+extraL)} {if(3<=maxN+extraL,if(oddCase,3,-1),0)}
+  {element(ics(6-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(6-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_4 {(4-nodoptL)*(4<=maxN+extraL)} {if(4<=maxN+extraL,if(oddCase,4,-1),0)}
+  {element(ics(8-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(8-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_5 {(5-nodoptL)*(5<=maxN+extraL)} {if(5<=maxN+extraL,if(oddCase,5,-1),0)}
+  {element(ics(10-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(10-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_6 {(6-nodoptL)*(6<=maxN+extraL)} {if(6<=maxN+extraL,if(oddCase,6,-1),0)}
+  {element(ics(12-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(12-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_7 {(7-nodoptL)*(7<=maxN+extraL)} {if(7<=maxN+extraL,if(oddCase,7,-1),0)}
+  {element(ics(14-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(14-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_8 {(8-nodoptL)*(8<=maxN+extraL)} {if(8<=maxN+extraL,if(oddCase,8,-1),0)}
+  {element(ics(16-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(16-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_9 {(9-nodoptL)*(9<=maxN+extraL)} {if(9<=maxN+extraL,if(oddCase,9,-1),0)}
+  {element(ics(18-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(18-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_10 {(10-nodoptL)*(10<=maxN+extraL)} {if(10<=maxN+extraL,if(oddCase,10,-1),0)}
+  {element(ics(20-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(20-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_11 {(11-nodoptL)*(11<=maxN+extraL)} {if(11<=maxN+extraL,if(oddCase,11,-1),0)}
+  {element(ics(22-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(22-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_12 {(12-nodoptL)*(12<=maxN+extraL)} {if(12<=maxN+extraL,if(oddCase,12,-1),0)}
+  {element(ics(24-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(24-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_13 {(13-nodoptL)*(13<=maxN+extraL)} {if(13<=maxN+extraL,if(oddCase,13,-1),0)}
+  {element(ics(26-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(26-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_14 {(14-nodoptL)*(14<=maxN+extraL)} {if(14<=maxN+extraL,if(oddCase,14,-1),0)}
+  {element(ics(28-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(28-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_15 {(15-nodoptL)*(15<=maxN+extraL)} {if(15<=maxN+extraL,if(oddCase,15,-1),0)}
+  {element(ics(30-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(30-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
L_16 {(16-nodoptL)*(16<=maxN+extraL)} {if(16<=maxN+extraL,if(oddCase,16,-1),0)}
+  {element(ics(32-elemopt))**sgnCase/fNorm*Znorm} Cpar={element(ics(32-elemopt))**sgnBand/wp/Znorm*bpbs}
+  Rser={Rser} Rpar={Rpar}
*** "C" elements, series or shunt
C_1 {666**nodoptC} {if(evenCase,1,-1)} {element(ics(1+elemopt))**sgnCase/fNorm/Znorm}
+  Lser={element(ics(1+elemopt))**sgnBand/wp*Znorm*bpbs} RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_2 {(2-nodoptC)*(2<=maxN+extraC)} {if(2<=maxN+extraC,if(evenCase,2,-1),0)}
+  {element(ics(3+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(3+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_3 {(3-nodoptC)*(3<=maxN+extraC)} {if(3<=maxN+extraC,if(evenCase,3,-1),0)}
+  {element(ics(5+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(5+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_4 {(4-nodoptC)*(4<=maxN+extraC)} {if(4<=maxN+extraC,if(evenCase,4,-1),0)}
+  {element(ics(7+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(7+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_5 {(5-nodoptC)*(5<=maxN+extraC)} {if(5<=maxN+extraC,if(evenCase,5,-1),0)}
+  {element(ics(9+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(9+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_6 {(6-nodoptC)*(6<=maxN+extraC)} {if(6<=maxN+extraC,if(evenCase,6,-1),0)}
+  {element(ics(11+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(11+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_7 {(7-nodoptC)*(7<=maxN+extraC)} {if(7<=maxN+extraC,if(evenCase,7,-1),0)}
+  {element(ics(13+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(13+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_8 {(8-nodoptC)*(8<=maxN+extraC)} {if(8<=maxN+extraC,if(evenCase,8,-1),0)}
+  {element(ics(15+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(15+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_9 {(9-nodoptC)*(9<=maxN+extraC)} {if(9<=maxN+extraC,if(evenCase,9,-1),0)}
+  {element(ics(17+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(17+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_10 {(10-nodoptC)*(10<=maxN+extraC)} {if(10<=maxN+extraC,if(evenCase,10,-1),0)}
+  {element(ics(19+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(19+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_11 {(11-nodoptC)*(11<=maxN+extraC)} {if(11<=maxN+extraC,if(evenCase,11,-1),0)}
+  {element(ics(21+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(21+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_12 {(12-nodoptC)*(12<=maxN+extraC)} {if(12<=maxN+extraC,if(evenCase,12,-1),0)}
+  {element(ics(23+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(23+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_13 {(13-nodoptC)*(13<=maxN+extraC)} {if(13<=maxN+extraC,if(evenCase,13,-1),0)}
+  {element(ics(25+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(25+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_14 {(14-nodoptC)*(14<=maxN+extraC)} {if(14<=maxN+extraC,if(evenCase,14,-1),0)}
+  {element(ics(27+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(27+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_15 {(15-nodoptC)*(15<=maxN+extraC)} {if(15<=maxN+extraC,if(evenCase,15,-1),0)}
+  {element(ics(29+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(29+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
C_16 {(16-nodoptC)*(16<=maxN+extraC)} {if(16<=maxN+extraC,if(evenCase,16,-1),0)}
+  {element(ics(31+elemopt))**sgnCase/fNorm/Znorm} Lser={element(ics(31+elemopt))**sgnBand/wp*Znorm*bpbs}
+  RLshunt=0 Cpar=0 Rser={Rser} Rpar={Rpar}
*** I/O numbers to letters
Vin in 666
Vout {maxN+(oddN & ( (zinLEzout & zinGT0) | zin1 ))} out
Vgnd -1 GROUND
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Velem 0.2 0 PWL time_scale_factor={sim/varN}
+ (0.1 {element(1)} 0.9 {element(1)})
+ (1.1 {element(2)} 1.9 {element(2)})
+ (2.1 {element(3)} 2.9 {element(3)})
+ (3.1 {element(4)} 3.9 {element(4)})
+ (4.1 {element(5)} 4.9 {element(5)})
+ (5.1 {element(6)} 5.9 {element(6)})
+ (6.1 {element(7)} 6.9 {element(7)})
+ (7.1 {element(8)} 7.9 {element(8)})
+ (8.1 {element(9)} 8.9 {element(9)})
+ (9.1 {element(10)} 9.9 {element(10)})
+ (10.1 {element(11)} 10.9 {element(11)})
+ (11.1 {element(12)} 11.9 {element(12)})
+ (12.1 {element(13)} 12.9 {element(13)})
+ (13.1 {element(14)} 13.9 {element(14)})
+ (14.1 {element(15)} 14.9 {element(15)})
+ (15.1 {element(16)} 15.9 {element(16)})
+ (16.1 {element(17)} 16.9 {element(17)})
+ (17.1 {element(18)} 17.9 {element(18)})
+ (18.1 {element(19)} 18.9 {element(19)})
+ (19.1 {element(20)} 19.9 {element(20)})
+ (20.1 {element(21)} 20.9 {element(21)})
+ (21.1 {element(22)} 21.9 {element(22)})
+ (22.1 {element(23)} 22.9 {element(23)})
+ (23.1 {element(24)} 23.9 {element(24)})
+ (24.1 {element(25)} 24.9 {element(25)})
+ (25.1 {element(26)} 25.9 {element(26)})
+ (26.1 {element(27)} 26.9 {element(27)})
+ (27.1 {element(28)} 27.9 {element(28)})
+ (28.1 {element(29)} 28.9 {element(29)})
+ (29.1 {element(30)} 29.9 {element(30)})
+ (30.1 {element(31)} 30.9 {element(31)})
+ (31.1 {element(32)} 31.9 {element(32)})
.ends Chebyshev_LC
********************************************************************************
********************************************************************************
*
*                               ~~ ANALOG ACTIVE ~~
*
********************************************************************************
********************************************************************************
*
* nT=<-1,0>     = affects the response for Chebyshev and Cauer:
*                 nT=-1 => for a 1V step input, the output starts from <1-delta>
*                   for even orders and from 1 for odd orders;
*                 nT=0 => the DC response is normalized to 0dB, meaning As=As+Ap
*                   and Asc=Asc-Ap for even orders.
* sim [s]       = total .TRAN simulation time, for pins 0.2, 0.3, 0.4. E.g. if
*               the command is ".TRAN 25m" then sim=25m. (optional)
* fc  [Hz]      = center frequency.
* BWp [Hz]      = pass-band bandwidth.
* BWs [Hz]      = stop-band bandwidth.
*         See the graphs in the help manual on how to get the desired function.
* G=<-inf..inf> = gain, linear.
* Ap  [dB]      = pass-band ripple, positive value (Chebyshev and Cauer).
* As  [dB]      = stop-band attenuation, positive (all but Bessel).
* Asc [dB]      = frequency-scaling attenuation, positive.
* N=<1:32>      = order of the filter, for BP/BS it's value represents half the
*               lowpass prototype's order, e.g. a BP set with N=13 actually has
*               N=26. N=0 means minimum order determination based on the values
*               of the four frequencies (except Bessel).
*
* - Hidden:
*
* Rpar  [Ohm]   = dummy resistance across capacitors, default 1G, can be null.
*
************************
*
*     Bessel
*
************************
*
* Parameters used: BWp, BWs, G, Asc, N
*   (optional: sim, Rpar)
* Supports: AP/LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.2)
*
* [NOTES]
*
* - The terms for LP are calculated using the recursion formula and for HP they
* are simply reversed, therefore HP can't be constant delay.
* - For frequency scaling set Asc>0, but it's a polynomial approximation, thanks
* to zunzun.com. E.g. sweeping N from 1 to 32 with Asc=3.0103 will have a
* difference error of 309.33mdB between the lowest and the highest trace and
* ~12.5mdB between two adjacent traces, @Asc; the errors tend to be proportional
* with Asc. Try to keep Asc=<0..3>, no more.
* - There may be strange distortions in .AC for higher orders, that's LTspice
* doing its best to deal with a large chain of integrators; .TRAN is unaffected.
* Using the alternate solver or lowering {Rpar} could help dampen the errors (at
* the cost of lower poles).
*
***********************
.subckt Bessel IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 N=13
+ Rpar=1g
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2))
+ case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp>BWs))
+ wscale=if(Asc==0, 1, if( N==1,0.2589254**(-0.5/N), (8091309.68544832*exp((-0.5)*(((ln(Asc)-54.61336204495193)/
+ 10.45931985911644)**2+((ln(N)-8.03901973218457)/ 3.262082976398164)**2))+.02602784079436049) ))
+ wscale_AP=if(Asc==0, 1, table(N,2,1.73205,3,2.48134,4,3.24038,5,4.00575,
+ 6,4.7756,7,5.54875,8,6.3244,9,7.10198,10,7.881,11,8.6614,12,9.44273,
+ 13,10.2247,14,11.0074,15,11.7906,16,12.5742,17,13.3582,18,14.1424,19,14.9628,
+ 20,15.7114,21,16.4962,22,17.281,23,18.066,24,18.8511,25,19.6362,26,20.4213,
+ 27,21.2066,28,21.9918,29,22.7771,30,23.5624,31,24.3477,32,25.133))
+ Cs=if(allpass, wscale_AP, 1)/2/pi/if(case<3, BWp, fc)
.func b(x) {if( x>N, 1, x/2*(2*N-x+1)/(N-x+1) )}
.param b_0=b(2)*b(3)*b(4)*b(5)*b(6)*b(7)*b(8)*b(9)*b(10)*
+ b(11)*b(12)*b(13)*b(14)*b(15)*b(16)*b(17)*b(18)*b(19)*b(20)*
+ b(21)*b(22)*b(23)*b(24)*b(25)*b(26)*b(27)*b(28)*b(29)*b(30)*
+ b(31)*b(32)
*** node helpers
.func par(x) {x/2==int(x/2)}
.param BPBW=if(bandpass, BWp/fc, 1)/wscale BSBW=if(bandstop, BWp/fc, 1)*wscale
+ CsSel=(allpass | low | bandstop) LsSel=(high | bandpass)
+ allpass=(case==0) low=(case==1) high=(case==2) bandstop=(case==4) bandpass=(case==3)
+ lphp=(allpass | low | high) bpbs=(bandpass | bandstop)
Gin 0 666 in GROUND 1
Rin 666 0 1
*** numerator
Gan 0 {999*allpass} {666*allpass} 0 {allpass}
Ga1 0 {allpass} {666*allpass} 0 {if(allpass&par(N+1),-1,1)}
Ga2 0 {2*(2<=N&allpass)} {666*(2<=N&allpass)} 0 {b(2)*(-allpass)**(N+1)}
Ga3 0 {3*(3<=N&allpass)} {666*(3<=N&allpass)} 0 {b(3)*(-allpass)**N}
Ga4 0 {4*(4<=N&allpass)} {666*(4<=N&allpass)} 0 {b(4)*(-allpass)**(N+1)}
Ga5 0 {5*(5<=N&allpass)} {666*(5<=N&allpass)} 0 {b(5)*(-allpass)**N}
Ga6 0 {6*(6<=N&allpass)} {666*(6<=N&allpass)} 0 {b(6)*(-allpass)**(N+1)}
Ga7 0 {7*(7<=N&allpass)} {666*(7<=N&allpass)} 0 {b(7)*(-allpass)**N}
Ga8 0 {8*(8<=N&allpass)} {666*(8<=N&allpass)} 0 {b(8)*(-allpass)**(N+1)}
Ga9 0 {9*(9<=N&allpass)} {666*(9<=N&allpass)} 0 {b(9)*(-allpass)**N}
Ga10 0 {10*(10<=N&allpass)} {666*(10<=N&allpass)} 0 {b(10)*(-allpass)**(N+1)}
Ga11 0 {11*(11<=N&allpass)} {666*(11<=N&allpass)} 0 {b(11)*(-allpass)**N}
Ga12 0 {12*(12<=N&allpass)} {666*(12<=N&allpass)} 0 {b(12)*(-allpass)**(N+1)}
Ga13 0 {13*(13<=N&allpass)} {666*(13<=N&allpass)} 0 {b(13)*(-allpass)**N}
Ga14 0 {14*(14<=N&allpass)} {666*(14<=N&allpass)} 0 {b(14)*(-allpass)**(N+1)}
Ga15 0 {15*(15<=N&allpass)} {666*(15<=N&allpass)} 0 {b(15)*(-allpass)**N}
Ga16 0 {16*(16<=N&allpass)} {666*(16<=N&allpass)} 0 {b(16)*(-allpass)**(N+1)}
Ga17 0 {17*(17<=N&allpass)} {666*(17<=N&allpass)} 0 {b(17)*(-allpass)**N}
Ga18 0 {18*(18<=N&allpass)} {666*(18<=N&allpass)} 0 {b(18)*(-allpass)**(N+1)}
Ga19 0 {19*(19<=N&allpass)} {666*(19<=N&allpass)} 0 {b(19)*(-allpass)**N}
Ga20 0 {20*(20<=N&allpass)} {666*(20<=N&allpass)} 0 {b(20)*(-allpass)**(N+1)}
Ga21 0 {21*(21<=N&allpass)} {666*(21<=N&allpass)} 0 {b(21)*(-allpass)**N}
Ga22 0 {22*(22<=N&allpass)} {666*(22<=N&allpass)} 0 {b(22)*(-allpass)**(N+1)}
Ga23 0 {23*(23<=N&allpass)} {666*(23<=N&allpass)} 0 {b(23)*(-allpass)**N}
Ga24 0 {24*(24<=N&allpass)} {666*(24<=N&allpass)} 0 {b(24)*(-allpass)**(N+1)}
Ga25 0 {25*(25<=N&allpass)} {666*(25<=N&allpass)} 0 {b(25)*(-allpass)**N}
Ga26 0 {26*(26<=N&allpass)} {666*(26<=N&allpass)} 0 {b(26)*(-allpass)**(N+1)}
Ga27 0 {27*(27<=N&allpass)} {666*(27<=N&allpass)} 0 {b(27)*(-allpass)**N}
Ga28 0 {28*(28<=N&allpass)} {666*(28<=N&allpass)} 0 {b(28)*(-allpass)**(N+1)}
Ga29 0 {29*(29<=N&allpass)} {666*(29<=N&allpass)} 0 {b(29)*(-allpass)**N}
Ga30 0 {30*(30<=N&allpass)} {666*(30<=N&allpass)} 0 {b(30)*(-allpass)**(N+1)}
Ga31 0 {31*(31<=N&allpass)} {666*(31<=N&allpass)} 0 {b(31)*(-allpass)**N}
Ga32 0 {32*(32<=N&allpass)} {666*(32<=N&allpass)} 0 {b(32)*(-allpass)**(N+1)}
*** denominator
Gb0 0 1 {if(allpass,0,666)} 999 {b(1)}
Gb1 0 {2*(2<=N)} {1*(2<=N)} {999*(2<=N)} {b(2)}
Gb2 0 {3*(3<=N)} {2*(3<=N)} {999*(3<=N)} {b(3)}
Gb3 0 {4*(4<=N)} {3*(4<=N)} {999*(4<=N)} {b(4)}
Gb4 0 {5*(5<=N)} {4*(5<=N)} {999*(5<=N)} {b(5)}
Gb5 0 {6*(6<=N)} {5*(6<=N)} {999*(6<=N)} {b(6)}
Gb6 0 {7*(7<=N)} {6*(7<=N)} {999*(7<=N)} {b(7)}
Gb7 0 {8*(8<=N)} {7*(8<=N)} {999*(8<=N)} {b(8)}
Gb8 0 {9*(9<=N)} {8*(9<=N)} {999*(9<=N)} {b(9)}
Gb9 0 {10*(10<=N)} {9*(10<=N)} {999*(10<=N)} {b(10)}
Gb10 0 {11*(11<=N)} {10*(11<=N)} {999*(11<=N)} {b(11)}
Gb11 0 {12*(12<=N)} {11*(12<=N)} {999*(12<=N)} {b(12)}
Gb12 0 {13*(13<=N)} {12*(13<=N)} {999*(13<=N)} {b(13)}
Gb13 0 {14*(14<=N)} {13*(14<=N)} {999*(14<=N)} {b(14)}
Gb14 0 {15*(15<=N)} {14*(15<=N)} {999*(15<=N)} {b(15)}
Gb15 0 {16*(16<=N)} {15*(16<=N)} {999*(16<=N)} {b(16)}
Gb16 0 {17*(17<=N)} {16*(17<=N)} {999*(17<=N)} {b(17)}
Gb17 0 {18*(18<=N)} {17*(18<=N)} {999*(18<=N)} {b(18)}
Gb18 0 {19*(19<=N)} {18*(19<=N)} {999*(19<=N)} {b(19)}
Gb19 0 {20*(20<=N)} {19*(20<=N)} {999*(20<=N)} {b(20)}
Gb20 0 {21*(21<=N)} {20*(21<=N)} {999*(21<=N)} {b(21)}
Gb21 0 {22*(22<=N)} {21*(22<=N)} {999*(22<=N)} {b(22)}
Gb22 0 {23*(23<=N)} {22*(23<=N)} {999*(23<=N)} {b(23)}
Gb23 0 {24*(24<=N)} {23*(24<=N)} {999*(24<=N)} {b(24)}
Gb24 0 {25*(25<=N)} {24*(25<=N)} {999*(25<=N)} {b(25)}
Gb25 0 {26*(26<=N)} {25*(26<=N)} {999*(26<=N)} {b(26)}
Gb26 0 {27*(27<=N)} {26*(27<=N)} {999*(27<=N)} {b(27)}
Gb27 0 {28*(28<=N)} {27*(28<=N)} {999*(28<=N)} {b(28)}
Gb28 0 {29*(29<=N)} {28*(29<=N)} {999*(29<=N)} {b(29)}
Gb29 0 {30*(30<=N)} {29*(30<=N)} {999*(30<=N)} {b(30)}
Gb30 0 {31*(31<=N)} {30*(31<=N)} {999*(31<=N)} {b(31)}
Gb31 0 {32*(32<=N)} {31*(32<=N)} {999*(32<=N)} {b(32)}
*** states
* AP/LP/BS
Cs1 {CsSel} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs2 {2*(2<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs3 {3*(3<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs4 {4*(4<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs5 {5*(5<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs6 {6*(6<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs7 {7*(7<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs8 {8*(8<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs9 {9*(9<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs10 {10*(10<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs11 {11*(11<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs12 {12*(12<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs13 {13*(13<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs14 {14*(14<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs15 {15*(15<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs16 {16*(16<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs17 {17*(17<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs18 {18*(18<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs19 {19*(19<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs20 {20*(20<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs21 {21*(21<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs22 {22*(22<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs23 {23*(23<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs24 {24*(24<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs25 {25*(25<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs26 {26*(26<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs27 {27*(27<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs28 {28*(28<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs29 {29*(29<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs30 {30*(30<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs31 {31*(31<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
Cs32 {32*(32<=N&CsSel)} 0 {Cs*BSBW*CsSel} Lser={Cs/BSBW*bandstop} Rpar={Rpar} Rser=0 Cpar=0 RLshunt=0
* HP/BP
Ls1 {LsSel} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls2 {2*(2<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls3 {3*(3<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls4 {4*(4<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls5 {5*(5<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls6 {6*(6<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls7 {7*(7<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls8 {8*(8<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls9 {9*(9<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls10 {10*(10<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls11 {11*(11<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls12 {12*(12<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls13 {13*(13<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls14 {14*(14<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls15 {15*(15<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls16 {16*(16<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls17 {17*(17<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls18 {18*(18<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls19 {19*(19<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls20 {20*(20<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls21 {21*(21<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls22 {22*(22<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls23 {23*(23<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls24 {24*(24<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls25 {25*(25<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls26 {26*(26<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls27 {27*(27<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls28 {28*(28<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls29 {29*(29<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls30 {30*(30<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls31 {31*(31<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
Ls32 {32*(32<=N&LsSel)} 0 {Cs*BPBW*LsSel} Cpar={Cs/BPBW*bandpass} Rser=0 Rpar=0
*** mux end & output
Gy 0 999 {N} 0 1
Ry 0 999 1
Rout out GROUND 1
Gout GROUND out 999 0 {G*(-1)**(allpass&par(N+1))}
*** test area
Vtest 0.2 0 PWL time_scale_factor={sim/N}
+ (0.1 {b(1)} 0.9 {b(1)})
+ (1.1 {b(2)} 1.9 {b(2)})
+ (2.1 {b(3)} 2.9 {b(3)})
+ (3.1 {b(4)} 3.9 {b(4)})
+ (4.1 {b(5)} 4.9 {b(5)})
+ (5.1 {b(6)} 5.9 {b(6)})
+ (6.1 {b(7)} 6.9 {b(7)})
+ (7.1 {b(8)} 7.9 {b(8)})
+ (8.1 {b(9)} 8.9 {b(9)})
+ (9.1 {b(10)} 9.9 {b(10)})
+ (10.1 {b(11)} 10.9 {b(11)})
+ (11.1 {b(12)} 11.9 {b(12)})
+ (12.1 {b(13)} 12.9 {b(13)})
+ (13.1 {b(14)} 13.9 {b(14)})
+ (14.1 {b(15)} 14.9 {b(15)})
+ (15.1 {b(16)} 15.9 {b(16)})
+ (16.1 {b(17)} 16.9 {b(17)})
+ (17.1 {b(18)} 17.9 {b(18)})
+ (18.1 {b(19)} 18.9 {b(19)})
+ (19.1 {b(20)} 19.9 {b(20)})
+ (20.1 {b(21)} 20.9 {b(21)})
+ (21.1 {b(22)} 21.9 {b(22)})
+ (22.1 {b(23)} 22.9 {b(23)})
+ (23.1 {b(24)} 23.9 {b(24)})
+ (24.1 {b(25)} 24.9 {b(25)})
+ (25.1 {b(26)} 25.9 {b(26)})
+ (26.1 {b(27)} 26.9 {b(27)})
+ (27.1 {b(28)} 27.9 {b(28)})
+ (28.1 {b(29)} 28.9 {b(29)})
+ (29.1 {b(30)} 29.9 {b(30)})
+ (30.1 {b(31)} 30.9 {b(31)})
+ (31.1 {b(32)} 31.9 {b(32)})
.ends Bessel
********************************
*
*     Butterworth
*
********************************
*
* Parameters: fc, BWp, BWs, G, Asc, As, N
*   (optional: sim, Rpar)
* Supports: AP/LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3)
*
********************************
.subckt Butterworth IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 As=40 N=0
+ Rpar=1G
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1)  BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2))
+ allpass=(case==0) low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
+ BPBW=if(bandpass, BWp/fc, 1) BSBW=if(bandstop, BWp/fc, 1)
+ CsSel=(allpass | low | bandstop) LsSel=(high | bandpass)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2) Cs=.5/pi/if(fc==0,BWp,fc)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp>BWs))
.param epsilon_s=10**(As/10)-1 epsilon_sc=if(Asc>0, 10**(Asc/10)-1, exp(-2*abs(log(ratio))*N)*epsilon_s)
.param wscale=epsilon_sc**(.5/Order) ratio=BWs/BWp-allpass/2
.param Order=if(N==0,ceil( log(epsilon_s**u(As)/epsilon_sc)/abs(2*log(ratio))), N)
*** real and imaginary parts of the poles
.func real(x) {sin((2*x-1)*pi/2/Order)/wscale}
.func imag(x) {cos((2*x-1)*pi/2/Order)/wscale}
*** a[m,n], b[m,n] terms
.func a2(x) {allpass}
.func a1(x) {if(allpass | x==N21, (1-3*allpass)*real(x), 0)}
.func a0(x) {real(x)**2+imag(x)**2}
.func b1(x) {2*real(x)}
.func b0(x) {real(x)**2+imag(x)**2}
*** a2[n]
Ga2_1 0 1 in 0 {a2(1)}
Ga2_2 0 {2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a2(2)}
Ga2_3 0 {3*(3<=nodopt)} {2*(3<=nodopt)} 0 {a2(3)}
Ga2_4 0 {4*(4<=nodopt)} {3*(4<=nodopt)} 0 {a2(4)}
Ga2_5 0 {5*(5<=nodopt)} {4*(5<=nodopt)} 0 {a2(5)}
Ga2_6 0 {6*(6<=nodopt)} {5*(6<=nodopt)} 0 {a2(6)}
Ga2_7 0 {7*(7<=nodopt)} {6*(7<=nodopt)} 0 {a2(7)}
Ga2_8 0 {8*(8<=nodopt)} {7*(8<=nodopt)} 0 {a2(8)}
Ga2_9 0 {9*(9<=nodopt)} {8*(9<=nodopt)} 0 {a2(9)}
Ga2_10 0 {10*(10<=nodopt)} {9*(10<=nodopt)} 0 {a2(10)}
Ga2_11 0 {11*(11<=nodopt)} {10*(11<=nodopt)} 0 {a2(11)}
Ga2_12 0 {12*(12<=nodopt)} {11*(12<=nodopt)} 0 {a2(12)}
Ga2_13 0 {13*(13<=nodopt)} {12*(13<=nodopt)} 0 {a2(13)}
Ga2_14 0 {14*(14<=nodopt)} {13*(14<=nodopt)} 0 {a2(14)}
Ga2_15 0 {15*(15<=nodopt)} {14*(15<=nodopt)} 0 {a2(15)}
Ga2_16 0 {16*(16<=nodopt)} {15*(16<=nodopt)} 0 {a2(16)}
*** a1[n]
Ga1_1 0 1.2 in 0 {a1(1)}
Ga1_2 0 {2.2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a1(2)}
Ga1_3 0 {3.2*(3<=nodopt)} {2*(3<=nodopt)} 0 {a1(3)}
Ga1_4 0 {4.2*(4<=nodopt)} {3*(4<=nodopt)} 0 {a1(4)}
Ga1_5 0 {5.2*(5<=nodopt)} {4*(5<=nodopt)} 0 {a1(5)}
Ga1_6 0 {6.2*(6<=nodopt)} {5*(6<=nodopt)} 0 {a1(6)}
Ga1_7 0 {7.2*(7<=nodopt)} {6*(7<=nodopt)} 0 {a1(7)}
Ga1_8 0 {8.2*(8<=nodopt)} {7*(8<=nodopt)} 0 {a1(8)}
Ga1_9 0 {9.2*(9<=nodopt)} {8*(9<=nodopt)} 0 {a1(9)}
Ga1_10 0 {10.2*(10<=nodopt)} {9*(10<=nodopt)} 0 {a1(10)}
Ga1_11 0 {11.2*(11<=nodopt)} {10*(11<=nodopt)} 0 {a1(11)}
Ga1_12 0 {12.2*(12<=nodopt)} {11*(12<=nodopt)} 0 {a1(12)}
Ga1_13 0 {13.2*(13<=nodopt)} {12*(13<=nodopt)} 0 {a1(13)}
Ga1_14 0 {14.2*(14<=nodopt)} {13*(14<=nodopt)} 0 {a1(14)}
Ga1_15 0 {15.2*(15<=nodopt)} {14*(15<=nodopt)} 0 {a1(15)}
Ga1_16 0 {16.2*(16<=nodopt)} {15*(16<=nodopt)} 0 {a1(16)}
*** a0[n]
Ga0_1 0 1.1 in 0 {a0(1)}
Ga0_2 0 {2.1*(2<=nodopt)} {1*(2<=nodopt)} 0 {a0(2)}
Ga0_3 0 {3.1*(3<=nodopt)} {2*(3<=nodopt)} 0 {a0(3)}
Ga0_4 0 {4.1*(4<=nodopt)} {3*(4<=nodopt)} 0 {a0(4)}
Ga0_5 0 {5.1*(5<=nodopt)} {4*(5<=nodopt)} 0 {a0(5)}
Ga0_6 0 {6.1*(6<=nodopt)} {5*(6<=nodopt)} 0 {a0(6)}
Ga0_7 0 {7.1*(7<=nodopt)} {6*(7<=nodopt)} 0 {a0(7)}
Ga0_8 0 {8.1*(8<=nodopt)} {7*(8<=nodopt)} 0 {a0(8)}
Ga0_9 0 {9.1*(9<=nodopt)} {8*(9<=nodopt)} 0 {a0(9)}
Ga0_10 0 {10.1*(10<=nodopt)} {9*(10<=nodopt)} 0 {a0(10)}
Ga0_11 0 {11.1*(11<=nodopt)} {10*(11<=nodopt)} 0 {a0(11)}
Ga0_12 0 {12.1*(12<=nodopt)} {11*(12<=nodopt)} 0 {a0(12)}
Ga0_13 0 {13.1*(13<=nodopt)} {12*(13<=nodopt)} 0 {a0(13)}
Ga0_14 0 {14.1*(14<=nodopt)} {13*(14<=nodopt)} 0 {a0(14)}
Ga0_15 0 {15.1*(15<=nodopt)} {14*(15<=nodopt)} 0 {a0(15)}
Ga0_16 0 {16.1*(16<=nodopt)} {15*(16<=nodopt)} 0 {a0(16)}
*** b2[n]
Gb2_1 0 1 1.2 0 1
Gb2_2 0 {2*(2<=nodopt)} {2.2*(2<=nodopt)} 0 1
Gb2_3 0 {3*(3<=nodopt)} {3.2*(3<=nodopt)} 0 1
Gb2_4 0 {4*(4<=nodopt)} {4.2*(4<=nodopt)} 0 1
Gb2_5 0 {5*(5<=nodopt)} {5.2*(5<=nodopt)} 0 1
Gb2_6 0 {6*(6<=nodopt)} {6.2*(6<=nodopt)} 0 1
Gb2_7 0 {7*(7<=nodopt)} {7.2*(7<=nodopt)} 0 1
Gb2_8 0 {8*(8<=nodopt)} {8.2*(8<=nodopt)} 0 1
Gb2_9 0 {9*(9<=nodopt)} {9.2*(9<=nodopt)} 0 1
Gb2_10 0 {10*(10<=nodopt)} {10.2*(10<=nodopt)} 0 1
Gb2_11 0 {11*(11<=nodopt)} {11.2*(11<=nodopt)} 0 1
Gb2_12 0 {12*(12<=nodopt)} {12.2*(12<=nodopt)} 0 1
Gb2_13 0 {13*(13<=nodopt)} {13.2*(13<=nodopt)} 0 1
Gb2_14 0 {14*(14<=nodopt)} {14.2*(14<=nodopt)} 0 1
Gb2_15 0 {15*(15<=nodopt)} {15.2*(15<=nodopt)} 0 1
Gb2_16 0 {16*(16<=nodopt)} {16.2*(16<=nodopt)} 0 1
*** b1[n]
Gb1_1 0 1.2 1.1 1 {b1(1)}
Gb1_2 0 {2.2*(2<=nodopt)} {2.1*(2<=nodopt)} {2*(2<=nodopt)} {b1(2)}
Gb1_3 0 {3.2*(3<=nodopt)} {3.1*(3<=nodopt)} {3*(3<=nodopt)} {b1(3)}
Gb1_4 0 {4.2*(4<=nodopt)} {4.1*(4<=nodopt)} {4*(4<=nodopt)} {b1(4)}
Gb1_5 0 {5.2*(5<=nodopt)} {5.1*(5<=nodopt)} {5*(5<=nodopt)} {b1(5)}
Gb1_6 0 {6.2*(6<=nodopt)} {6.1*(6<=nodopt)} {6*(6<=nodopt)} {b1(6)}
Gb1_7 0 {7.2*(7<=nodopt)} {7.1*(7<=nodopt)} {7*(7<=nodopt)} {b1(7)}
Gb1_8 0 {8.2*(8<=nodopt)} {8.1*(8<=nodopt)} {8*(8<=nodopt)} {b1(8)}
Gb1_9 0 {9.2*(9<=nodopt)} {9.1*(9<=nodopt)} {9*(9<=nodopt)} {b1(9)}
Gb1_10 0 {10.2*(10<=nodopt)} {10.1*(10<=nodopt)} {10*(10<=nodopt)} {b1(10)}
Gb1_11 0 {11.2*(11<=nodopt)} {11.1*(11<=nodopt)} {11*(11<=nodopt)} {b1(11)}
Gb1_12 0 {12.2*(12<=nodopt)} {12.1*(12<=nodopt)} {12*(12<=nodopt)} {b1(12)}
Gb1_13 0 {13.2*(13<=nodopt)} {13.1*(13<=nodopt)} {13*(13<=nodopt)} {b1(13)}
Gb1_14 0 {14.2*(14<=nodopt)} {14.1*(14<=nodopt)} {14*(14<=nodopt)} {b1(14)}
Gb1_15 0 {15.2*(15<=nodopt)} {15.1*(15<=nodopt)} {15*(15<=nodopt)} {b1(15)}
Gb1_16 0 {16.2*(16<=nodopt)} {16.1*(16<=nodopt)} {16*(16<=nodopt)} {b1(16)}
*** b0[n]
Gb0_1 0 1.1 0 1 {b0(1)}
Gb0_2 0 {2.1*(2<=nodopt)} 0 {2*(2<=nodopt)} {b0(2)}
Gb0_3 0 {3.1*(3<=nodopt)} 0 {3*(3<=nodopt)} {b0(3)}
Gb0_4 0 {4.1*(4<=nodopt)} 0 {4*(4<=nodopt)} {b0(4)}
Gb0_5 0 {5.1*(5<=nodopt)} 0 {5*(5<=nodopt)} {b0(5)}
Gb0_6 0 {6.1*(6<=nodopt)} 0 {6*(6<=nodopt)} {b0(6)}
Gb0_7 0 {7.1*(7<=nodopt)} 0 {7*(7<=nodopt)} {b0(7)}
Gb0_8 0 {8.1*(8<=nodopt)} 0 {8*(8<=nodopt)} {b0(8)}
Gb0_9 0 {9.1*(9<=nodopt)} 0 {9*(9<=nodopt)} {b0(9)}
Gb0_10 0 {10.1*(10<=nodopt)} 0 {10*(10<=nodopt)} {b0(10)}
Gb0_11 0 {11.1*(11<=nodopt)} 0 {11*(11<=nodopt)} {b0(11)}
Gb0_12 0 {12.1*(12<=nodopt)} 0 {12*(12<=nodopt)} {b0(12)}
Gb0_13 0 {13.1*(13<=nodopt)} 0 {13*(13<=nodopt)} {b0(13)}
Gb0_14 0 {14.1*(14<=nodopt)} 0 {14*(14<=nodopt)} {b0(14)}
Gb0_15 0 {15.1*(15<=nodopt)} 0 {15*(15<=nodopt)} {b0(15)}
Gb0_16 0 {16.1*(16<=nodopt)} 0 {16*(16<=nodopt)} {b0(16)}
*** states for LP/BS
* x1[n]
Cs1_1 {1.1*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(1)*BSBW} Lser={bandstop*Cs/(BSBW*b1(1))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_2 {2.1*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(2)*BSBW} Lser={bandstop*Cs/(BSBW*b1(2))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_3 {3.1*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(3)*BSBW} Lser={bandstop*Cs/(BSBW*b1(3))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_4 {4.1*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(4)*BSBW} Lser={bandstop*Cs/(BSBW*b1(4))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_5 {5.1*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(5)*BSBW} Lser={bandstop*Cs/(BSBW*b1(5))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_6 {6.1*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(6)*BSBW} Lser={bandstop*Cs/(BSBW*b1(6))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_7 {7.1*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(7)*BSBW} Lser={bandstop*Cs/(BSBW*b1(7))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_8 {8.1*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(8)*BSBW} Lser={bandstop*Cs/(BSBW*b1(8))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_9 {9.1*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(9)*BSBW} Lser={bandstop*Cs/(BSBW*b1(9))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_10 {10.1*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(10)*BSBW} Lser={bandstop*Cs/(BSBW*b1(10))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_11 {11.1*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(11)*BSBW} Lser={bandstop*Cs/(BSBW*b1(11))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_12 {12.1*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(12)*BSBW} Lser={bandstop*Cs/(BSBW*b1(12))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_13 {13.1*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(13)*BSBW} Lser={bandstop*Cs/(BSBW*b1(13))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_14 {14.1*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(14)*BSBW} Lser={bandstop*Cs/(BSBW*b1(14))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_15 {15.1*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(15)*BSBW} Lser={bandstop*Cs/(BSBW*b1(15))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_16 {16.1*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(16)*BSBW} Lser={bandstop*Cs/(BSBW*b1(16))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
* x2[n]
Cs2_1 {1.2*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_2 {2.2*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_3 {3.2*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_4 {4.2*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_5 {5.2*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_6 {6.2*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_7 {7.2*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_8 {8.2*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_9 {9.2*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_10 {10.2*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_11 {11.2*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_12 {12.2*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_13 {13.2*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_14 {14.2*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_15 {15.2*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_16 {16.2*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
*** states for HP/BP
* x1[n]
Ls1_1 {1.1*((1<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(1)*BPBW} Cpar={bandpass*Cs/BPBW*b1(1)} Rpar={Rpar} Rser=0
Ls1_2 {2.1*((2<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(2)*BPBW} Cpar={bandpass*Cs/BPBW*b1(2)} Rpar={Rpar} Rser=0
Ls1_3 {3.1*((3<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(3)*BPBW} Cpar={bandpass*Cs/BPBW*b1(3)} Rpar={Rpar} Rser=0
Ls1_4 {4.1*((4<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(4)*BPBW} Cpar={bandpass*Cs/BPBW*b1(4)} Rpar={Rpar} Rser=0
Ls1_5 {5.1*((5<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(5)*BPBW} Cpar={bandpass*Cs/BPBW*b1(5)} Rpar={Rpar} Rser=0
Ls1_6 {6.1*((6<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(6)*BPBW} Cpar={bandpass*Cs/BPBW*b1(6)} Rpar={Rpar} Rser=0
Ls1_7 {7.1*((7<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(7)*BPBW} Cpar={bandpass*Cs/BPBW*b1(7)} Rpar={Rpar} Rser=0
Ls1_8 {8.1*((8<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(8)*BPBW} Cpar={bandpass*Cs/BPBW*b1(8)} Rpar={Rpar} Rser=0
Ls1_9 {9.1*((9<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(9)*BPBW} Cpar={bandpass*Cs/BPBW*b1(9)} Rpar={Rpar} Rser=0
Ls1_10 {10.1*((10<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(10)*BPBW} Cpar={bandpass*Cs/BPBW*b1(10)} Rpar={Rpar} Rser=0
Ls1_11 {11.1*((11<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(11)*BPBW} Cpar={bandpass*Cs/BPBW*b1(11)} Rpar={Rpar} Rser=0
Ls1_12 {12.1*((12<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(12)*BPBW} Cpar={bandpass*Cs/BPBW*b1(12)} Rpar={Rpar} Rser=0
Ls1_13 {13.1*((13<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(13)*BPBW} Cpar={bandpass*Cs/BPBW*b1(13)} Rpar={Rpar} Rser=0
Ls1_14 {14.1*((14<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(14)*BPBW} Cpar={bandpass*Cs/BPBW*b1(14)} Rpar={Rpar} Rser=0
Ls1_15 {15.1*((15<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(15)*BPBW} Cpar={bandpass*Cs/BPBW*b1(15)} Rpar={Rpar} Rser=0
Ls1_16 {16.1*((16<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(16)*BPBW} Cpar={bandpass*Cs/BPBW*b1(16)} Rpar={Rpar} Rser=0
* x2[n]
Ls2_1 {1.2*((1<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_2 {2.2*((2<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_3 {3.2*((3<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_4 {4.2*((4<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_5 {5.2*((5<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_6 {6.2*((6<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_7 {7.2*((7<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_8 {8.2*((8<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_9 {9.2*((9<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_10 {10.2*((10<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_11 {11.2*((11<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_12 {12.2*((12<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_13 {13.2*((13<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_14 {14.2*((14<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_15 {15.2*((15<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_16 {16.2*((16<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
*** 2nd order stage end resistors for G-sources
R1 1 0 1
R2 {2*(2<=nodopt)} 0 1
R3 {3*(3<=nodopt)} 0 1
R4 {4*(4<=nodopt)} 0 1
R5 {5*(5<=nodopt)} 0 1
R6 {6*(6<=nodopt)} 0 1
R7 {7*(7<=nodopt)} 0 1
R8 {8*(8<=nodopt)} 0 1
R9 {9*(9<=nodopt)} 0 1
R10 {10*(10<=nodopt)} 0 1
R11 {11*(11<=nodopt)} 0 1
R12 {12*(12<=nodopt)} 0 1
R13 {13*(13<=nodopt)} 0 1
R14 {14*(14<=nodopt)} 0 1
R15 {15*(15<=nodopt)} 0 1
R16 {16*(16<=nodopt)} 0 1
*** buffered output
Gout GROUND out {nodOpt} 0 {G}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Vreal 0.2 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {real(1)} 0.9 {real(1)})
+ (1.1 {real(2)} 1.9 {real(2)})
+ (2.1 {real(3)} 2.9 {real(3)})
+ (3.1 {real(4)} 3.9 {real(4)})
+ (4.1 {real(5)} 4.9 {real(5)})
+ (5.1 {real(6)} 5.9 {real(6)})
+ (6.1 {real(7)} 6.9 {real(7)})
+ (7.1 {real(8)} 7.9 {real(8)})
+ (8.1 {real(9)} 8.9 {real(9)})
+ (9.1 {real(10)} 9.9 {real(10)})
+ (10.1 {real(11)} 10.9 {real(11)})
+ (11.1 {real(12)} 11.9 {real(12)})
+ (12.1 {real(13)} 12.9 {real(13)})
+ (13.1 {real(14)} 13.9 {real(14)})
+ (14.1 {real(15)} 14.9 {real(15)})
+ (15.1 {real(16)} 15.9 {real(16)})
+ (16.1 {real(17)} 16.9 {real(17)})
+ (17.1 {real(18)} 17.9 {real(18)})
+ (18.1 {real(19)} 18.9 {real(19)})
+ (19.1 {real(20)} 19.9 {real(20)})
+ (20.1 {real(21)} 20.9 {real(21)})
+ (21.1 {real(22)} 21.9 {real(22)})
+ (22.1 {real(23)} 22.9 {real(23)})
+ (23.1 {real(24)} 23.9 {real(24)})
+ (24.1 {real(25)} 24.9 {real(25)})
+ (25.1 {real(26)} 25.9 {real(26)})
+ (26.1 {real(27)} 26.9 {real(27)})
+ (27.1 {real(28)} 27.9 {real(28)})
+ (28.1 {real(29)} 28.9 {real(29)})
+ (29.1 {real(30)} 29.9 {real(30)})
+ (30.1 {real(31)} 30.9 {real(31)})
+ (31.1 {real(32)} 31.9 {real(32)})
Vimag 0.3 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {imag(1)} 0.9 {imag(1)})
+ (1.1 {imag(2)} 1.9 {imag(2)})
+ (2.1 {imag(3)} 2.9 {imag(3)})
+ (3.1 {imag(4)} 3.9 {imag(4)})
+ (4.1 {imag(5)} 4.9 {imag(5)})
+ (5.1 {imag(6)} 5.9 {imag(6)})
+ (6.1 {imag(7)} 6.9 {imag(7)})
+ (7.1 {imag(8)} 7.9 {imag(8)})
+ (8.1 {imag(9)} 8.9 {imag(9)})
+ (9.1 {imag(10)} 9.9 {imag(10)})
+ (10.1 {imag(11)} 10.9 {imag(11)})
+ (11.1 {imag(12)} 11.9 {imag(12)})
+ (12.1 {imag(13)} 12.9 {imag(13)})
+ (13.1 {imag(14)} 13.9 {imag(14)})
+ (14.1 {imag(15)} 14.9 {imag(15)})
+ (15.1 {imag(16)} 15.9 {imag(16)})
+ (16.1 {imag(17)} 16.9 {imag(17)})
+ (17.1 {imag(18)} 17.9 {imag(18)})
+ (18.1 {imag(19)} 18.9 {imag(19)})
+ (19.1 {imag(20)} 19.9 {imag(20)})
+ (20.1 {imag(21)} 20.9 {imag(21)})
+ (21.1 {imag(22)} 21.9 {imag(22)})
+ (22.1 {imag(23)} 22.9 {imag(23)})
+ (23.1 {imag(24)} 23.9 {imag(24)})
+ (24.1 {imag(25)} 24.9 {imag(25)})
+ (25.1 {imag(26)} 25.9 {imag(26)})
+ (26.1 {imag(27)} 26.9 {imag(27)})
+ (27.1 {imag(28)} 27.9 {imag(28)})
+ (28.1 {imag(29)} 28.9 {imag(29)})
+ (29.1 {imag(30)} 29.9 {imag(30)})
+ (30.1 {imag(31)} 30.9 {imag(31)})
+ (31.1 {imag(32)} 31.9 {imag(32)})
.ends Butterworth
********************************
*
*     Chebyshev, type I
*
********************************
*
* Parameters: nT, fc, BWp, BWs, G, Asc, Ap, As, N
*   (optional: sim, Rpar)
* Supports: AP/LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3)
*
********************************
.subckt Chebyshev IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ nT=0
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 Ap=1 As=60 N=0
+ Rpar=1G
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1)  BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2))
+ allpass=(case==0) low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
+ BPBW=if(bandpass, BWp/fc, 1) BSBW=if(bandstop, BWp/fc, 1)
+ CsSel=(allpass | low | bandstop) LsSel=(high | bandpass)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2) Cs=.5/pi/if(fc==0,BWp,fc)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp>BWs))
.param epsilon_sc=sqrt(10**(Asc/10)-1) epsilon_s=sqrt(10**(As/10)-1)
.param epsilon_p=if(Ap>0,1/sqrt(10**(Ap/10)-1),cosh(acosh(ratio)*N)/epsilon_s)
.param wscale=cosh(acosh(epsilon_p*epsilon_sc)/Order)
.param ratio=max(BWs/BWp,BWp/BWs)-allpass/2
.param Order=if(N==0,ceil(acosh(epsilon_s*epsilon_p**u(Ap))/acosh(ratio)),N)
*** real and imaginary parts of the poles
.func real(x) {sin((2*x-1)*pi/2/Order)*sinh(asinh(epsilon_p)/Order)/wscale}
.func imag(x) {cos((2*x-1)*pi/2/Order)*cosh(asinh(epsilon_p)/Order)/wscale}
*** 2nd order transfer function terms
.func a2(x) {allpass}
.func a1(x) {if( allpass | x==N21, (1-3*allpass)*real(x), 0)}
.func a0(x) {real(x)**2+imag(x)**2}
.func b1(x) {2*real(x)}
.func b0(x) {real(x)**2+imag(x)**2}
*** gain
.param Gain=if(par(Order) & nT==-1 & inv(allpass), 1/sqrt(1+epsilon_p**(-2)), 1)
*** a2[n]
Ga2_1 0 1 in 0 {a2(1)}
Ga2_2 0 {2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a2(2)}
Ga2_3 0 {3*(3<=nodopt)} {2*(3<=nodopt)} 0 {a2(3)}
Ga2_4 0 {4*(4<=nodopt)} {3*(4<=nodopt)} 0 {a2(4)}
Ga2_5 0 {5*(5<=nodopt)} {4*(5<=nodopt)} 0 {a2(5)}
Ga2_6 0 {6*(6<=nodopt)} {5*(6<=nodopt)} 0 {a2(6)}
Ga2_7 0 {7*(7<=nodopt)} {6*(7<=nodopt)} 0 {a2(7)}
Ga2_8 0 {8*(8<=nodopt)} {7*(8<=nodopt)} 0 {a2(8)}
Ga2_9 0 {9*(9<=nodopt)} {8*(9<=nodopt)} 0 {a2(9)}
Ga2_10 0 {10*(10<=nodopt)} {9*(10<=nodopt)} 0 {a2(10)}
Ga2_11 0 {11*(11<=nodopt)} {10*(11<=nodopt)} 0 {a2(11)}
Ga2_12 0 {12*(12<=nodopt)} {11*(12<=nodopt)} 0 {a2(12)}
Ga2_13 0 {13*(13<=nodopt)} {12*(13<=nodopt)} 0 {a2(13)}
Ga2_14 0 {14*(14<=nodopt)} {13*(14<=nodopt)} 0 {a2(14)}
Ga2_15 0 {15*(15<=nodopt)} {14*(15<=nodopt)} 0 {a2(15)}
Ga2_16 0 {16*(16<=nodopt)} {15*(16<=nodopt)} 0 {a2(16)}
*** a1[n]
Ga1_1 0 1.2 in 0 {a1(1)}
Ga1_2 0 {2.2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a1(2)}
Ga1_3 0 {3.2*(3<=nodopt)} {2*(3<=nodopt)} 0 {a1(3)}
Ga1_4 0 {4.2*(4<=nodopt)} {3*(4<=nodopt)} 0 {a1(4)}
Ga1_5 0 {5.2*(5<=nodopt)} {4*(5<=nodopt)} 0 {a1(5)}
Ga1_6 0 {6.2*(6<=nodopt)} {5*(6<=nodopt)} 0 {a1(6)}
Ga1_7 0 {7.2*(7<=nodopt)} {6*(7<=nodopt)} 0 {a1(7)}
Ga1_8 0 {8.2*(8<=nodopt)} {7*(8<=nodopt)} 0 {a1(8)}
Ga1_9 0 {9.2*(9<=nodopt)} {8*(9<=nodopt)} 0 {a1(9)}
Ga1_10 0 {10.2*(10<=nodopt)} {9*(10<=nodopt)} 0 {a1(10)}
Ga1_11 0 {11.2*(11<=nodopt)} {10*(11<=nodopt)} 0 {a1(11)}
Ga1_12 0 {12.2*(12<=nodopt)} {11*(12<=nodopt)} 0 {a1(12)}
Ga1_13 0 {13.2*(13<=nodopt)} {12*(13<=nodopt)} 0 {a1(13)}
Ga1_14 0 {14.2*(14<=nodopt)} {13*(14<=nodopt)} 0 {a1(14)}
Ga1_15 0 {15.2*(15<=nodopt)} {14*(15<=nodopt)} 0 {a1(15)}
Ga1_16 0 {16.2*(16<=nodopt)} {15*(16<=nodopt)} 0 {a1(16)}
*** a0[n]
Ga0_1 0 1.1 in 0 {a0(1)}
Ga0_2 0 {2.1*(2<=nodopt)} {1*(2<=nodopt)} 0 {a0(2)}
Ga0_3 0 {3.1*(3<=nodopt)} {2*(3<=nodopt)} 0 {a0(3)}
Ga0_4 0 {4.1*(4<=nodopt)} {3*(4<=nodopt)} 0 {a0(4)}
Ga0_5 0 {5.1*(5<=nodopt)} {4*(5<=nodopt)} 0 {a0(5)}
Ga0_6 0 {6.1*(6<=nodopt)} {5*(6<=nodopt)} 0 {a0(6)}
Ga0_7 0 {7.1*(7<=nodopt)} {6*(7<=nodopt)} 0 {a0(7)}
Ga0_8 0 {8.1*(8<=nodopt)} {7*(8<=nodopt)} 0 {a0(8)}
Ga0_9 0 {9.1*(9<=nodopt)} {8*(9<=nodopt)} 0 {a0(9)}
Ga0_10 0 {10.1*(10<=nodopt)} {9*(10<=nodopt)} 0 {a0(10)}
Ga0_11 0 {11.1*(11<=nodopt)} {10*(11<=nodopt)} 0 {a0(11)}
Ga0_12 0 {12.1*(12<=nodopt)} {11*(12<=nodopt)} 0 {a0(12)}
Ga0_13 0 {13.1*(13<=nodopt)} {12*(13<=nodopt)} 0 {a0(13)}
Ga0_14 0 {14.1*(14<=nodopt)} {13*(14<=nodopt)} 0 {a0(14)}
Ga0_15 0 {15.1*(15<=nodopt)} {14*(15<=nodopt)} 0 {a0(15)}
Ga0_16 0 {16.1*(16<=nodopt)} {15*(16<=nodopt)} 0 {a0(16)}
*** b2[n]
Gb2_1 0 1 1.2 0 1
Gb2_2 0 {2*(2<=nodopt)} {2.2*(2<=nodopt)} 0 1
Gb2_3 0 {3*(3<=nodopt)} {3.2*(3<=nodopt)} 0 1
Gb2_4 0 {4*(4<=nodopt)} {4.2*(4<=nodopt)} 0 1
Gb2_5 0 {5*(5<=nodopt)} {5.2*(5<=nodopt)} 0 1
Gb2_6 0 {6*(6<=nodopt)} {6.2*(6<=nodopt)} 0 1
Gb2_7 0 {7*(7<=nodopt)} {7.2*(7<=nodopt)} 0 1
Gb2_8 0 {8*(8<=nodopt)} {8.2*(8<=nodopt)} 0 1
Gb2_9 0 {9*(9<=nodopt)} {9.2*(9<=nodopt)} 0 1
Gb2_10 0 {10*(10<=nodopt)} {10.2*(10<=nodopt)} 0 1
Gb2_11 0 {11*(11<=nodopt)} {11.2*(11<=nodopt)} 0 1
Gb2_12 0 {12*(12<=nodopt)} {12.2*(12<=nodopt)} 0 1
Gb2_13 0 {13*(13<=nodopt)} {13.2*(13<=nodopt)} 0 1
Gb2_14 0 {14*(14<=nodopt)} {14.2*(14<=nodopt)} 0 1
Gb2_15 0 {15*(15<=nodopt)} {15.2*(15<=nodopt)} 0 1
Gb2_16 0 {16*(16<=nodopt)} {16.2*(16<=nodopt)} 0 1
*** b1[n]
Gb1_1 0 1.2 1.1 1 {b1(1)}
Gb1_2 0 {2.2*(2<=nodopt)} {2.1*(2<=nodopt)} {2*(2<=nodopt)} {b1(2)}
Gb1_3 0 {3.2*(3<=nodopt)} {3.1*(3<=nodopt)} {3*(3<=nodopt)} {b1(3)}
Gb1_4 0 {4.2*(4<=nodopt)} {4.1*(4<=nodopt)} {4*(4<=nodopt)} {b1(4)}
Gb1_5 0 {5.2*(5<=nodopt)} {5.1*(5<=nodopt)} {5*(5<=nodopt)} {b1(5)}
Gb1_6 0 {6.2*(6<=nodopt)} {6.1*(6<=nodopt)} {6*(6<=nodopt)} {b1(6)}
Gb1_7 0 {7.2*(7<=nodopt)} {7.1*(7<=nodopt)} {7*(7<=nodopt)} {b1(7)}
Gb1_8 0 {8.2*(8<=nodopt)} {8.1*(8<=nodopt)} {8*(8<=nodopt)} {b1(8)}
Gb1_9 0 {9.2*(9<=nodopt)} {9.1*(9<=nodopt)} {9*(9<=nodopt)} {b1(9)}
Gb1_10 0 {10.2*(10<=nodopt)} {10.1*(10<=nodopt)} {10*(10<=nodopt)} {b1(10)}
Gb1_11 0 {11.2*(11<=nodopt)} {11.1*(11<=nodopt)} {11*(11<=nodopt)} {b1(11)}
Gb1_12 0 {12.2*(12<=nodopt)} {12.1*(12<=nodopt)} {12*(12<=nodopt)} {b1(12)}
Gb1_13 0 {13.2*(13<=nodopt)} {13.1*(13<=nodopt)} {13*(13<=nodopt)} {b1(13)}
Gb1_14 0 {14.2*(14<=nodopt)} {14.1*(14<=nodopt)} {14*(14<=nodopt)} {b1(14)}
Gb1_15 0 {15.2*(15<=nodopt)} {15.1*(15<=nodopt)} {15*(15<=nodopt)} {b1(15)}
Gb1_16 0 {16.2*(16<=nodopt)} {16.1*(16<=nodopt)} {16*(16<=nodopt)} {b1(16)}
*** b0[n]
Gb0_1 0 1.1 0 1 {b0(1)}
Gb0_2 0 {2.1*(2<=nodopt)} 0 {2*(2<=nodopt)} {b0(2)}
Gb0_3 0 {3.1*(3<=nodopt)} 0 {3*(3<=nodopt)} {b0(3)}
Gb0_4 0 {4.1*(4<=nodopt)} 0 {4*(4<=nodopt)} {b0(4)}
Gb0_5 0 {5.1*(5<=nodopt)} 0 {5*(5<=nodopt)} {b0(5)}
Gb0_6 0 {6.1*(6<=nodopt)} 0 {6*(6<=nodopt)} {b0(6)}
Gb0_7 0 {7.1*(7<=nodopt)} 0 {7*(7<=nodopt)} {b0(7)}
Gb0_8 0 {8.1*(8<=nodopt)} 0 {8*(8<=nodopt)} {b0(8)}
Gb0_9 0 {9.1*(9<=nodopt)} 0 {9*(9<=nodopt)} {b0(9)}
Gb0_10 0 {10.1*(10<=nodopt)} 0 {10*(10<=nodopt)} {b0(10)}
Gb0_11 0 {11.1*(11<=nodopt)} 0 {11*(11<=nodopt)} {b0(11)}
Gb0_12 0 {12.1*(12<=nodopt)} 0 {12*(12<=nodopt)} {b0(12)}
Gb0_13 0 {13.1*(13<=nodopt)} 0 {13*(13<=nodopt)} {b0(13)}
Gb0_14 0 {14.1*(14<=nodopt)} 0 {14*(14<=nodopt)} {b0(14)}
Gb0_15 0 {15.1*(15<=nodopt)} 0 {15*(15<=nodopt)} {b0(15)}
Gb0_16 0 {16.1*(16<=nodopt)} 0 {16*(16<=nodopt)} {b0(16)}
*** states for LP/BS
* x1[n]
Cs1_1 {1.1*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(1)*BSBW} Lser={bandstop*Cs/(BSBW*b1(1))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_2 {2.1*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(2)*BSBW} Lser={bandstop*Cs/(BSBW*b1(2))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_3 {3.1*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(3)*BSBW} Lser={bandstop*Cs/(BSBW*b1(3))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_4 {4.1*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(4)*BSBW} Lser={bandstop*Cs/(BSBW*b1(4))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_5 {5.1*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(5)*BSBW} Lser={bandstop*Cs/(BSBW*b1(5))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_6 {6.1*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(6)*BSBW} Lser={bandstop*Cs/(BSBW*b1(6))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_7 {7.1*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(7)*BSBW} Lser={bandstop*Cs/(BSBW*b1(7))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_8 {8.1*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(8)*BSBW} Lser={bandstop*Cs/(BSBW*b1(8))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_9 {9.1*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(9)*BSBW} Lser={bandstop*Cs/(BSBW*b1(9))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_10 {10.1*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(10)*BSBW} Lser={bandstop*Cs/(BSBW*b1(10))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_11 {11.1*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(11)*BSBW} Lser={bandstop*Cs/(BSBW*b1(11))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_12 {12.1*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(12)*BSBW} Lser={bandstop*Cs/(BSBW*b1(12))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_13 {13.1*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(13)*BSBW} Lser={bandstop*Cs/(BSBW*b1(13))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_14 {14.1*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(14)*BSBW} Lser={bandstop*Cs/(BSBW*b1(14))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_15 {15.1*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(15)*BSBW} Lser={bandstop*Cs/(BSBW*b1(15))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_16 {16.1*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(16)*BSBW} Lser={bandstop*Cs/(BSBW*b1(16))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
* x2[n]
Cs2_1 {1.2*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_2 {2.2*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_3 {3.2*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_4 {4.2*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_5 {5.2*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_6 {6.2*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_7 {7.2*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_8 {8.2*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_9 {9.2*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_10 {10.2*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_11 {11.2*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_12 {12.2*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_13 {13.2*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_14 {14.2*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_15 {15.2*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_16 {16.2*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
*** states for HP/BP
* x1[n]
Ls1_1 {1.1*((1<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(1)*BPBW} Cpar={bandpass*Cs/BPBW*b1(1)} Rpar={Rpar} Rser=0
Ls1_2 {2.1*((2<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(2)*BPBW} Cpar={bandpass*Cs/BPBW*b1(2)} Rpar={Rpar} Rser=0
Ls1_3 {3.1*((3<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(3)*BPBW} Cpar={bandpass*Cs/BPBW*b1(3)} Rpar={Rpar} Rser=0
Ls1_4 {4.1*((4<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(4)*BPBW} Cpar={bandpass*Cs/BPBW*b1(4)} Rpar={Rpar} Rser=0
Ls1_5 {5.1*((5<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(5)*BPBW} Cpar={bandpass*Cs/BPBW*b1(5)} Rpar={Rpar} Rser=0
Ls1_6 {6.1*((6<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(6)*BPBW} Cpar={bandpass*Cs/BPBW*b1(6)} Rpar={Rpar} Rser=0
Ls1_7 {7.1*((7<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(7)*BPBW} Cpar={bandpass*Cs/BPBW*b1(7)} Rpar={Rpar} Rser=0
Ls1_8 {8.1*((8<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(8)*BPBW} Cpar={bandpass*Cs/BPBW*b1(8)} Rpar={Rpar} Rser=0
Ls1_9 {9.1*((9<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(9)*BPBW} Cpar={bandpass*Cs/BPBW*b1(9)} Rpar={Rpar} Rser=0
Ls1_10 {10.1*((10<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(10)*BPBW} Cpar={bandpass*Cs/BPBW*b1(10)} Rpar={Rpar} Rser=0
Ls1_11 {11.1*((11<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(11)*BPBW} Cpar={bandpass*Cs/BPBW*b1(11)} Rpar={Rpar} Rser=0
Ls1_12 {12.1*((12<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(12)*BPBW} Cpar={bandpass*Cs/BPBW*b1(12)} Rpar={Rpar} Rser=0
Ls1_13 {13.1*((13<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(13)*BPBW} Cpar={bandpass*Cs/BPBW*b1(13)} Rpar={Rpar} Rser=0
Ls1_14 {14.1*((14<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(14)*BPBW} Cpar={bandpass*Cs/BPBW*b1(14)} Rpar={Rpar} Rser=0
Ls1_15 {15.1*((15<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(15)*BPBW} Cpar={bandpass*Cs/BPBW*b1(15)} Rpar={Rpar} Rser=0
Ls1_16 {16.1*((16<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(16)*BPBW} Cpar={bandpass*Cs/BPBW*b1(16)} Rpar={Rpar} Rser=0
* x2[n]
Ls2_1 {1.2*((1<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_2 {2.2*((2<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_3 {3.2*((3<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_4 {4.2*((4<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_5 {5.2*((5<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_6 {6.2*((6<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_7 {7.2*((7<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_8 {8.2*((8<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_9 {9.2*((9<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_10 {10.2*((10<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_11 {11.2*((11<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_12 {12.2*((12<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_13 {13.2*((13<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_14 {14.2*((14<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_15 {15.2*((15<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_16 {16.2*((16<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
*** 2nd order stage end resistors for G-sources
R1 1 0 1
R2 {2*(2<=nodopt)} 0 1
R3 {3*(3<=nodopt)} 0 1
R4 {4*(4<=nodopt)} 0 1
R5 {5*(5<=nodopt)} 0 1
R6 {6*(6<=nodopt)} 0 1
R7 {7*(7<=nodopt)} 0 1
R8 {8*(8<=nodopt)} 0 1
R9 {9*(9<=nodopt)} 0 1
R10 {10*(10<=nodopt)} 0 1
R11 {11*(11<=nodopt)} 0 1
R12 {12*(12<=nodopt)} 0 1
R13 {13*(13<=nodopt)} 0 1
R14 {14*(14<=nodopt)} 0 1
R15 {15*(15<=nodopt)} 0 1
R16 {16*(16<=nodopt)} 0 1
*** buffered output
Gout GROUND out {nodopt} 0 {G*Gain}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Vreal 0.2 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {real(1)} 0.9 {real(1)})
+ (1.1 {real(2)} 1.9 {real(2)})
+ (2.1 {real(3)} 2.9 {real(3)})
+ (3.1 {real(4)} 3.9 {real(4)})
+ (4.1 {real(5)} 4.9 {real(5)})
+ (5.1 {real(6)} 5.9 {real(6)})
+ (6.1 {real(7)} 6.9 {real(7)})
+ (7.1 {real(8)} 7.9 {real(8)})
+ (8.1 {real(9)} 8.9 {real(9)})
+ (9.1 {real(10)} 9.9 {real(10)})
+ (10.1 {real(11)} 10.9 {real(11)})
+ (11.1 {real(12)} 11.9 {real(12)})
+ (12.1 {real(13)} 12.9 {real(13)})
+ (13.1 {real(14)} 13.9 {real(14)})
+ (14.1 {real(15)} 14.9 {real(15)})
+ (15.1 {real(16)} 15.9 {real(16)})
+ (16.1 {real(17)} 16.9 {real(17)})
+ (17.1 {real(18)} 17.9 {real(18)})
+ (18.1 {real(19)} 18.9 {real(19)})
+ (19.1 {real(20)} 19.9 {real(20)})
+ (20.1 {real(21)} 20.9 {real(21)})
+ (21.1 {real(22)} 21.9 {real(22)})
+ (22.1 {real(23)} 22.9 {real(23)})
+ (23.1 {real(24)} 23.9 {real(24)})
+ (24.1 {real(25)} 24.9 {real(25)})
+ (25.1 {real(26)} 25.9 {real(26)})
+ (26.1 {real(27)} 26.9 {real(27)})
+ (27.1 {real(28)} 27.9 {real(28)})
+ (28.1 {real(29)} 28.9 {real(29)})
+ (29.1 {real(30)} 29.9 {real(30)})
+ (30.1 {real(31)} 30.9 {real(31)})
+ (31.1 {real(32)} 31.9 {real(32)})
Vimag 0.3 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {imag(1)} 0.9 {imag(1)})
+ (1.1 {imag(2)} 1.9 {imag(2)})
+ (2.1 {imag(3)} 2.9 {imag(3)})
+ (3.1 {imag(4)} 3.9 {imag(4)})
+ (4.1 {imag(5)} 4.9 {imag(5)})
+ (5.1 {imag(6)} 5.9 {imag(6)})
+ (6.1 {imag(7)} 6.9 {imag(7)})
+ (7.1 {imag(8)} 7.9 {imag(8)})
+ (8.1 {imag(9)} 8.9 {imag(9)})
+ (9.1 {imag(10)} 9.9 {imag(10)})
+ (10.1 {imag(11)} 10.9 {imag(11)})
+ (11.1 {imag(12)} 11.9 {imag(12)})
+ (12.1 {imag(13)} 12.9 {imag(13)})
+ (13.1 {imag(14)} 13.9 {imag(14)})
+ (14.1 {imag(15)} 14.9 {imag(15)})
+ (15.1 {imag(16)} 15.9 {imag(16)})
+ (16.1 {imag(17)} 16.9 {imag(17)})
+ (17.1 {imag(18)} 17.9 {imag(18)})
+ (18.1 {imag(19)} 18.9 {imag(19)})
+ (19.1 {imag(20)} 19.9 {imag(20)})
+ (20.1 {imag(21)} 20.9 {imag(21)})
+ (21.1 {imag(22)} 21.9 {imag(22)})
+ (22.1 {imag(23)} 22.9 {imag(23)})
+ (23.1 {imag(24)} 23.9 {imag(24)})
+ (24.1 {imag(25)} 24.9 {imag(25)})
+ (25.1 {imag(26)} 25.9 {imag(26)})
+ (26.1 {imag(27)} 26.9 {imag(27)})
+ (27.1 {imag(28)} 27.9 {imag(28)})
+ (28.1 {imag(29)} 28.9 {imag(29)})
+ (29.1 {imag(30)} 29.9 {imag(30)})
+ (30.1 {imag(31)} 30.9 {imag(31)})
+ (31.1 {imag(32)} 31.9 {imag(32)})
.ends Chebyshev
********************************
*
*     Chebyshev, type II
*
********************************
*
* Parameters: fc, BWp, BWs, G, Asc, As, N
*   (optional: sim, Rpar)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
* [NOTES]
*
* - If Asc>=As when N=0, {As} will be considered.
*
********************************
.subckt InvChebyshev IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ test=0 sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 As=40 N=0
+ Rpar=1G
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1) BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2))
+ low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
+ BPBW=if(bandpass, BWp/fc, 1) BSBW=if(bandstop, BWp/fc, 1) CsSel=(low | bandstop) LsSel=(high | bandpass)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2) Cs=.5/pi/if(fc==0,BWp,fc)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, 1+(BWp>BWs), 3+(BWp>BWs) )
+ epsilon_sc=if(Asc>0,sqrt(10**(Asc/10)-1),sqrt(10**(As/10)-1)/cosh(N*acosh(ratio)))
+ epsilon_s=if(As>0,sqrt(10**(As/10)-1),cosh(N*acosh(ratio))*epsilon_sc)
+ wscale=cosh(acosh(epsilon_s/epsilon_sc)/Order) ratio=max(BWs/BWp,BWp/BWs)
+ Order=if(N==0,ceil(acosh(epsilon_s/epsilon_sc**(Asc<As))/acosh(ratio)),N)
*** real and imaginary parts of the poles/zeroes
.func denom(x) {(cos((2*x-1)*pi/Order)+cosh(2*asinh(epsilon_s)/Order))/wscale/2}
.func real(x) {sin((2*x-1)*pi/2/Order)*sinh(asinh(epsilon_s)/Order)/denom(x)}
.func imag(x) {cos((2*x-1)*pi/2/Order)*cosh(asinh(epsilon_s)/Order)/denom(x)}
.func zero(x) {if(x>N2,0,wscale/cos((2*x-1)*pi/2/Order))}
*** 2nd order transfer function terms
.func a2(x) {inv(x==N21)}
.func a1(x) {if(x==N21, real(x), 0 )}
.func a0(x) {if(x==N21, real(x)**2+imag(x)**2, zero(x)**2)}
.func b1(x) {2*real(x)}
.func b0(x) {real(x)**2+imag(x)**2}
*** gain
.param Gain=(sqrt(1+epsilon_s**2)**(-par(Order))*(Order*wscale/
+ real(nodOpt)**par(Order+1)/epsilon_s)**par(Order+1))
*** a2[n]
Ga2_1 0 1 in 0 {a2(1)}
Ga2_2 0 {2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a2(2)}
Ga2_3 0 {3*(3<=nodopt)} {2*(3<=nodopt)} 0 {a2(3)}
Ga2_4 0 {4*(4<=nodopt)} {3*(4<=nodopt)} 0 {a2(4)}
Ga2_5 0 {5*(5<=nodopt)} {4*(5<=nodopt)} 0 {a2(5)}
Ga2_6 0 {6*(6<=nodopt)} {5*(6<=nodopt)} 0 {a2(6)}
Ga2_7 0 {7*(7<=nodopt)} {6*(7<=nodopt)} 0 {a2(7)}
Ga2_8 0 {8*(8<=nodopt)} {7*(8<=nodopt)} 0 {a2(8)}
Ga2_9 0 {9*(9<=nodopt)} {8*(9<=nodopt)} 0 {a2(9)}
Ga2_10 0 {10*(10<=nodopt)} {9*(10<=nodopt)} 0 {a2(10)}
Ga2_11 0 {11*(11<=nodopt)} {10*(11<=nodopt)} 0 {a2(11)}
Ga2_12 0 {12*(12<=nodopt)} {11*(12<=nodopt)} 0 {a2(12)}
Ga2_13 0 {13*(13<=nodopt)} {12*(13<=nodopt)} 0 {a2(13)}
Ga2_14 0 {14*(14<=nodopt)} {13*(14<=nodopt)} 0 {a2(14)}
Ga2_15 0 {15*(15<=nodopt)} {14*(15<=nodopt)} 0 {a2(15)}
Ga2_16 0 {16*(16<=nodopt)} {15*(16<=nodopt)} 0 {a2(16)}
*** a1[n]
Ga1_1 0 1.2 in 0 {a1(1)}
Ga1_2 0 {2.2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a1(2)}
Ga1_3 0 {3.2*(3<=nodopt)} {2*(3<=nodopt)} 0 {a1(3)}
Ga1_4 0 {4.2*(4<=nodopt)} {3*(4<=nodopt)} 0 {a1(4)}
Ga1_5 0 {5.2*(5<=nodopt)} {4*(5<=nodopt)} 0 {a1(5)}
Ga1_6 0 {6.2*(6<=nodopt)} {5*(6<=nodopt)} 0 {a1(6)}
Ga1_7 0 {7.2*(7<=nodopt)} {6*(7<=nodopt)} 0 {a1(7)}
Ga1_8 0 {8.2*(8<=nodopt)} {7*(8<=nodopt)} 0 {a1(8)}
Ga1_9 0 {9.2*(9<=nodopt)} {8*(9<=nodopt)} 0 {a1(9)}
Ga1_10 0 {10.2*(10<=nodopt)} {9*(10<=nodopt)} 0 {a1(10)}
Ga1_11 0 {11.2*(11<=nodopt)} {10*(11<=nodopt)} 0 {a1(11)}
Ga1_12 0 {12.2*(12<=nodopt)} {11*(12<=nodopt)} 0 {a1(12)}
Ga1_13 0 {13.2*(13<=nodopt)} {12*(13<=nodopt)} 0 {a1(13)}
Ga1_14 0 {14.2*(14<=nodopt)} {13*(14<=nodopt)} 0 {a1(14)}
Ga1_15 0 {15.2*(15<=nodopt)} {14*(15<=nodopt)} 0 {a1(15)}
Ga1_16 0 {16.2*(16<=nodopt)} {15*(16<=nodopt)} 0 {a1(16)}
*** a0[n]
Ga0_1 0 1.1 in 0 {a0(1)}
Ga0_2 0 {2.1*(2<=nodopt)} {1*(2<=nodopt)} 0 {a0(2)}
Ga0_3 0 {3.1*(3<=nodopt)} {2*(3<=nodopt)} 0 {a0(3)}
Ga0_4 0 {4.1*(4<=nodopt)} {3*(4<=nodopt)} 0 {a0(4)}
Ga0_5 0 {5.1*(5<=nodopt)} {4*(5<=nodopt)} 0 {a0(5)}
Ga0_6 0 {6.1*(6<=nodopt)} {5*(6<=nodopt)} 0 {a0(6)}
Ga0_7 0 {7.1*(7<=nodopt)} {6*(7<=nodopt)} 0 {a0(7)}
Ga0_8 0 {8.1*(8<=nodopt)} {7*(8<=nodopt)} 0 {a0(8)}
Ga0_9 0 {9.1*(9<=nodopt)} {8*(9<=nodopt)} 0 {a0(9)}
Ga0_10 0 {10.1*(10<=nodopt)} {9*(10<=nodopt)} 0 {a0(10)}
Ga0_11 0 {11.1*(11<=nodopt)} {10*(11<=nodopt)} 0 {a0(11)}
Ga0_12 0 {12.1*(12<=nodopt)} {11*(12<=nodopt)} 0 {a0(12)}
Ga0_13 0 {13.1*(13<=nodopt)} {12*(13<=nodopt)} 0 {a0(13)}
Ga0_14 0 {14.1*(14<=nodopt)} {13*(14<=nodopt)} 0 {a0(14)}
Ga0_15 0 {15.1*(15<=nodopt)} {14*(15<=nodopt)} 0 {a0(15)}
Ga0_16 0 {16.1*(16<=nodopt)} {15*(16<=nodopt)} 0 {a0(16)}
*** b2[n]
Gb2_1 0 1 1.2 0 1
Gb2_2 0 {2*(2<=nodopt)} {2.2*(2<=nodopt)} 0 1
Gb2_3 0 {3*(3<=nodopt)} {3.2*(3<=nodopt)} 0 1
Gb2_4 0 {4*(4<=nodopt)} {4.2*(4<=nodopt)} 0 1
Gb2_5 0 {5*(5<=nodopt)} {5.2*(5<=nodopt)} 0 1
Gb2_6 0 {6*(6<=nodopt)} {6.2*(6<=nodopt)} 0 1
Gb2_7 0 {7*(7<=nodopt)} {7.2*(7<=nodopt)} 0 1
Gb2_8 0 {8*(8<=nodopt)} {8.2*(8<=nodopt)} 0 1
Gb2_9 0 {9*(9<=nodopt)} {9.2*(9<=nodopt)} 0 1
Gb2_10 0 {10*(10<=nodopt)} {10.2*(10<=nodopt)} 0 1
Gb2_11 0 {11*(11<=nodopt)} {11.2*(11<=nodopt)} 0 1
Gb2_12 0 {12*(12<=nodopt)} {12.2*(12<=nodopt)} 0 1
Gb2_13 0 {13*(13<=nodopt)} {13.2*(13<=nodopt)} 0 1
Gb2_14 0 {14*(14<=nodopt)} {14.2*(14<=nodopt)} 0 1
Gb2_15 0 {15*(15<=nodopt)} {15.2*(15<=nodopt)} 0 1
Gb2_16 0 {16*(16<=nodopt)} {16.2*(16<=nodopt)} 0 1
*** b1[n]
Gb1_1 0 1.2 1.1 1 {b1(1)}
Gb1_2 0 {2.2*(2<=nodopt)} {2.1*(2<=nodopt)} {2*(2<=nodopt)} {b1(2)}
Gb1_3 0 {3.2*(3<=nodopt)} {3.1*(3<=nodopt)} {3*(3<=nodopt)} {b1(3)}
Gb1_4 0 {4.2*(4<=nodopt)} {4.1*(4<=nodopt)} {4*(4<=nodopt)} {b1(4)}
Gb1_5 0 {5.2*(5<=nodopt)} {5.1*(5<=nodopt)} {5*(5<=nodopt)} {b1(5)}
Gb1_6 0 {6.2*(6<=nodopt)} {6.1*(6<=nodopt)} {6*(6<=nodopt)} {b1(6)}
Gb1_7 0 {7.2*(7<=nodopt)} {7.1*(7<=nodopt)} {7*(7<=nodopt)} {b1(7)}
Gb1_8 0 {8.2*(8<=nodopt)} {8.1*(8<=nodopt)} {8*(8<=nodopt)} {b1(8)}
Gb1_9 0 {9.2*(9<=nodopt)} {9.1*(9<=nodopt)} {9*(9<=nodopt)} {b1(9)}
Gb1_10 0 {10.2*(10<=nodopt)} {10.1*(10<=nodopt)} {10*(10<=nodopt)} {b1(10)}
Gb1_11 0 {11.2*(11<=nodopt)} {11.1*(11<=nodopt)} {11*(11<=nodopt)} {b1(11)}
Gb1_12 0 {12.2*(12<=nodopt)} {12.1*(12<=nodopt)} {12*(12<=nodopt)} {b1(12)}
Gb1_13 0 {13.2*(13<=nodopt)} {13.1*(13<=nodopt)} {13*(13<=nodopt)} {b1(13)}
Gb1_14 0 {14.2*(14<=nodopt)} {14.1*(14<=nodopt)} {14*(14<=nodopt)} {b1(14)}
Gb1_15 0 {15.2*(15<=nodopt)} {15.1*(15<=nodopt)} {15*(15<=nodopt)} {b1(15)}
Gb1_16 0 {16.2*(16<=nodopt)} {16.1*(16<=nodopt)} {16*(16<=nodopt)} {b1(16)}
*** b0[n]
Gb0_1 0 1.1 0 1 {b0(1)}
Gb0_2 0 {2.1*(2<=nodopt)} 0 {2*(2<=nodopt)} {b0(2)}
Gb0_3 0 {3.1*(3<=nodopt)} 0 {3*(3<=nodopt)} {b0(3)}
Gb0_4 0 {4.1*(4<=nodopt)} 0 {4*(4<=nodopt)} {b0(4)}
Gb0_5 0 {5.1*(5<=nodopt)} 0 {5*(5<=nodopt)} {b0(5)}
Gb0_6 0 {6.1*(6<=nodopt)} 0 {6*(6<=nodopt)} {b0(6)}
Gb0_7 0 {7.1*(7<=nodopt)} 0 {7*(7<=nodopt)} {b0(7)}
Gb0_8 0 {8.1*(8<=nodopt)} 0 {8*(8<=nodopt)} {b0(8)}
Gb0_9 0 {9.1*(9<=nodopt)} 0 {9*(9<=nodopt)} {b0(9)}
Gb0_10 0 {10.1*(10<=nodopt)} 0 {10*(10<=nodopt)} {b0(10)}
Gb0_11 0 {11.1*(11<=nodopt)} 0 {11*(11<=nodopt)} {b0(11)}
Gb0_12 0 {12.1*(12<=nodopt)} 0 {12*(12<=nodopt)} {b0(12)}
Gb0_13 0 {13.1*(13<=nodopt)} 0 {13*(13<=nodopt)} {b0(13)}
Gb0_14 0 {14.1*(14<=nodopt)} 0 {14*(14<=nodopt)} {b0(14)}
Gb0_15 0 {15.1*(15<=nodopt)} 0 {15*(15<=nodopt)} {b0(15)}
Gb0_16 0 {16.1*(16<=nodopt)} 0 {16*(16<=nodopt)} {b0(16)}
*** states for LP/BS
* x1[n]
Cs1_1 {1.1*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(1)*BSBW} Lser={bandstop*Cs/(BSBW*b1(1))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_2 {2.1*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(2)*BSBW} Lser={bandstop*Cs/(BSBW*b1(2))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_3 {3.1*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(3)*BSBW} Lser={bandstop*Cs/(BSBW*b1(3))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_4 {4.1*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(4)*BSBW} Lser={bandstop*Cs/(BSBW*b1(4))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_5 {5.1*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(5)*BSBW} Lser={bandstop*Cs/(BSBW*b1(5))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_6 {6.1*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(6)*BSBW} Lser={bandstop*Cs/(BSBW*b1(6))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_7 {7.1*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(7)*BSBW} Lser={bandstop*Cs/(BSBW*b1(7))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_8 {8.1*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(8)*BSBW} Lser={bandstop*Cs/(BSBW*b1(8))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_9 {9.1*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(9)*BSBW} Lser={bandstop*Cs/(BSBW*b1(9))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_10 {10.1*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(10)*BSBW} Lser={bandstop*Cs/(BSBW*b1(10))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_11 {11.1*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(11)*BSBW} Lser={bandstop*Cs/(BSBW*b1(11))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_12 {12.1*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(12)*BSBW} Lser={bandstop*Cs/(BSBW*b1(12))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_13 {13.1*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(13)*BSBW} Lser={bandstop*Cs/(BSBW*b1(13))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_14 {14.1*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(14)*BSBW} Lser={bandstop*Cs/(BSBW*b1(14))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_15 {15.1*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(15)*BSBW} Lser={bandstop*Cs/(BSBW*b1(15))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_16 {16.1*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(16)*BSBW} Lser={bandstop*Cs/(BSBW*b1(16))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
* x2[n]
Cs2_1 {1.2*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_2 {2.2*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_3 {3.2*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_4 {4.2*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_5 {5.2*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_6 {6.2*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_7 {7.2*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_8 {8.2*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_9 {9.2*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_10 {10.2*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_11 {11.2*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_12 {12.2*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_13 {13.2*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_14 {14.2*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_15 {15.2*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_16 {16.2*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
*** states for HP/BP
* x1[n]
Ls1_1 {1.1*((1<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(1)*BPBW} Cpar={bandpass*Cs/BPBW*b1(1)} Rpar={Rpar} Rser=0
Ls1_2 {2.1*((2<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(2)*BPBW} Cpar={bandpass*Cs/BPBW*b1(2)} Rpar={Rpar} Rser=0
Ls1_3 {3.1*((3<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(3)*BPBW} Cpar={bandpass*Cs/BPBW*b1(3)} Rpar={Rpar} Rser=0
Ls1_4 {4.1*((4<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(4)*BPBW} Cpar={bandpass*Cs/BPBW*b1(4)} Rpar={Rpar} Rser=0
Ls1_5 {5.1*((5<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(5)*BPBW} Cpar={bandpass*Cs/BPBW*b1(5)} Rpar={Rpar} Rser=0
Ls1_6 {6.1*((6<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(6)*BPBW} Cpar={bandpass*Cs/BPBW*b1(6)} Rpar={Rpar} Rser=0
Ls1_7 {7.1*((7<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(7)*BPBW} Cpar={bandpass*Cs/BPBW*b1(7)} Rpar={Rpar} Rser=0
Ls1_8 {8.1*((8<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(8)*BPBW} Cpar={bandpass*Cs/BPBW*b1(8)} Rpar={Rpar} Rser=0
Ls1_9 {9.1*((9<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(9)*BPBW} Cpar={bandpass*Cs/BPBW*b1(9)} Rpar={Rpar} Rser=0
Ls1_10 {10.1*((10<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(10)*BPBW} Cpar={bandpass*Cs/BPBW*b1(10)} Rpar={Rpar} Rser=0
Ls1_11 {11.1*((11<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(11)*BPBW} Cpar={bandpass*Cs/BPBW*b1(11)} Rpar={Rpar} Rser=0
Ls1_12 {12.1*((12<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(12)*BPBW} Cpar={bandpass*Cs/BPBW*b1(12)} Rpar={Rpar} Rser=0
Ls1_13 {13.1*((13<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(13)*BPBW} Cpar={bandpass*Cs/BPBW*b1(13)} Rpar={Rpar} Rser=0
Ls1_14 {14.1*((14<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(14)*BPBW} Cpar={bandpass*Cs/BPBW*b1(14)} Rpar={Rpar} Rser=0
Ls1_15 {15.1*((15<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(15)*BPBW} Cpar={bandpass*Cs/BPBW*b1(15)} Rpar={Rpar} Rser=0
Ls1_16 {16.1*((16<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(16)*BPBW} Cpar={bandpass*Cs/BPBW*b1(16)} Rpar={Rpar} Rser=0
* x2[n]
Ls2_1 {1.2*((1<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_2 {2.2*((2<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_3 {3.2*((3<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_4 {4.2*((4<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_5 {5.2*((5<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_6 {6.2*((6<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_7 {7.2*((7<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_8 {8.2*((8<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_9 {9.2*((9<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_10 {10.2*((10<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_11 {11.2*((11<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_12 {12.2*((12<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_13 {13.2*((13<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_14 {14.2*((14<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_15 {15.2*((15<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_16 {16.2*((16<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
*** 2nd order stage end resistors for G-sources
R1 1 0 1
R2 {2*(2<=nodopt)} 0 1
R3 {3*(3<=nodopt)} 0 1
R4 {4*(4<=nodopt)} 0 1
R5 {5*(5<=nodopt)} 0 1
R6 {6*(6<=nodopt)} 0 1
R7 {7*(7<=nodopt)} 0 1
R8 {8*(8<=nodopt)} 0 1
R9 {9*(9<=nodopt)} 0 1
R10 {10*(10<=nodopt)} 0 1
R11 {11*(11<=nodopt)} 0 1
R12 {12*(12<=nodopt)} 0 1
R13 {13*(13<=nodopt)} 0 1
R14 {14*(14<=nodopt)} 0 1
R15 {15*(15<=nodopt)} 0 1
R16 {16*(16<=nodopt)} 0 1
*** buffered output
Gout GROUND out {nodopt} 0 {G*Gain}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Vreal 0.2 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {real(1)} 0.9 {real(1)})
+ (1.1 {real(2)} 1.9 {real(2)})
+ (2.1 {real(3)} 2.9 {real(3)})
+ (3.1 {real(4)} 3.9 {real(4)})
+ (4.1 {real(5)} 4.9 {real(5)})
+ (5.1 {real(6)} 5.9 {real(6)})
+ (6.1 {real(7)} 6.9 {real(7)})
+ (7.1 {real(8)} 7.9 {real(8)})
+ (8.1 {real(9)} 8.9 {real(9)})
+ (9.1 {real(10)} 9.9 {real(10)})
+ (10.1 {real(11)} 10.9 {real(11)})
+ (11.1 {real(12)} 11.9 {real(12)})
+ (12.1 {real(13)} 12.9 {real(13)})
+ (13.1 {real(14)} 13.9 {real(14)})
+ (14.1 {real(15)} 14.9 {real(15)})
+ (15.1 {real(16)} 15.9 {real(16)})
+ (16.1 {real(17)} 16.9 {real(17)})
+ (17.1 {real(18)} 17.9 {real(18)})
+ (18.1 {real(19)} 18.9 {real(19)})
+ (19.1 {real(20)} 19.9 {real(20)})
+ (20.1 {real(21)} 20.9 {real(21)})
+ (21.1 {real(22)} 21.9 {real(22)})
+ (22.1 {real(23)} 22.9 {real(23)})
+ (23.1 {real(24)} 23.9 {real(24)})
+ (24.1 {real(25)} 24.9 {real(25)})
+ (25.1 {real(26)} 25.9 {real(26)})
+ (26.1 {real(27)} 26.9 {real(27)})
+ (27.1 {real(28)} 27.9 {real(28)})
+ (28.1 {real(29)} 28.9 {real(29)})
+ (29.1 {real(30)} 29.9 {real(30)})
+ (30.1 {real(31)} 30.9 {real(31)})
+ (31.1 {real(32)} 31.9 {real(32)})
Vimag 0.3 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {imag(1)} 0.9 {imag(1)})
+ (1.1 {imag(2)} 1.9 {imag(2)})
+ (2.1 {imag(3)} 2.9 {imag(3)})
+ (3.1 {imag(4)} 3.9 {imag(4)})
+ (4.1 {imag(5)} 4.9 {imag(5)})
+ (5.1 {imag(6)} 5.9 {imag(6)})
+ (6.1 {imag(7)} 6.9 {imag(7)})
+ (7.1 {imag(8)} 7.9 {imag(8)})
+ (8.1 {imag(9)} 8.9 {imag(9)})
+ (9.1 {imag(10)} 9.9 {imag(10)})
+ (10.1 {imag(11)} 10.9 {imag(11)})
+ (11.1 {imag(12)} 11.9 {imag(12)})
+ (12.1 {imag(13)} 12.9 {imag(13)})
+ (13.1 {imag(14)} 13.9 {imag(14)})
+ (14.1 {imag(15)} 14.9 {imag(15)})
+ (15.1 {imag(16)} 15.9 {imag(16)})
+ (16.1 {imag(17)} 16.9 {imag(17)})
+ (17.1 {imag(18)} 17.9 {imag(18)})
+ (18.1 {imag(19)} 18.9 {imag(19)})
+ (19.1 {imag(20)} 19.9 {imag(20)})
+ (20.1 {imag(21)} 20.9 {imag(21)})
+ (21.1 {imag(22)} 21.9 {imag(22)})
+ (22.1 {imag(23)} 22.9 {imag(23)})
+ (23.1 {imag(24)} 23.9 {imag(24)})
+ (24.1 {imag(25)} 24.9 {imag(25)})
+ (25.1 {imag(26)} 25.9 {imag(26)})
+ (26.1 {imag(27)} 26.9 {imag(27)})
+ (27.1 {imag(28)} 27.9 {imag(28)})
+ (28.1 {imag(29)} 28.9 {imag(29)})
+ (29.1 {imag(30)} 29.9 {imag(30)})
+ (30.1 {imag(31)} 30.9 {imag(31)})
+ (31.1 {imag(32)} 31.9 {imag(32)})
Vzero 0.4 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {zero(1)} 0.9 {zero(1)})
+ (1.1 {zero(2)} 1.9 {zero(2)})
+ (2.1 {zero(3)} 2.9 {zero(3)})
+ (3.1 {zero(4)} 3.9 {zero(4)})
+ (4.1 {zero(5)} 4.9 {zero(5)})
+ (5.1 {zero(6)} 5.9 {zero(6)})
+ (6.1 {zero(7)} 6.9 {zero(7)})
+ (7.1 {zero(8)} 7.9 {zero(8)})
+ (8.1 {zero(9)} 8.9 {zero(9)})
+ (9.1 {zero(10)} 9.9 {zero(10)})
+ (10.1 {zero(11)} 10.9 {zero(11)})
+ (11.1 {zero(12)} 11.9 {zero(12)})
+ (12.1 {zero(13)} 12.9 {zero(13)})
+ (13.1 {zero(14)} 13.9 {zero(14)})
+ (14.1 {zero(15)} 14.9 {zero(15)})
+ (15.1 {zero(16)} 15.9 {zero(16)})
+ (16.1 {zero(17)} 16.9 {zero(17)})
+ (17.1 {zero(18)} 17.9 {zero(18)})
+ (18.1 {zero(19)} 18.9 {zero(19)})
+ (19.1 {zero(20)} 19.9 {zero(20)})
+ (20.1 {zero(21)} 20.9 {zero(21)})
+ (21.1 {zero(22)} 21.9 {zero(22)})
+ (22.1 {zero(23)} 22.9 {zero(23)})
+ (23.1 {zero(24)} 23.9 {zero(24)})
+ (24.1 {zero(25)} 24.9 {zero(25)})
+ (25.1 {zero(26)} 25.9 {zero(26)})
+ (26.1 {zero(27)} 26.9 {zero(27)})
+ (27.1 {zero(28)} 27.9 {zero(28)})
+ (28.1 {zero(29)} 28.9 {zero(29)})
+ (29.1 {zero(30)} 29.9 {zero(30)})
+ (30.1 {zero(31)} 30.9 {zero(31)})
+ (31.1 {zero(32)} 31.9 {zero(32)})
.ends InvChebyshev
********************************
*
*     Cauer (Elliptic)
*
********************************
*
* Parameters: nT, fc, BWp, BWs, G, Ap, As, N
*   (optional: sim, Rpar)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
* [NOTES]
*
* - Accuracy is usually 3,4 decimals or better if N=0, but can drop to ~2~3 or
* less if using extreme values for attenuations. E.g.: N=0 (32nd order), fc=1,
* BWp=0.1, Ap=0.001, As=260 => droop of maximum 0.2mdB towards the end of the
* pass-band.
* - While the above is possible, imposing {N} for the same conditions will show
* a real slope but with a many hundreds of dB attenuation and there may be other
* cases like this; it's because the elliptic nome q1 will get too small values
* for the matrix solver. Choosing the alternate solver may help a bit, but not
* much. In short, try to keep As<120 when N>0, overly exaggerated values will
* not be without consequences.
* - As a rule of thumb, N=0 will give more accurate results than N>0.
*
********************************
.subckt Cauer IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ nT=0
+ sim=1
+ fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 Ap=1 As=80 N=0
+ Rpar=1G
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1) BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2))
+ low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
+ BPBW=if(bandpass, BWp/fc, 1) BSBW=if(bandstop, BWp/fc, 1)
+ CsSel=(low | bandstop) LsSel=(high | bandpass)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2) Cs=.5/pi/if(fc==0,BWp,fc)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, 1+(BWp>BWs), 3+(BWp>BWs) )
+ epsilon_p=if( Ap>0, (10**(Ap/10)-1), (10**(As/10)-1)*16*exp(log(nomeqq)*N) )
+ epsilon_s=if( As>0, (10**(As/10)-1), (10**(Ap/10)-1)/16/exp(log(nomeqq)*N) )
+ epsilon_sc=10**(Asc/10)-u(Asc)
*** elliptic modulus k and nome q
.param modulusk1=epsilon_p/epsilon_s moduluskk=min(BWs/BWp, BWp/BWs)
+ modulusk2=4*nomeq2**.5*(1+4*nomeq2**2)**.5/(1+2*nomeq2)**2
+ h0=(1-(1-moduluskk**2)**.25)/(1+(1-moduluskk**2)**.25)/2
+ nomeq2=nomeq1**(1/N**u(N)) nomeqq=h0*(1+2*h0**4)
+ nomeq1=exp(-pi*ellipticK(1-modulusk1)/ellipticK1)
+ nomeq=if(N==0,nomeqq,nomeq2) modulusk=if(N==0,moduluskk,modulusk2)
+ Order=if(N==0, ceil(-log(16*epsilon_s/epsilon_p)/log(nomeq)), N)
*** frequency scaling
.param ellipticK2=ellipticK(modulusk**2) ellipticK2_=ellipticK(1-modulusk**2)
+ ellipticK1=ellipticK(modulusk1) ellipticK1_=ellipticK(1-modulusk1)
+ acoshEps=acosh(sqrt(epsilon_sc/epsilon_p))
+ wscale=if(Asc<=Ap,1,(((modulusk**2-1)*(2*sin((3*((3*(-sin(4*acoshEps)+
+ 8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(2*pi*ellipticK2)/ellipticK2_)-2*sin((5*((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(6*pi*ellipticK2)/ellipticK2_)+2*sin((7*((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(12*pi*ellipticK2)/ellipticK2_)-2*sin((((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_)))**2*exp(-(0.5*pi*ellipticK2)/ellipticK2_))/(sqrt(1-modulusk**2)*
+ (2*cos((((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/
+ 256+((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(pi*ellipticK2)/ellipticK2_)-
+ 2*cos((2*((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/
+ 256+((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(4*pi*ellipticK2)/ellipticK2_)+2*cos((3*
+ ((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+
+ ((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(9*pi*ellipticK2)/ellipticK2_)-1)**2)+1))
*** steps for approximation of poles/zeroes
.param Lambda=.5/Order*log((sqrt(epsilon_p+1)+1)/(sqrt(epsilon_p+1)-1))
.func ellipticK(x) {92.18730129420581/(1.834008086409342*sqrt(1-x)+
+ 3.668016172818685*(1-x)**0.25+5.187358218604039*sqrt(sqrt(1-x)+1)*
+ (1-x)**0.125+6.168843301631763*(sqrt(1-x)+1)**0.25*sqrt(sqrt(1-x)+2*
+ (1-x)**0.25+1)*(1-x)**0.0625+5.656854249492383*(sqrt(1-x)+1)**0.125*
+ (sqrt(1-x)+2*(1-x)**0.25+1)**0.25*sqrt(1.414213562373095*sqrt(1-x)+
+ 2.82842712474619*(1-x)**0.25+4*sqrt(sqrt(1-x)+1)*(1-x)**0.125+
+ 1.414213562373095)*(1-x)**0.03125+1.834008086409342)}
.func zero_alt(x) {(nomeq**.25*(nomeq**6*sin(5*pi*((x-0.5)/Order+0.5))-
+ nomeq**2*sin(3*pi*((x-0.5)/Order+0.5))+sin(pi*((x-0.5)/Order+0.5))))/
+ (nomeq**4*cos(4*pi*((x-0.5)/Order+0.5))-nomeq*cos(2*pi*((x-0.5)/Order+0.5))+
+ 0.5)/sqrt(modulusk)}
.param real0=(nomeq**.25*(nomeq**6*sinh(5*Lambda)-nomeq**2*sinh(3*Lambda)+
+ sinh(Lambda)))/(nomeq**4*cosh(4*Lambda)-nomeq*cosh(2*Lambda)+0.5)
.func tmp_Q0(x) {zero_alt(x)/(2*real0)*sqrt((real0**2+zero_alt(x)**2*modulusk)*
+ (real0**2*modulusk+zero_alt(x)**(-2))/((1-(zero_alt(x)*modulusk)**2)*(1-zero_alt(x)**2)))}
.func tmp_bi0(x) {(real0**2/modulusk+zero_alt(x)**2)/(1+(real0*zero_alt(x))**2*modulusk)}
*** real and imaginary parts of the poles/zeroes
.func real(x) {0.5/tmp_Q0(x)*sqrt(tmp_bi0(x)*wscale)}
.func imag(x) {sqrt(1-.25/tmp_Q0(x)**2)*sqrt(tmp_bi0(x)*wscale)}
.func zero(x) {if(x>N2, 0, sqrt(wscale)/(modulusk*zero_alt(x)))}
*** 2nd order transfer function terms
.func a2(x) {inv(x==N21)}
.func a1(x) {if(x==N21, real(x), 0 )}
.func a0(x) {if(x==N21, real(x)**2+imag(x)**2, zero(x)**2)}
.func b1(x) {2*real(x)}
.func b0(x) {real(x)**2+imag(x)**2}
*** gain
.func TmpAmpl(x) {if(x>N2, 1, tmp_bi0(x)*zero_alt(x)**2)}
.param Gain=modulusk**( (Order-par(Order+1)) )*
+ TmpAmpl(1)*TmpAmpl(2)*TmpAmpl(3)*TmpAmpl(4)*TmpAmpl(5)*
+ TmpAmpl(6)*TmpAmpl(7)*TmpAmpl(8)*TmpAmpl(9)*TmpAmpl(10)*
+ TmpAmpl(11)*TmpAmpl(12)*TmpAmpl(13)*TmpAmpl(14)*TmpAmpl(15)*
+ TmpAmpl(16)*sqrt(1+epsilon_p)**(nT*par(Order))
*** a2[n]
Ga2_1 0 1 in 0 {a2(1)}
Ga2_2 0 {2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a2(2)}
Ga2_3 0 {3*(3<=nodopt)} {2*(3<=nodopt)} 0 {a2(3)}
Ga2_4 0 {4*(4<=nodopt)} {3*(4<=nodopt)} 0 {a2(4)}
Ga2_5 0 {5*(5<=nodopt)} {4*(5<=nodopt)} 0 {a2(5)}
Ga2_6 0 {6*(6<=nodopt)} {5*(6<=nodopt)} 0 {a2(6)}
Ga2_7 0 {7*(7<=nodopt)} {6*(7<=nodopt)} 0 {a2(7)}
Ga2_8 0 {8*(8<=nodopt)} {7*(8<=nodopt)} 0 {a2(8)}
Ga2_9 0 {9*(9<=nodopt)} {8*(9<=nodopt)} 0 {a2(9)}
Ga2_10 0 {10*(10<=nodopt)} {9*(10<=nodopt)} 0 {a2(10)}
Ga2_11 0 {11*(11<=nodopt)} {10*(11<=nodopt)} 0 {a2(11)}
Ga2_12 0 {12*(12<=nodopt)} {11*(12<=nodopt)} 0 {a2(12)}
Ga2_13 0 {13*(13<=nodopt)} {12*(13<=nodopt)} 0 {a2(13)}
Ga2_14 0 {14*(14<=nodopt)} {13*(14<=nodopt)} 0 {a2(14)}
Ga2_15 0 {15*(15<=nodopt)} {14*(15<=nodopt)} 0 {a2(15)}
Ga2_16 0 {16*(16<=nodopt)} {15*(16<=nodopt)} 0 {a2(16)}
*** a1[n]
Ga1_1 0 1.2 in 0 {a1(1)}
Ga1_2 0 {2.2*(2<=nodopt)} {1*(2<=nodopt)} 0 {a1(2)}
Ga1_3 0 {3.2*(3<=nodopt)} {2*(3<=nodopt)} 0 {a1(3)}
Ga1_4 0 {4.2*(4<=nodopt)} {3*(4<=nodopt)} 0 {a1(4)}
Ga1_5 0 {5.2*(5<=nodopt)} {4*(5<=nodopt)} 0 {a1(5)}
Ga1_6 0 {6.2*(6<=nodopt)} {5*(6<=nodopt)} 0 {a1(6)}
Ga1_7 0 {7.2*(7<=nodopt)} {6*(7<=nodopt)} 0 {a1(7)}
Ga1_8 0 {8.2*(8<=nodopt)} {7*(8<=nodopt)} 0 {a1(8)}
Ga1_9 0 {9.2*(9<=nodopt)} {8*(9<=nodopt)} 0 {a1(9)}
Ga1_10 0 {10.2*(10<=nodopt)} {9*(10<=nodopt)} 0 {a1(10)}
Ga1_11 0 {11.2*(11<=nodopt)} {10*(11<=nodopt)} 0 {a1(11)}
Ga1_12 0 {12.2*(12<=nodopt)} {11*(12<=nodopt)} 0 {a1(12)}
Ga1_13 0 {13.2*(13<=nodopt)} {12*(13<=nodopt)} 0 {a1(13)}
Ga1_14 0 {14.2*(14<=nodopt)} {13*(14<=nodopt)} 0 {a1(14)}
Ga1_15 0 {15.2*(15<=nodopt)} {14*(15<=nodopt)} 0 {a1(15)}
Ga1_16 0 {16.2*(16<=nodopt)} {15*(16<=nodopt)} 0 {a1(16)}
*** a0[n]
Ga0_1 0 1.1 in 0 {a0(1)}
Ga0_2 0 {2.1*(2<=nodopt)} {1*(2<=nodopt)} 0 {a0(2)}
Ga0_3 0 {3.1*(3<=nodopt)} {2*(3<=nodopt)} 0 {a0(3)}
Ga0_4 0 {4.1*(4<=nodopt)} {3*(4<=nodopt)} 0 {a0(4)}
Ga0_5 0 {5.1*(5<=nodopt)} {4*(5<=nodopt)} 0 {a0(5)}
Ga0_6 0 {6.1*(6<=nodopt)} {5*(6<=nodopt)} 0 {a0(6)}
Ga0_7 0 {7.1*(7<=nodopt)} {6*(7<=nodopt)} 0 {a0(7)}
Ga0_8 0 {8.1*(8<=nodopt)} {7*(8<=nodopt)} 0 {a0(8)}
Ga0_9 0 {9.1*(9<=nodopt)} {8*(9<=nodopt)} 0 {a0(9)}
Ga0_10 0 {10.1*(10<=nodopt)} {9*(10<=nodopt)} 0 {a0(10)}
Ga0_11 0 {11.1*(11<=nodopt)} {10*(11<=nodopt)} 0 {a0(11)}
Ga0_12 0 {12.1*(12<=nodopt)} {11*(12<=nodopt)} 0 {a0(12)}
Ga0_13 0 {13.1*(13<=nodopt)} {12*(13<=nodopt)} 0 {a0(13)}
Ga0_14 0 {14.1*(14<=nodopt)} {13*(14<=nodopt)} 0 {a0(14)}
Ga0_15 0 {15.1*(15<=nodopt)} {14*(15<=nodopt)} 0 {a0(15)}
Ga0_16 0 {16.1*(16<=nodopt)} {15*(16<=nodopt)} 0 {a0(16)}
*** b2[n]
Gb2_1 0 1 1.2 0 1
Gb2_2 0 {2*(2<=nodopt)} {2.2*(2<=nodopt)} 0 1
Gb2_3 0 {3*(3<=nodopt)} {3.2*(3<=nodopt)} 0 1
Gb2_4 0 {4*(4<=nodopt)} {4.2*(4<=nodopt)} 0 1
Gb2_5 0 {5*(5<=nodopt)} {5.2*(5<=nodopt)} 0 1
Gb2_6 0 {6*(6<=nodopt)} {6.2*(6<=nodopt)} 0 1
Gb2_7 0 {7*(7<=nodopt)} {7.2*(7<=nodopt)} 0 1
Gb2_8 0 {8*(8<=nodopt)} {8.2*(8<=nodopt)} 0 1
Gb2_9 0 {9*(9<=nodopt)} {9.2*(9<=nodopt)} 0 1
Gb2_10 0 {10*(10<=nodopt)} {10.2*(10<=nodopt)} 0 1
Gb2_11 0 {11*(11<=nodopt)} {11.2*(11<=nodopt)} 0 1
Gb2_12 0 {12*(12<=nodopt)} {12.2*(12<=nodopt)} 0 1
Gb2_13 0 {13*(13<=nodopt)} {13.2*(13<=nodopt)} 0 1
Gb2_14 0 {14*(14<=nodopt)} {14.2*(14<=nodopt)} 0 1
Gb2_15 0 {15*(15<=nodopt)} {15.2*(15<=nodopt)} 0 1
Gb2_16 0 {16*(16<=nodopt)} {16.2*(16<=nodopt)} 0 1
*** b1[n]
Gb1_1 0 1.2 1.1 1 {b1(1)}
Gb1_2 0 {2.2*(2<=nodopt)} {2.1*(2<=nodopt)} {2*(2<=nodopt)} {b1(2)}
Gb1_3 0 {3.2*(3<=nodopt)} {3.1*(3<=nodopt)} {3*(3<=nodopt)} {b1(3)}
Gb1_4 0 {4.2*(4<=nodopt)} {4.1*(4<=nodopt)} {4*(4<=nodopt)} {b1(4)}
Gb1_5 0 {5.2*(5<=nodopt)} {5.1*(5<=nodopt)} {5*(5<=nodopt)} {b1(5)}
Gb1_6 0 {6.2*(6<=nodopt)} {6.1*(6<=nodopt)} {6*(6<=nodopt)} {b1(6)}
Gb1_7 0 {7.2*(7<=nodopt)} {7.1*(7<=nodopt)} {7*(7<=nodopt)} {b1(7)}
Gb1_8 0 {8.2*(8<=nodopt)} {8.1*(8<=nodopt)} {8*(8<=nodopt)} {b1(8)}
Gb1_9 0 {9.2*(9<=nodopt)} {9.1*(9<=nodopt)} {9*(9<=nodopt)} {b1(9)}
Gb1_10 0 {10.2*(10<=nodopt)} {10.1*(10<=nodopt)} {10*(10<=nodopt)} {b1(10)}
Gb1_11 0 {11.2*(11<=nodopt)} {11.1*(11<=nodopt)} {11*(11<=nodopt)} {b1(11)}
Gb1_12 0 {12.2*(12<=nodopt)} {12.1*(12<=nodopt)} {12*(12<=nodopt)} {b1(12)}
Gb1_13 0 {13.2*(13<=nodopt)} {13.1*(13<=nodopt)} {13*(13<=nodopt)} {b1(13)}
Gb1_14 0 {14.2*(14<=nodopt)} {14.1*(14<=nodopt)} {14*(14<=nodopt)} {b1(14)}
Gb1_15 0 {15.2*(15<=nodopt)} {15.1*(15<=nodopt)} {15*(15<=nodopt)} {b1(15)}
Gb1_16 0 {16.2*(16<=nodopt)} {16.1*(16<=nodopt)} {16*(16<=nodopt)} {b1(16)}
*** b0[n]
Gb0_1 0 1.1 0 1 {b0(1)}
Gb0_2 0 {2.1*(2<=nodopt)} 0 {2*(2<=nodopt)} {b0(2)}
Gb0_3 0 {3.1*(3<=nodopt)} 0 {3*(3<=nodopt)} {b0(3)}
Gb0_4 0 {4.1*(4<=nodopt)} 0 {4*(4<=nodopt)} {b0(4)}
Gb0_5 0 {5.1*(5<=nodopt)} 0 {5*(5<=nodopt)} {b0(5)}
Gb0_6 0 {6.1*(6<=nodopt)} 0 {6*(6<=nodopt)} {b0(6)}
Gb0_7 0 {7.1*(7<=nodopt)} 0 {7*(7<=nodopt)} {b0(7)}
Gb0_8 0 {8.1*(8<=nodopt)} 0 {8*(8<=nodopt)} {b0(8)}
Gb0_9 0 {9.1*(9<=nodopt)} 0 {9*(9<=nodopt)} {b0(9)}
Gb0_10 0 {10.1*(10<=nodopt)} 0 {10*(10<=nodopt)} {b0(10)}
Gb0_11 0 {11.1*(11<=nodopt)} 0 {11*(11<=nodopt)} {b0(11)}
Gb0_12 0 {12.1*(12<=nodopt)} 0 {12*(12<=nodopt)} {b0(12)}
Gb0_13 0 {13.1*(13<=nodopt)} 0 {13*(13<=nodopt)} {b0(13)}
Gb0_14 0 {14.1*(14<=nodopt)} 0 {14*(14<=nodopt)} {b0(14)}
Gb0_15 0 {15.1*(15<=nodopt)} 0 {15*(15<=nodopt)} {b0(15)}
Gb0_16 0 {16.1*(16<=nodopt)} 0 {16*(16<=nodopt)} {b0(16)}
*** states for LP/BS
* x1[n]
Cs1_1 {1.1*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(1)*BSBW} Lser={bandstop*Cs/(BSBW*b1(1))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_2 {2.1*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(2)*BSBW} Lser={bandstop*Cs/(BSBW*b1(2))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_3 {3.1*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(3)*BSBW} Lser={bandstop*Cs/(BSBW*b1(3))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_4 {4.1*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(4)*BSBW} Lser={bandstop*Cs/(BSBW*b1(4))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_5 {5.1*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(5)*BSBW} Lser={bandstop*Cs/(BSBW*b1(5))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_6 {6.1*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(6)*BSBW} Lser={bandstop*Cs/(BSBW*b1(6))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_7 {7.1*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(7)*BSBW} Lser={bandstop*Cs/(BSBW*b1(7))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_8 {8.1*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(8)*BSBW} Lser={bandstop*Cs/(BSBW*b1(8))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_9 {9.1*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(9)*BSBW} Lser={bandstop*Cs/(BSBW*b1(9))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_10 {10.1*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(10)*BSBW} Lser={bandstop*Cs/(BSBW*b1(10))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_11 {11.1*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(11)*BSBW} Lser={bandstop*Cs/(BSBW*b1(11))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_12 {12.1*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(12)*BSBW} Lser={bandstop*Cs/(BSBW*b1(12))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_13 {13.1*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(13)*BSBW} Lser={bandstop*Cs/(BSBW*b1(13))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_14 {14.1*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(14)*BSBW} Lser={bandstop*Cs/(BSBW*b1(14))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_15 {15.1*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(15)*BSBW} Lser={bandstop*Cs/(BSBW*b1(15))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs1_16 {16.1*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*b1(16)*BSBW} Lser={bandstop*Cs/(BSBW*b1(16))} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
* x2[n]
Cs2_1 {1.2*((1<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_2 {2.2*((2<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_3 {3.2*((3<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_4 {4.2*((4<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_5 {5.2*((5<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_6 {6.2*((6<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_7 {7.2*((7<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_8 {8.2*((8<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_9 {9.2*((9<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_10 {10.2*((10<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_11 {11.2*((11<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_12 {12.2*((12<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_13 {13.2*((13<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_14 {14.2*((14<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_15 {15.2*((15<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
Cs2_16 {16.2*((16<=nodopt)&CsSel)} 0 {CsSel*Cs*BSBW} Lser={bandstop*Cs/BSBW} Rpar={Rpar} RLshunt=0 Rser=0 Cpar=0
*** states for HP/BP
* x1[n]
Ls1_1 {1.1*((1<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(1)*BPBW} Cpar={bandpass*Cs/BPBW*b1(1)} Rpar={Rpar} Rser=0
Ls1_2 {2.1*((2<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(2)*BPBW} Cpar={bandpass*Cs/BPBW*b1(2)} Rpar={Rpar} Rser=0
Ls1_3 {3.1*((3<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(3)*BPBW} Cpar={bandpass*Cs/BPBW*b1(3)} Rpar={Rpar} Rser=0
Ls1_4 {4.1*((4<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(4)*BPBW} Cpar={bandpass*Cs/BPBW*b1(4)} Rpar={Rpar} Rser=0
Ls1_5 {5.1*((5<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(5)*BPBW} Cpar={bandpass*Cs/BPBW*b1(5)} Rpar={Rpar} Rser=0
Ls1_6 {6.1*((6<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(6)*BPBW} Cpar={bandpass*Cs/BPBW*b1(6)} Rpar={Rpar} Rser=0
Ls1_7 {7.1*((7<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(7)*BPBW} Cpar={bandpass*Cs/BPBW*b1(7)} Rpar={Rpar} Rser=0
Ls1_8 {8.1*((8<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(8)*BPBW} Cpar={bandpass*Cs/BPBW*b1(8)} Rpar={Rpar} Rser=0
Ls1_9 {9.1*((9<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(9)*BPBW} Cpar={bandpass*Cs/BPBW*b1(9)} Rpar={Rpar} Rser=0
Ls1_10 {10.1*((10<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(10)*BPBW} Cpar={bandpass*Cs/BPBW*b1(10)} Rpar={Rpar} Rser=0
Ls1_11 {11.1*((11<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(11)*BPBW} Cpar={bandpass*Cs/BPBW*b1(11)} Rpar={Rpar} Rser=0
Ls1_12 {12.1*((12<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(12)*BPBW} Cpar={bandpass*Cs/BPBW*b1(12)} Rpar={Rpar} Rser=0
Ls1_13 {13.1*((13<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(13)*BPBW} Cpar={bandpass*Cs/BPBW*b1(13)} Rpar={Rpar} Rser=0
Ls1_14 {14.1*((14<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(14)*BPBW} Cpar={bandpass*Cs/BPBW*b1(14)} Rpar={Rpar} Rser=0
Ls1_15 {15.1*((15<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(15)*BPBW} Cpar={bandpass*Cs/BPBW*b1(15)} Rpar={Rpar} Rser=0
Ls1_16 {16.1*((16<=nodopt)&LsSel)} 0 {LsSel*Cs/b1(16)*BPBW} Cpar={bandpass*Cs/BPBW*b1(16)} Rpar={Rpar} Rser=0
* x2[n]
Ls2_1 {1.2*((1<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_2 {2.2*((2<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_3 {3.2*((3<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_4 {4.2*((4<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_5 {5.2*((5<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_6 {6.2*((6<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_7 {7.2*((7<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_8 {8.2*((8<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_9 {9.2*((9<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_10 {10.2*((10<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_11 {11.2*((11<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_12 {12.2*((12<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_13 {13.2*((13<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_14 {14.2*((14<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_15 {15.2*((15<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
Ls2_16 {16.2*((16<=nodopt)&LsSel)} 0 {LsSel*Cs*BPBW} Cpar={bandpass*Cs/BPBW} Rpar={Rpar} Rser=0
*** 2nd order stage end resistors for G-sources
R1 1 0 1
R2 {2*(2<=nodopt)} 0 1
R3 {3*(3<=nodopt)} 0 1
R4 {4*(4<=nodopt)} 0 1
R5 {5*(5<=nodopt)} 0 1
R6 {6*(6<=nodopt)} 0 1
R7 {7*(7<=nodopt)} 0 1
R8 {8*(8<=nodopt)} 0 1
R9 {9*(9<=nodopt)} 0 1
R10 {10*(10<=nodopt)} 0 1
R11 {11*(11<=nodopt)} 0 1
R12 {12*(12<=nodopt)} 0 1
R13 {13*(13<=nodopt)} 0 1
R14 {14*(14<=nodopt)} 0 1
R15 {15*(15<=nodopt)} 0 1
R16 {16*(16<=nodopt)} 0 1
*** buffered output
Gout GROUND out {nodopt} 0 {G*Gain}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Vreal 0.2 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {real(1)} 0.9 {real(1)})
+ (1.1 {real(2)} 1.9 {real(2)})
+ (2.1 {real(3)} 2.9 {real(3)})
+ (3.1 {real(4)} 3.9 {real(4)})
+ (4.1 {real(5)} 4.9 {real(5)})
+ (5.1 {real(6)} 5.9 {real(6)})
+ (6.1 {real(7)} 6.9 {real(7)})
+ (7.1 {real(8)} 7.9 {real(8)})
+ (8.1 {real(9)} 8.9 {real(9)})
+ (9.1 {real(10)} 9.9 {real(10)})
+ (10.1 {real(11)} 10.9 {real(11)})
+ (11.1 {real(12)} 11.9 {real(12)})
+ (12.1 {real(13)} 12.9 {real(13)})
+ (13.1 {real(14)} 13.9 {real(14)})
+ (14.1 {real(15)} 14.9 {real(15)})
+ (15.1 {real(16)} 15.9 {real(16)})
+ (16.1 {real(17)} 16.9 {real(17)})
+ (17.1 {real(18)} 17.9 {real(18)})
+ (18.1 {real(19)} 18.9 {real(19)})
+ (19.1 {real(20)} 19.9 {real(20)})
+ (20.1 {real(21)} 20.9 {real(21)})
+ (21.1 {real(22)} 21.9 {real(22)})
+ (22.1 {real(23)} 22.9 {real(23)})
+ (23.1 {real(24)} 23.9 {real(24)})
+ (24.1 {real(25)} 24.9 {real(25)})
+ (25.1 {real(26)} 25.9 {real(26)})
+ (26.1 {real(27)} 26.9 {real(27)})
+ (27.1 {real(28)} 27.9 {real(28)})
+ (28.1 {real(29)} 28.9 {real(29)})
+ (29.1 {real(30)} 29.9 {real(30)})
+ (30.1 {real(31)} 30.9 {real(31)})
+ (31.1 {real(32)} 31.9 {real(32)})
Vimag 0.3 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {imag(1)} 0.9 {imag(1)})
+ (1.1 {imag(2)} 1.9 {imag(2)})
+ (2.1 {imag(3)} 2.9 {imag(3)})
+ (3.1 {imag(4)} 3.9 {imag(4)})
+ (4.1 {imag(5)} 4.9 {imag(5)})
+ (5.1 {imag(6)} 5.9 {imag(6)})
+ (6.1 {imag(7)} 6.9 {imag(7)})
+ (7.1 {imag(8)} 7.9 {imag(8)})
+ (8.1 {imag(9)} 8.9 {imag(9)})
+ (9.1 {imag(10)} 9.9 {imag(10)})
+ (10.1 {imag(11)} 10.9 {imag(11)})
+ (11.1 {imag(12)} 11.9 {imag(12)})
+ (12.1 {imag(13)} 12.9 {imag(13)})
+ (13.1 {imag(14)} 13.9 {imag(14)})
+ (14.1 {imag(15)} 14.9 {imag(15)})
+ (15.1 {imag(16)} 15.9 {imag(16)})
+ (16.1 {imag(17)} 16.9 {imag(17)})
+ (17.1 {imag(18)} 17.9 {imag(18)})
+ (18.1 {imag(19)} 18.9 {imag(19)})
+ (19.1 {imag(20)} 19.9 {imag(20)})
+ (20.1 {imag(21)} 20.9 {imag(21)})
+ (21.1 {imag(22)} 21.9 {imag(22)})
+ (22.1 {imag(23)} 22.9 {imag(23)})
+ (23.1 {imag(24)} 23.9 {imag(24)})
+ (24.1 {imag(25)} 24.9 {imag(25)})
+ (25.1 {imag(26)} 25.9 {imag(26)})
+ (26.1 {imag(27)} 26.9 {imag(27)})
+ (27.1 {imag(28)} 27.9 {imag(28)})
+ (28.1 {imag(29)} 28.9 {imag(29)})
+ (29.1 {imag(30)} 29.9 {imag(30)})
+ (30.1 {imag(31)} 30.9 {imag(31)})
+ (31.1 {imag(32)} 31.9 {imag(32)})
Vzero 0.4 0 PWL time_scale_factor={2*sim/Order}
+ (0.1 {zero(1)} 0.9 {zero(1)})
+ (1.1 {zero(2)} 1.9 {zero(2)})
+ (2.1 {zero(3)} 2.9 {zero(3)})
+ (3.1 {zero(4)} 3.9 {zero(4)})
+ (4.1 {zero(5)} 4.9 {zero(5)})
+ (5.1 {zero(6)} 5.9 {zero(6)})
+ (6.1 {zero(7)} 6.9 {zero(7)})
+ (7.1 {zero(8)} 7.9 {zero(8)})
+ (8.1 {zero(9)} 8.9 {zero(9)})
+ (9.1 {zero(10)} 9.9 {zero(10)})
+ (10.1 {zero(11)} 10.9 {zero(11)})
+ (11.1 {zero(12)} 11.9 {zero(12)})
+ (12.1 {zero(13)} 12.9 {zero(13)})
+ (13.1 {zero(14)} 13.9 {zero(14)})
+ (14.1 {zero(15)} 14.9 {zero(15)})
+ (15.1 {zero(16)} 15.9 {zero(16)})
+ (16.1 {zero(17)} 16.9 {zero(17)})
+ (17.1 {zero(18)} 17.9 {zero(18)})
+ (18.1 {zero(19)} 18.9 {zero(19)})
+ (19.1 {zero(20)} 19.9 {zero(20)})
+ (20.1 {zero(21)} 20.9 {zero(21)})
+ (21.1 {zero(22)} 21.9 {zero(22)})
+ (22.1 {zero(23)} 22.9 {zero(23)})
+ (23.1 {zero(24)} 23.9 {zero(24)})
+ (24.1 {zero(25)} 24.9 {zero(25)})
+ (25.1 {zero(26)} 25.9 {zero(26)})
+ (26.1 {zero(27)} 26.9 {zero(27)})
+ (27.1 {zero(28)} 27.9 {zero(28)})
+ (28.1 {zero(29)} 28.9 {zero(29)})
+ (29.1 {zero(30)} 29.9 {zero(30)})
+ (30.1 {zero(31)} 30.9 {zero(31)})
+ (31.1 {zero(32)} 31.9 {zero(32)})
.ends Cauer
********************************************************************************
********************************************************************************
*
*                       ~~ INFINITE IMPULSE RESPONSE ~~
*
********************************************************************************
********************************************************************************
*
* nT=<-1,0>     = affects the DC response for Chebyshev and Cauer:
*               nT=-1 => for a 1V step input, the output starts from <1-delta>
*                 for even orders and from 1 for odd orders;
*               nT=0 => DC response is normalized to 0dB, meaning As=As+Ap and
*                 Asc=Asc-Ap for even orders.
* sim [s]       = total .TRAN simulation time, for pins 0.2 and 0.3. E.g. if the
*               command is ".TRAN 25m" then sim=25m. (optional)
* SH=<0,1>      = disables/enables (forces) a real S&H behaviour. There are two
*               scenarios:
*               1. In .TRAN, if decimation/interpolation is needed, {SH} must
*               be enabled (exception z^-M filters); for normal behaviour
*               (Fact=1), and already sampled input, {SH} may be left null.
*               2. For .AC to work, {SH} must be set to zero.
* f0  [Hz]      = sampling frequency.
* fc  [Hz]      = center frequency.
* BWp [Hz]      = pass-band bandwidth.
* BWs [Hz]      = stop-band bandwidth.
* G=<-inf..inf> = gain, linear.
* Asc [dB]      = frequency-scaling attenuation, positive value.
* Ap  [dB]      = pass-band ripple, positive value (Chebyshev and Cauer).
* As  [dB]      = stop-band attenuation, positive value.
* N=<0:32>      = order of the filter, for BP/BS it's value represents half the
*               real order, e.g. a BP set with N=13 actually has N=26.
*               N=0 means minimum order determination based on the values of
*               the four frequencies.
*
* - Hidden:
*
* tr  [s] = clock's rising time, needs SH=1; default 1m/f0 (opt.);
* td  [s] = clock delay, default 0 (opt.).
*
********************************
*
*     Butterworth, IIR
*
********************************
*
* Parameters: SH, f0, fc, BWp, BWs, G, Asc, As, N
*   (optional: sim, tr, td)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
********************************
.subckt Butterworth_IIR IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default params
+ test=0 sim=1 SH=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 As=40 N=0
+ tr=1m/absf0 td=0
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1)
+ fc=if(fp2==0,0,sqrt(fp1*fp2)) absf0=abs(f0) lphp=(case<=2) bpbs=inv(lphp)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2)
+ oddCase=par(case+1) evenCase=inv(oddCase) oddN=par(Order+1) evenN=inv(oddN)
+ allpass=(case==0) low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp>BWs))
+ fpass1=if(lphp,BWp,(sqrt(BWp**2+4*fc**2)-BWp)/2) fpass2=if(lphp,0,(sqrt(BWp**2+4*fc**2)+BWp)/2)
+ fpz=tan(pi*fpass1/absf0) wp1=2*pi*fpass1/absf0 wp2=2*pi*fpass2/absf0 wscale=(10**(Asc/10)-u(Asc))**(.5/Order)
+ Order=if(N==0,ceil(log((10**(As/10)-1)/(10**(Asc/10)-u(Asc)))/abs(2*log(tan(pi/absf0*BWp)/tan(pi/absf0*BWs)))),N)
*** real and imaginary parts of the poles/zeros
.func real(x) {sin((2*x-1)*pi/2/Order)*wscale*fpz}
.func imag(x) {cos((2*x-1)*pi/2/Order)*wscale*fpz}
*** transfer function terms
.func b2(x) {inv(x==N21)}
.func xb1(x) {if(x==N21,1,2*real(x))}
.func xb0(x) {if(x==N21,real(x),real(x)**2+imag(x)**2)}
*** precalculate these to reduce function unravelling...
.param b01=xb0(1) b11=xb1(1)
.param b02=xb0(2) b12=xb1(2)
.param b03=xb0(3) b13=xb1(3)
.param b04=xb0(4) b14=xb1(4)
.param b05=xb0(5) b15=xb1(5)
.param b06=xb0(6) b16=xb1(6)
.param b07=xb0(7) b17=xb1(7)
.param b08=xb0(8) b18=xb1(8)
.param b09=xb0(9) b19=xb1(9)
.param b010=xb0(10) b110=xb1(10)
.param b011=xb0(11) b111=xb1(11)
.param b012=xb0(12) b112=xb1(12)
.param b013=xb0(13) b113=xb1(13)
.param b014=xb0(14) b114=xb1(14)
.param b015=xb0(15) b115=xb1(15)
.param b016=xb0(16) b116=xb1(16)
*** ...and make new functions out of them. It helps significantly.
.func b0(x) {table(min(x,nodopt), 1, b01, 2, b02, 3, b03, 4, b04,
+ 5, b05, 6, b06, 7, b07, 8, b08, 9, b09, 10, b010, 11, b011,
+ 12, b012, 13, b013, 14, b014, 15, b015, 16, b016)}
.func b1(x) {table(min(x,nodopt), 1, b11, 2, b12, 3, b13, 4, b14, 5, b15,
+ 6, b16, 7, b17, 8, b18, 9, b19, 10, b110, 11, b111, 12, b112, 13, b113,
+ 14, b114, 15, b115, 16, b116)}
*** bilinear transform for LP
.func blp0(x) {b2(x)+b1(x)+b0(x)}
.func blp1(x) {2*(b0(x)-b2(x))}
.func blp2(x) {b2(x)-b1(x)+b0(x)}
.func alp0(x) {b0(x)}
.func alp1(x) {2*b0(x)}
.func alp2(x) {b0(x)}
*** spectral transformations
.parma alpha=if(lphp, -cos(wp1), cos((wp2+wp1)/2)/cos((wp2-wp1)/2) )
+ beta=tan(wp1/2)*if(bandpass, 1/tan((wp2-wp1)/2), tan((wp2-wp1)/2) )
* highpass
.func bhp0(x) {blp2(x)*alpha**2 - blp1(x)*alpha + blp0(x)}
.func bhp1(x) {-(alpha**2 + 1)*blp1(x) + 2*(blp2(x) + blp0(x))*alpha}
.func bhp2(x) {blp0(x)*alpha**2 - blp1(x)*alpha + blp2(x)}
.func ahp0(x) {alp2(x)*alpha**2 - alp1(x)*alpha + alp0(x)}
.func ahp1(x) {-alp1(x)*alpha**2 + 2*(alp2(x) + alp0(x))*alpha - alp1(x)}
.func ahp2(x) {alp0(x)*alpha**2 - alp1(x)*alpha + alp2(x)}
* bandpass
.func bbp0(x) {(beta**2-2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2+2*beta+1)*blp0(x)}
.func bbp1(x) {4*alpha*beta*((1-beta)*blp2(x)+beta*blp1(x)+(-beta-1)*blp0(x))}
.func bbp2(x) {((4*alpha**2+2)*beta**2-2)*(blp2(x)+blp0(x))-((4*alpha**2+2)*beta**2+2)*blp1(x)}
.func bbp3(x) {4*alpha*beta*((-blp2(x)+blp1(x)-blp0(x))*beta+blp0(x)-blp2(x))}
.func bbp4(x) {(beta**2+2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2-2*beta+1)*blp0(x)}
.func abp0(x) {(beta**2-2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2+2*beta+1)*alp0(x)}
.func abp1(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp2(x)-alp0(x))}
.func abp2(x) {((4*alpha**2+2)*beta**2-2)*(alp2(x)+alp0(x))-((4*alpha**2+2)*beta**2+2)*alp1(x)}
.func abp3(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp0(x)-alp2(x))}
.func abp4(x) {(beta**2+2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2-2*beta+1)*alp0(x)}
* bandstop
.func bbs0(x) {bbp0(x)}
.func bbs1(x) {4*alpha*((blp2(x)-blp0(x))*beta-blp2(x)-blp1(x)-blp0(x))}
.func bbs2(x) {2*((-blp2(x)+blp1(x)-blp0(x))*beta**2+(blp2(x)+blp1(x)+blp0(x))*(2*alpha**2+1))}
.func bbs3(x) {4*alpha*((blp0(x)-blp2(x))*beta-(blp2(x)+blp1(x)+blp0(x)))}
.func bbs4(x) {bbp4(x)}
.func abs0(x) {abp0(x)}
.func abs1(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs2(x) {2*((-alp2(x)+alp1(x)-alp0(x))*beta**2+(alp2(x)+alp1(x)+alp0(x))*(2*alpha**2+1))}
.func abs3(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs4(x) {abp4(x)}
* case selection
.func bltB0(x) {if(x<=nodopt,if(allpass|low,blp0(x),if(high,bhp0(x),if(bandpass,bbp0(x),bbs0(x)))),1)}
.func bltB1(x) {if(allpass|low,blp1(x),if(high,bhp1(x),if(bandpass,bbp1(x),bbs1(x))))}
.func bltB2(x) {if(allpass|low,blp2(x),if(high,bhp2(x),if(bandpass,bbp2(x),bbs2(x))))}
.func bltB3(x) {if(lphp,0,if(bandpass,bbp3(x),bbs3(x)))}
.func bltB4(x) {if(lphp,0,if(bandpass,bbp4(x),bbs4(x)))}
.func bltA0(x) {if(allpass,bltB2(x),if(low,alp0(x),if(high,ahp0(x),if(bandpass,abp0(x),abs0(x)))))}
.func bltA1(x) {if(allpass,bltB1(x),if(low,alp1(x),if(high,ahp1(x),if(bandpass,abp1(x),abs1(x)))))}
.func bltA2(x) {if(allpass,bltB0(x),if(low,alp2(x),if(high,ahp2(x),if(bandpass,abp2(x),abs2(x)))))}
.func bltA3(x) {if(lphp,0,if(bandpass,abp3(x),abs3(x)))}
.func bltA4(x) {if(lphp,0,if(bandpass,abp4(x),abs4(x)))}
*** buffered input
Gin 0 999 in GROUND 1
Rin 999 0 1
*** S&H input
Vbypass {inv(SH)*999} {inv(SH)*666}
Ash {SH*999} 0 {SH*0.4} 0 0 0 {SH*666} 0 SAMPLEHOLD Vhigh=1g Vlow=-1g
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** normalizing B0[n]
Gb0_1 0 667 666 0 {1/bltB0(1)}
*** B1[n]
Gb1_1 0 667 0 101 {bltB1(1)/bltB0(1)}
Gb1_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} {bltB1(2)/bltB0(2)}
Gb1_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} {bltB1(3)/bltB0(3)}
Gb1_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} {bltB1(4)/bltB0(4)}
Gb1_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} {bltB1(5)/bltB0(5)}
Gb1_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} {bltB1(6)/bltB0(6)}
Gb1_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} {bltB1(7)/bltB0(7)}
Gb1_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} {bltB1(8)/bltB0(8)}
Gb1_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} {bltB1(9)/bltB0(9)}
Gb1_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} {bltB1(10)/bltB0(10)}
Gb1_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} {bltB1(11)/bltB0(11)}
Gb1_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} {bltB1(12)/bltB0(12)}
Gb1_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} {bltB1(13)/bltB0(13)}
Gb1_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} {bltB1(14)/bltB0(14)}
Gb1_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} {bltB1(15)/bltB0(15)}
Gb1_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} {bltB1(16)/bltB0(16)}
*** B2[n]
Gb2_1 0 667 0 102 {bltB2(1)/bltB0(1)}
Gb2_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,202,0)} {bltB2(2)/bltB0(2)}
Gb2_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,302,0)} {bltB2(3)/bltB0(3)}
Gb2_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,402,0)} {bltB2(4)/bltB0(4)}
Gb2_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,502,0)} {bltB2(5)/bltB0(5)}
Gb2_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,602,0)} {bltB2(6)/bltB0(6)}
Gb2_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,702,0)} {bltB2(7)/bltB0(7)}
Gb2_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,802,0)} {bltB2(8)/bltB0(8)}
Gb2_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,902,0)} {bltB2(9)/bltB0(9)}
Gb2_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1002,0)} {bltB2(10)/bltB0(10)}
Gb2_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1102,0)} {bltB2(11)/bltB0(11)}
Gb2_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1202,0)} {bltB2(12)/bltB0(12)}
Gb2_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1302,0)} {bltB2(13)/bltB0(13)}
Gb2_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1402,0)} {bltB2(14)/bltB0(14)}
Gb2_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1502,0)} {bltB2(15)/bltB0(15)}
Gb2_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1602,0)} {bltB2(16)/bltB0(16)}
*** B3[n]
Gb3_1 0 {if(bpbs,667,0)} 0 {if(bpbs,103,0)} {bltB3(1)/bltB0(1)}
Gb3_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,203,0)} {bltB3(2)/bltB0(2)}
Gb3_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,303,0)} {bltB3(3)/bltB0(3)}
Gb3_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,403,0)} {bltB3(4)/bltB0(4)}
Gb3_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,503,0)} {bltB3(5)/bltB0(5)}
Gb3_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,603,0)} {bltB3(6)/bltB0(6)}
Gb3_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,703,0)} {bltB3(7)/bltB0(7)}
Gb3_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,803,0)} {bltB3(8)/bltB0(8)}
Gb3_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,903,0)} {bltB3(9)/bltB0(9)}
Gb3_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1003,0)} {bltB3(10)/bltB0(10)}
Gb3_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1103,0)} {bltB3(11)/bltB0(11)}
Gb3_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1203,0)} {bltB3(12)/bltB0(12)}
Gb3_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1303,0)} {bltB3(13)/bltB0(13)}
Gb3_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1403,0)} {bltB3(14)/bltB0(14)}
Gb3_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1503,0)} {bltB3(15)/bltB0(15)}
Gb3_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1603,0)} {bltB3(16)/bltB0(16)}
*** B4[n]
Gb4_1 0 {if(bpbs,667,0)} 0 {if(bpbs,104,0)} {bltB4(1)/bltB0(1)}
Gb4_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,204,0)} {bltB4(2)/bltB0(2)}
Gb4_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,304,0)} {bltB4(3)/bltB0(3)}
Gb4_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,404,0)} {bltB4(4)/bltB0(4)}
Gb4_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,504,0)} {bltB4(5)/bltB0(5)}
Gb4_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,604,0)} {bltB4(6)/bltB0(6)}
Gb4_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,704,0)} {bltB4(7)/bltB0(7)}
Gb4_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,804,0)} {bltB4(8)/bltB0(8)}
Gb4_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,904,0)} {bltB4(9)/bltB0(9)}
Gb4_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1004,0)} {bltB4(10)/bltB0(10)}
Gb4_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1104,0)} {bltB4(11)/bltB0(11)}
Gb4_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1204,0)} {bltB4(12)/bltB0(12)}
Gb4_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1304,0)} {bltB4(13)/bltB0(13)}
Gb4_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1404,0)} {bltB4(14)/bltB0(14)}
Gb4_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1504,0)} {bltB4(15)/bltB0(15)}
Gb4_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1604,0)} {bltB4(16)/bltB0(16)}
*** A0[n]
Ga0_1 0 1 667 0 {bltA0(1)/bltB0(2)}
Ga0_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,1,0)} 0 {bltA0(2)/bltB0(3)}
Ga0_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,2,0)} 0 {bltA0(3)/bltB0(4)}
Ga0_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,3,0)} 0 {bltA0(4)/bltB0(5)}
Ga0_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,4,0)} 0 {bltA0(5)/bltB0(6)}
Ga0_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,5,0)} 0 {bltA0(6)/bltB0(7)}
Ga0_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,6,0)} 0 {bltA0(7)/bltB0(8)}
Ga0_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,7,0)} 0 {bltA0(8)/bltB0(9)}
Ga0_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,8,0)} 0 {bltA0(9)/bltB0(10)}
Ga0_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,9,0)} 0 {bltA0(10)/bltB0(11)}
Ga0_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,10,0)} 0 {bltA0(11)/bltB0(12)}
Ga0_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,11,0)} 0 {bltA0(12)/bltB0(13)}
Ga0_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,12,0)} 0 {bltA0(13)/bltB0(14)}
Ga0_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,13,0)} 0 {bltA0(14)/bltB0(15)}
Ga0_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,14,0)} 0 {bltA0(15)/bltB0(16)}
Ga0_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,15,0)} 0 {bltA0(16)/bltB0(17)}
*** A1[n]
Ga1_1 0 1 101 0 {bltA1(1)/bltB0(2)}
Ga1_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,201,0)} 0 {bltA1(2)/bltB0(3)}
Ga1_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,301,0)} 0 {bltA1(3)/bltB0(4)}
Ga1_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,401,0)} 0 {bltA1(4)/bltB0(5)}
Ga1_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,501,0)} 0 {bltA1(5)/bltB0(6)}
Ga1_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,601,0)} 0 {bltA1(6)/bltB0(7)}
Ga1_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,701,0)} 0 {bltA1(7)/bltB0(8)}
Ga1_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,801,0)} 0 {bltA1(8)/bltB0(9)}
Ga1_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,901,0)} 0 {bltA1(9)/bltB0(10)}
Ga1_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1001,0)} 0 {bltA1(10)/bltB0(11)}
Ga1_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1101,0)} 0 {bltA1(11)/bltB0(12)}
Ga1_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1201,0)} 0 {bltA1(12)/bltB0(13)}
Ga1_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1301,0)} 0 {bltA1(13)/bltB0(14)}
Ga1_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1401,0)} 0 {bltA1(14)/bltB0(15)}
Ga1_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1501,0)} 0 {bltA1(15)/bltB0(16)}
Ga1_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1601,0)} 0 {bltA1(16)/bltB0(17)}
*** A2[n]
Ga2_1 0 1 102 0 {bltA2(1)/bltB0(2)}
Ga2_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,202,0)} 0 {bltA2(2)/bltB0(3)}
Ga2_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,302,0)} 0 {bltA2(3)/bltB0(4)}
Ga2_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,402,0)} 0 {bltA2(4)/bltB0(5)}
Ga2_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,502,0)} 0 {bltA2(5)/bltB0(6)}
Ga2_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,602,0)} 0 {bltA2(6)/bltB0(7)}
Ga2_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,702,0)} 0 {bltA2(7)/bltB0(8)}
Ga2_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,802,0)} 0 {bltA2(8)/bltB0(9)}
Ga2_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,902,0)} 0 {bltA2(9)/bltB0(10)}
Ga2_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1002,0)} 0 {bltA2(10)/bltB0(11)}
Ga2_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1102,0)} 0 {bltA2(11)/bltB0(12)}
Ga2_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1202,0)} 0 {bltA2(12)/bltB0(13)}
Ga2_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1302,0)} 0 {bltA2(13)/bltB0(14)}
Ga2_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1402,0)} 0 {bltA2(14)/bltB0(15)}
Ga2_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1502,0)} 0 {bltA2(15)/bltB0(16)}
Ga2_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1602,0)} 0 {bltA2(16)/bltB0(17)}
***A3[n]
Ga3_1 0 {bpbs} {if(bpbs,103,0)} 0 {bltA3(1)/bltB0(2)}
Ga3_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,203,0)} 0 {bltA3(2)/bltB0(3)}
Ga3_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,303,0)} 0 {bltA3(3)/bltB0(4)}
Ga3_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,403,0)} 0 {bltA3(4)/bltB0(5)}
Ga3_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,503,0)} 0 {bltA3(5)/bltB0(6)}
Ga3_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,603,0)} 0 {bltA3(6)/bltB0(7)}
Ga3_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,703,0)} 0 {bltA3(7)/bltB0(8)}
Ga3_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,803,0)} 0 {bltA3(8)/bltB0(9)}
Ga3_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,903,0)} 0 {bltA3(9)/bltB0(10)}
Ga3_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1003,0)} 0 {bltA3(10)/bltB0(11)}
Ga3_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1103,0)} 0 {bltA3(11)/bltB0(12)}
Ga3_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1203,0)} 0 {bltA3(12)/bltB0(13)}
Ga3_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1303,0)} 0 {bltA3(13)/bltB0(14)}
Ga3_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1403,0)} 0 {bltA3(14)/bltB0(15)}
Ga3_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1503,0)} 0 {bltA3(15)/bltB0(16)}
Ga3_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1603,0)} 0 {bltA3(16)/bltB0(17)}
***A4[n]
Ga4_1 0 {bpbs} {if(bpbs,104,0)} 0 {bltA4(1)/bltB0(2)}
Ga4_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,204,0)} 0 {bltA4(2)/bltB0(3)}
Ga4_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,304,0)} 0 {bltA4(3)/bltB0(4)}
Ga4_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,404,0)} 0 {bltA4(4)/bltB0(5)}
Ga4_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,504,0)} 0 {bltA4(5)/bltB0(6)}
Ga4_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,604,0)} 0 {bltA4(6)/bltB0(7)}
Ga4_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,704,0)} 0 {bltA4(7)/bltB0(8)}
Ga4_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,804,0)} 0 {bltA4(8)/bltB0(9)}
Ga4_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,904,0)} 0 {bltA4(9)/bltB0(10)}
Ga4_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1004,0)} 0 {bltA4(10)/bltB0(11)}
Ga4_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1104,0)} 0 {bltA4(11)/bltB0(12)}
Ga4_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1204,0)} 0 {bltA4(12)/bltB0(13)}
Ga4_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1304,0)} 0 {bltA4(13)/bltB0(14)}
Ga4_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1404,0)} 0 {bltA4(14)/bltB0(15)}
Ga4_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1504,0)} 0 {bltA4(15)/bltB0(16)}
Ga4_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1604,0)} 0 {bltA4(16)/bltB0(17)}
* using ltline with LC and lininterp seems to better preserve the edges
*** z^-1
Oz1_1 667 0 101 0 Z-1
Oz1_2 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} 0 Z-1
Oz1_3 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} 0 Z-1
Oz1_4 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} 0 Z-1
Oz1_5 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} 0 Z-1
Oz1_6 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} 0 Z-1
Oz1_7 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} 0 Z-1
Oz1_8 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} 0 Z-1
Oz1_9 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} 0 Z-1
Oz1_10 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} 0 Z-1
Oz1_11 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} 0 Z-1
Oz1_12 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} 0 Z-1
Oz1_13 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} 0 Z-1
Oz1_14 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} 0 Z-1
Oz1_15 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} 0 Z-1
Oz1_16 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} 0 Z-1
*** z^-2
Oz2_1 101 0 102 0 Z-1
Oz2_2 {if(2<=nodopt,201,0)} 0 {if(2<=nodopt,202,0)} 0 Z-1
Oz2_3 {if(3<=nodopt,301,0)} 0 {if(3<=nodopt,302,0)} 0 Z-1
Oz2_4 {if(4<=nodopt,401,0)} 0 {if(4<=nodopt,402,0)} 0 Z-1
Oz2_5 {if(5<=nodopt,501,0)} 0 {if(5<=nodopt,502,0)} 0 Z-1
Oz2_6 {if(6<=nodopt,601,0)} 0 {if(6<=nodopt,602,0)} 0 Z-1
Oz2_7 {if(7<=nodopt,701,0)} 0 {if(7<=nodopt,702,0)} 0 Z-1
Oz2_8 {if(8<=nodopt,801,0)} 0 {if(8<=nodopt,802,0)} 0 Z-1
Oz2_9 {if(9<=nodopt,901,0)} 0 {if(9<=nodopt,902,0)} 0 Z-1
Oz2_10 {if(10<=nodopt,1001,0)} 0 {if(10<=nodopt,1002,0)} 0 Z-1
Oz2_11 {if(11<=nodopt,1101,0)} 0 {if(11<=nodopt,1102,0)} 0 Z-1
Oz2_12 {if(12<=nodopt,1201,0)} 0 {if(12<=nodopt,1202,0)} 0 Z-1
Oz2_13 {if(13<=nodopt,1301,0)} 0 {if(13<=nodopt,1302,0)} 0 Z-1
Oz2_14 {if(14<=nodopt,1401,0)} 0 {if(14<=nodopt,1402,0)} 0 Z-1
Oz2_15 {if(15<=nodopt,1501,0)} 0 {if(15<=nodopt,1502,0)} 0 Z-1
Oz2_16 {if(16<=nodopt,1601,0)} 0 {if(16<=nodopt,1602,0)} 0 Z-1
*** z^-3
Oz3_1 {if(bpbs,102,0)} 0 {if(bpbs,103,0)} 0 Z-1
Oz3_2 {if(bpbs&2<=nodopt,202,0)} 0 {if(bpbs&2<=nodopt,203,0)} 0 Z-1
Oz3_3 {if(bpbs&3<=nodopt,302,0)} 0 {if(bpbs&3<=nodopt,303,0)} 0 Z-1
Oz3_4 {if(bpbs&4<=nodopt,402,0)} 0 {if(bpbs&4<=nodopt,403,0)} 0 Z-1
Oz3_5 {if(bpbs&5<=nodopt,502,0)} 0 {if(bpbs&5<=nodopt,503,0)} 0 Z-1
Oz3_6 {if(bpbs&6<=nodopt,602,0)} 0 {if(bpbs&6<=nodopt,603,0)} 0 Z-1
Oz3_7 {if(bpbs&7<=nodopt,702,0)} 0 {if(bpbs&7<=nodopt,703,0)} 0 Z-1
Oz3_8 {if(bpbs&8<=nodopt,802,0)} 0 {if(bpbs&8<=nodopt,803,0)} 0 Z-1
Oz3_9 {if(bpbs&9<=nodopt,902,0)} 0 {if(bpbs&9<=nodopt,903,0)} 0 Z-1
Oz3_10 {if(bpbs&10<=nodopt,1002,0)} 0 {if(bpbs&10<=nodopt,1003,0)} 0 Z-1
Oz3_11 {if(bpbs&11<=nodopt,1102,0)} 0 {if(bpbs&11<=nodopt,1103,0)} 0 Z-1
Oz3_12 {if(bpbs&12<=nodopt,1202,0)} 0 {if(bpbs&12<=nodopt,1203,0)} 0 Z-1
Oz3_13 {if(bpbs&13<=nodopt,1302,0)} 0 {if(bpbs&13<=nodopt,1303,0)} 0 Z-1
Oz3_14 {if(bpbs&14<=nodopt,1402,0)} 0 {if(bpbs&14<=nodopt,1403,0)} 0 Z-1
Oz3_15 {if(bpbs&15<=nodopt,1502,0)} 0 {if(bpbs&15<=nodopt,1503,0)} 0 Z-1
Oz3_16 {if(bpbs&16<=nodopt,1602,0)} 0 {if(bpbs&16<=nodopt,1603,0)} 0 Z-1
*** z^-4
Oz4_1 {if(bpbs,103,0)} 0 {if(bpbs,104,0)} 0 Z-1
Oz4_2 {if(bpbs&2<=nodopt,203,0)} 0 {if(bpbs&2<=nodopt,204,0)} 0 Z-1
Oz4_3 {if(bpbs&3<=nodopt,303,0)} 0 {if(bpbs&3<=nodopt,304,0)} 0 Z-1
Oz4_4 {if(bpbs&4<=nodopt,403,0)} 0 {if(bpbs&4<=nodopt,404,0)} 0 Z-1
Oz4_5 {if(bpbs&5<=nodopt,503,0)} 0 {if(bpbs&5<=nodopt,504,0)} 0 Z-1
Oz4_6 {if(bpbs&6<=nodopt,603,0)} 0 {if(bpbs&6<=nodopt,604,0)} 0 Z-1
Oz4_7 {if(bpbs&7<=nodopt,703,0)} 0 {if(bpbs&7<=nodopt,704,0)} 0 Z-1
Oz4_8 {if(bpbs&8<=nodopt,803,0)} 0 {if(bpbs&8<=nodopt,804,0)} 0 Z-1
Oz4_9 {if(bpbs&9<=nodopt,903,0)} 0 {if(bpbs&9<=nodopt,904,0)} 0 Z-1
Oz4_10 {if(bpbs&10<=nodopt,1003,0)} 0 {if(bpbs&10<=nodopt,1004,0)} 0 Z-1
Oz4_11 {if(bpbs&11<=nodopt,1103,0)} 0 {if(bpbs&11<=nodopt,1104,0)} 0 Z-1
Oz4_12 {if(bpbs&12<=nodopt,1203,0)} 0 {if(bpbs&12<=nodopt,1204,0)} 0 Z-1
Oz4_13 {if(bpbs&13<=nodopt,1303,0)} 0 {if(bpbs&13<=nodopt,1304,0)} 0 Z-1
Oz4_14 {if(bpbs&14<=nodopt,1403,0)} 0 {if(bpbs&14<=nodopt,1404,0)} 0 Z-1
Oz4_15 {if(bpbs&15<=nodopt,1503,0)} 0 {if(bpbs&15<=nodopt,1504,0)} 0 Z-1
Oz4_16 {if(bpbs&16<=nodopt,1603,0)} 0 {if(bpbs&16<=nodopt,1604,0)} 0 Z-1
.model z-1 ltra l={1/absf0} c={1/absf0} lininterp
*** (l)tline terminations
R1 {if(lphp,102,104)} 0 1
R2 {if(2<=nodopt,if(lphp,202,204),0)} 0 1
R3 {if(3<=nodopt,if(lphp,302,304),0)} 0 1
R4 {if(4<=nodopt,if(lphp,402,404),0)} 0 1
R5 {if(5<=nodopt,if(lphp,502,504),0)} 0 1
R6 {if(6<=nodopt,if(lphp,602,604),0)} 0 1
R7 {if(7<=nodopt,if(lphp,702,704),0)} 0 1
R8 {if(8<=nodopt,if(lphp,802,804),0)} 0 1
R9 {if(9<=nodopt,if(lphp,902,904),0)} 0 1
R10 {if(10<=nodopt,if(lphp,1002,1004),0)} 0 1
R11 {if(11<=nodopt,if(lphp,1102,1104),0)} 0 1
R12 {if(12<=nodopt,if(lphp,1202,1204),0)} 0 1
R13 {if(13<=nodopt,if(lphp,1302,1304),0)} 0 1
R14 {if(14<=nodopt,if(lphp,1402,1404),0)} 0 1
R15 {if(15<=nodopt,if(lphp,1502,1504),0)} 0 1
R16 {if(16<=nodopt,if(lphp,1602,1604),0)} 0 1
*** end chain resistor
Rx 0 {nodopt} 1
*** buffered output
Gout GROUND out {nodopt} 0 {G}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Va_tran 0.2 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltA0(1)} 0.9 {bltA0(1)}
+ 1.1 {bltA0(2)} 1.9 {bltA0(2)}
+ 2.1 {bltA0(3)} 2.9 {bltA0(3)}
+ 3.1 {bltA0(4)} 3.9 {bltA0(4)}
+ 4.1 {bltA0(5)} 4.9 {bltA0(5)}
+ 5.1 {bltA0(6)} 5.9 {bltA0(6)}
+ 6.1 {bltA0(7)} 6.9 {bltA0(7)}
+ 7.1 {bltA0(8)} 7.9 {bltA0(8)}
+ 8.1 {bltA0(9)} 8.9 {bltA0(9)}
+ 9.1 {bltA0(10)} 9.9 {bltA0(10)}
+ 10.1 {bltA0(11)} 10.9 {bltA0(11)}
+ 11.1 {bltA0(12)} 11.9 {bltA0(12)}
+ 12.1 {bltA0(13)} 12.9 {bltA0(13)}
+ 13.1 {bltA0(14)} 13.9 {bltA0(14)}
+ 14.1 {bltA0(15)} 14.9 {bltA0(15)}
+ 15.1 {bltA0(16)} 15.9 {bltA0(16)}
+ 16.1 {bltA1(1)} 16.9 {bltA1(1)}
+ 17.1 {bltA1(2)} 17.9 {bltA1(2)}
+ 18.1 {bltA1(3)} 18.9 {bltA1(3)}
+ 19.1 {bltA1(4)} 19.9 {bltA1(4)}
+ 20.1 {bltA1(5)} 20.9 {bltA1(5)}
+ 21.1 {bltA1(6)} 21.9 {bltA1(6)}
+ 22.1 {bltA1(7)} 22.9 {bltA1(7)}
+ 23.1 {bltA1(8)} 23.9 {bltA1(8)}
+ 24.1 {bltA1(9)} 24.9 {bltA1(9)}
+ 25.1 {bltA1(10)} 25.9 {bltA1(10)}
+ 26.1 {bltA1(11)} 26.9 {bltA1(11)}
+ 27.1 {bltA1(12)} 27.9 {bltA1(12)}
+ 28.1 {bltA1(13)} 28.9 {bltA1(13)}
+ 29.1 {bltA1(14)} 29.9 {bltA1(14)}
+ 30.1 {bltA1(15)} 30.9 {bltA1(15)}
+ 31.1 {bltA1(16)} 31.9 {bltA1(16)}
+ 32.1 {bltA2(1)} 32.9 {bltA2(1)}
+ 33.1 {bltA2(2)} 33.9 {bltA2(2)}
+ 34.1 {bltA2(3)} 34.9 {bltA2(3)}
+ 35.1 {bltA2(4)} 35.9 {bltA2(4)}
+ 36.1 {bltA2(5)} 36.9 {bltA2(5)}
+ 37.1 {bltA2(6)} 37.9 {bltA2(6)}
+ 38.1 {bltA2(7)} 38.9 {bltA2(7)}
+ 39.1 {bltA2(8)} 39.9 {bltA2(8)}
+ 40.1 {bltA2(9)} 40.9 {bltA2(9)}
+ 41.1 {bltA2(10)} 41.9 {bltA2(10)}
+ 42.1 {bltA2(11)} 42.9 {bltA2(11)}
+ 43.1 {bltA2(12)} 43.9 {bltA2(12)}
+ 44.1 {bltA2(13)} 44.9 {bltA2(13)}
+ 45.1 {bltA2(14)} 45.9 {bltA2(14)}
+ 46.1 {bltA2(15)} 46.9 {bltA2(15)}
+ 47.1 {bltA2(16)} 47.9 {bltA2(16)}
+ 48.1 {bltA3(1)} 48.9 {bltA3(1)}
+ 49.1 {bltA3(2)} 49.9 {bltA3(2)}
+ 50.1 {bltA3(3)} 50.9 {bltA3(3)}
+ 51.1 {bltA3(4)} 51.9 {bltA3(4)}
+ 52.1 {bltA3(5)} 52.9 {bltA3(5)}
+ 53.1 {bltA3(6)} 53.9 {bltA3(6)}
+ 54.1 {bltA3(7)} 54.9 {bltA3(7)}
+ 55.1 {bltA3(8)} 55.9 {bltA3(8)}
+ 56.1 {bltA3(9)} 56.9 {bltA3(9)}
+ 57.1 {bltA3(10)} 57.9 {bltA3(10)}
+ 58.1 {bltA3(11)} 58.9 {bltA3(11)}
+ 59.1 {bltA3(12)} 59.9 {bltA3(12)}
+ 60.1 {bltA3(13)} 60.9 {bltA3(13)}
+ 61.1 {bltA3(14)} 61.9 {bltA3(14)}
+ 62.1 {bltA3(15)} 62.9 {bltA3(15)}
+ 63.1 {bltA3(16)} 63.9 {bltA3(16)}
+ 64.1 {bltA4(1)} 64.9 {bltA4(1)}
+ 65.1 {bltA4(2)} 65.9 {bltA4(2)}
+ 66.1 {bltA4(3)} 66.9 {bltA4(3)}
+ 67.1 {bltA4(4)} 67.9 {bltA4(4)}
+ 68.1 {bltA4(5)} 68.9 {bltA4(5)}
+ 69.1 {bltA4(6)} 69.9 {bltA4(6)}
+ 70.1 {bltA4(7)} 70.9 {bltA4(7)}
+ 71.1 {bltA4(8)} 71.9 {bltA4(8)}
+ 72.1 {bltA4(9)} 72.9 {bltA4(9)}
+ 73.1 {bltA4(10)} 73.9 {bltA4(10)}
+ 74.1 {bltA4(11)} 74.9 {bltA4(11)}
+ 75.1 {bltA4(12)} 75.9 {bltA4(12)}
+ 76.1 {bltA4(13)} 76.9 {bltA4(13)}
+ 77.1 {bltA4(14)} 77.9 {bltA4(14)}
+ 78.1 {bltA4(15)} 78.9 {bltA4(15)}
+ 79.1 {bltA4(16)} 79.9 {bltA4(16)}
Vb_tran 0.3 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltB0(1)} 0.9 {bltB0(1)}
+ 1.1 {bltB0(2)} 1.9 {bltB0(2)}
+ 2.1 {bltB0(3)} 2.9 {bltB0(3)}
+ 3.1 {bltB0(4)} 3.9 {bltB0(4)}
+ 4.1 {bltB0(5)} 4.9 {bltB0(5)}
+ 5.1 {bltB0(6)} 5.9 {bltB0(6)}
+ 6.1 {bltB0(7)} 6.9 {bltB0(7)}
+ 7.1 {bltB0(8)} 7.9 {bltB0(8)}
+ 8.1 {bltB0(9)} 8.9 {bltB0(9)}
+ 9.1 {bltB0(10)} 9.9 {bltB0(10)}
+ 10.1 {bltB0(11)} 10.9 {bltB0(11)}
+ 11.1 {bltB0(12)} 11.9 {bltB0(12)}
+ 12.1 {bltB0(13)} 12.9 {bltB0(13)}
+ 13.1 {bltB0(14)} 13.9 {bltB0(14)}
+ 14.1 {bltB0(15)} 14.9 {bltB0(15)}
+ 15.1 {bltB0(16)} 15.9 {bltB0(16)}
+ 16.1 {bltB1(1)} 16.9 {bltB1(1)}
+ 17.1 {bltB1(2)} 17.9 {bltB1(2)}
+ 18.1 {bltB1(3)} 18.9 {bltB1(3)}
+ 19.1 {bltB1(4)} 19.9 {bltB1(4)}
+ 20.1 {bltB1(5)} 20.9 {bltB1(5)}
+ 21.1 {bltB1(6)} 21.9 {bltB1(6)}
+ 22.1 {bltB1(7)} 22.9 {bltB1(7)}
+ 23.1 {bltB1(8)} 23.9 {bltB1(8)}
+ 24.1 {bltB1(9)} 24.9 {bltB1(9)}
+ 25.1 {bltB1(10)} 25.9 {bltB1(10)}
+ 26.1 {bltB1(11)} 26.9 {bltB1(11)}
+ 27.1 {bltB1(12)} 27.9 {bltB1(12)}
+ 28.1 {bltB1(13)} 28.9 {bltB1(13)}
+ 29.1 {bltB1(14)} 29.9 {bltB1(14)}
+ 30.1 {bltB1(15)} 30.9 {bltB1(15)}
+ 31.1 {bltB1(16)} 31.9 {bltB1(16)}
+ 32.1 {bltB2(1)} 32.9 {bltB2(1)}
+ 33.1 {bltB2(2)} 33.9 {bltB2(2)}
+ 34.1 {bltB2(3)} 34.9 {bltB2(3)}
+ 35.1 {bltB2(4)} 35.9 {bltB2(4)}
+ 36.1 {bltB2(5)} 36.9 {bltB2(5)}
+ 37.1 {bltB2(6)} 37.9 {bltB2(6)}
+ 38.1 {bltB2(7)} 38.9 {bltB2(7)}
+ 39.1 {bltB2(8)} 39.9 {bltB2(8)}
+ 40.1 {bltB2(9)} 40.9 {bltB2(9)}
+ 41.1 {bltB2(10)} 41.9 {bltB2(10)}
+ 42.1 {bltB2(11)} 42.9 {bltB2(11)}
+ 43.1 {bltB2(12)} 43.9 {bltB2(12)}
+ 44.1 {bltB2(13)} 44.9 {bltB2(13)}
+ 45.1 {bltB2(14)} 45.9 {bltB2(14)}
+ 46.1 {bltB2(15)} 46.9 {bltB2(15)}
+ 47.1 {bltB2(16)} 47.9 {bltB2(16)}
+ 48.1 {bltB3(1)} 48.9 {bltB3(1)}
+ 49.1 {bltB3(2)} 49.9 {bltB3(2)}
+ 50.1 {bltB3(3)} 50.9 {bltB3(3)}
+ 51.1 {bltB3(4)} 51.9 {bltB3(4)}
+ 52.1 {bltB3(5)} 52.9 {bltB3(5)}
+ 53.1 {bltB3(6)} 53.9 {bltB3(6)}
+ 54.1 {bltB3(7)} 54.9 {bltB3(7)}
+ 55.1 {bltB3(8)} 55.9 {bltB3(8)}
+ 56.1 {bltB3(9)} 56.9 {bltB3(9)}
+ 57.1 {bltB3(10)} 57.9 {bltB3(10)}
+ 58.1 {bltB3(11)} 58.9 {bltB3(11)}
+ 59.1 {bltB3(12)} 59.9 {bltB3(12)}
+ 60.1 {bltB3(13)} 60.9 {bltB3(13)}
+ 61.1 {bltB3(14)} 61.9 {bltB3(14)}
+ 62.1 {bltB3(15)} 62.9 {bltB3(15)}
+ 63.1 {bltB3(16)} 63.9 {bltB3(16)}
+ 64.1 {bltB4(1)} 64.9 {bltB4(1)}
+ 65.1 {bltB4(2)} 65.9 {bltB4(2)}
+ 66.1 {bltB4(3)} 66.9 {bltB4(3)}
+ 67.1 {bltB4(4)} 67.9 {bltB4(4)}
+ 68.1 {bltB4(5)} 68.9 {bltB4(5)}
+ 69.1 {bltB4(6)} 69.9 {bltB4(6)}
+ 70.1 {bltB4(7)} 70.9 {bltB4(7)}
+ 71.1 {bltB4(8)} 71.9 {bltB4(8)}
+ 72.1 {bltB4(9)} 72.9 {bltB4(9)}
+ 73.1 {bltB4(10)} 73.9 {bltB4(10)}
+ 74.1 {bltB4(11)} 74.9 {bltB4(11)}
+ 75.1 {bltB4(12)} 75.9 {bltB4(12)}
+ 76.1 {bltB4(13)} 76.9 {bltB4(13)}
+ 77.1 {bltB4(14)} 77.9 {bltB4(14)}
+ 78.1 {bltB4(15)} 78.9 {bltB4(15)}
+ 79.1 {bltB4(16)} 79.9 {bltB4(16)}
.ends Butterworth_IIR
****************************************
*
*     Chebyshev type I, IIR
*
****************************************
*
* Parameters: nT, SH, f0, fc, BWp, BWs, G, Asc, Ap, As, N
*   (optional: sim, tr, td)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
********************************
.subckt Chebyshev_IIR IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ nT=0
+ sim=1 SH=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 As=80 Ap=1 N=0
+ tr=1m/absf0 td=0
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2)) absf0=abs(f0)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2)
+ oddCase=par(case+1) evenCase=inv(oddCase) oddN=par(Order+1) evenN=inv(oddN) lphp=(case<=2) bpbs=inv(lphp)
+ allpass=(case==0) low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4) 
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp>BWs))
+ epsilon_sc=sqrt(10**(Asc/10)-1) epsilon_s=sqrt(10**(As/10)-1)
+ epsilon_p=if(Ap>0,(10**(Ap/10)-1)**-.5,cosh(acosh( ratio )*N)/epsilon_s)
+ fpass1=if(lphp,BWp,(sqrt(BWp**2+4*fc**2)-BWp)/2) fpass2=if(lphp,0,(sqrt(BWp**2+4*fc**2)+BWp)/2)
+ fstop1=if(lphp,BWs,(sqrt(BWs**2+4*fc**2)-BWs)/2) fpz=tan(pi*fpass1/absf0) fsz=tan(pi/absf0*fstop1)
+ wp1=2*pi*fpass1/absf0 wp2=2*pi*fpass2/absf0 wscale=cosh(acosh(epsilon_sc*epsilon_p)/Order)
+ ratio=max(fpz/fsz,fsz/fpz) Order=if(N==0,ceil(acosh(epsilon_s*epsilon_p**u(Ap))/(1+bpbs)/acosh(ratio)),N)
*** real and imaginary parts of the poles
.func real(x) {sin((2*x-1)*pi/2/Order)*sinh(asinh(epsilon_p)/Order)/wscale*fpz}
.func imag(x) {cos((2*x-1)*pi/2/Order)*cosh(asinh(epsilon_p)/Order)/wscale*fpz}
*** transfer function terms
.func b2(x) {inv(x==N21)}
.func xb1(x) {if(x==N21,1,2*real(x))}
.func xb0(x) {if(x==N21,real(x),real(x)**2+imag(x)**2)}
*** precalculate these to reduce function unravelling...
.param b01=xb0(1) b11=xb1(1)
.param b02=xb0(2) b12=xb1(2)
.param b03=xb0(3) b13=xb1(3)
.param b04=xb0(4) b14=xb1(4)
.param b05=xb0(5) b15=xb1(5)
.param b06=xb0(6) b16=xb1(6)
.param b07=xb0(7) b17=xb1(7)
.param b08=xb0(8) b18=xb1(8)
.param b09=xb0(9) b19=xb1(9)
.param b010=xb0(10) b110=xb1(10)
.param b011=xb0(11) b111=xb1(11)
.param b012=xb0(12) b112=xb1(12)
.param b013=xb0(13) b113=xb1(13)
.param b014=xb0(14) b114=xb1(14)
.param b015=xb0(15) b115=xb1(15)
.param b016=xb0(16) b116=xb1(16)
*** ...and make new functions out of them. It helps significantly.
.func b0(x) {table(min(x,nodopt), 1, b01, 2, b02, 3, b03, 4, b04,
+ 5, b05, 6, b06, 7, b07, 8, b08, 9, b09, 10, b010, 11, b011,
+ 12, b012, 13, b013, 14, b014, 15, b015, 16, b016)}
.func b1(x) {table(min(x,nodopt), 1, b11, 2, b12, 3, b13, 4, b14, 5, b15,
+ 6, b16, 7, b17, 8, b18, 9, b19, 10, b110, 11, b111, 12, b112, 13, b113,
+ 14, b114, 15, b115, 16, b116)}
*** bilinear transform for LP
.func blp0(x) {b2(x)+b1(x)+b0(x)}
.func blp1(x) {2*(b0(x)-b2(x))}
.func blp2(x) {b2(x)-b1(x)+b0(x)}
.func alp0(x) {b0(x)}
.func alp1(x) {2*b0(x)}
.func alp2(x) {b0(x)}
*** spectral transformations
.parma alpha=if(lphp, -cos(wp1), cos((wp2+wp1)/2)/cos((wp2-wp1)/2) )
+ beta=tan(wp1/2)*if(bandpass, 1/tan((wp2-wp1)/2), tan((wp2-wp1)/2) )
* highpass
.func bhp0(x) {blp2(x)*alpha**2 - blp1(x)*alpha + blp0(x)}
.func bhp1(x) {-(alpha**2 + 1)*blp1(x) + 2*(blp2(x) + blp0(x))*alpha}
.func bhp2(x) {blp0(x)*alpha**2 - blp1(x)*alpha + blp2(x)}
.func ahp0(x) {alp2(x)*alpha**2 - alp1(x)*alpha + alp0(x)}
.func ahp1(x) {-alp1(x)*alpha**2 + 2*(alp2(x) + alp0(x))*alpha - alp1(x)}
.func ahp2(x) {alp0(x)*alpha**2 - alp1(x)*alpha + alp2(x)}
* bandpass
.func bbp0(x) {(beta**2-2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2+2*beta+1)*blp0(x)}
.func bbp1(x) {4*alpha*beta*((1-beta)*blp2(x)+beta*blp1(x)+(-beta-1)*blp0(x))}
.func bbp2(x) {((4*alpha**2+2)*beta**2-2)*(blp2(x)+blp0(x))-((4*alpha**2+2)*beta**2+2)*blp1(x)}
.func bbp3(x) {4*alpha*beta*((-blp2(x)+blp1(x)-blp0(x))*beta+blp0(x)-blp2(x))}
.func bbp4(x) {(beta**2+2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2-2*beta+1)*blp0(x)}
.func abp0(x) {(beta**2-2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2+2*beta+1)*alp0(x)}
.func abp1(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp2(x)-alp0(x))}
.func abp2(x) {((4*alpha**2+2)*beta**2-2)*(alp2(x)+alp0(x))-((4*alpha**2+2)*beta**2+2)*alp1(x)}
.func abp3(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp0(x)-alp2(x))}
.func abp4(x) {(beta**2+2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2-2*beta+1)*alp0(x)}
* bandstop
.func bbs0(x) {bbp0(x)}
.func bbs1(x) {4*alpha*((blp2(x)-blp0(x))*beta-blp2(x)-blp1(x)-blp0(x))}
.func bbs2(x) {2*((-blp2(x)+blp1(x)-blp0(x))*beta**2+(blp2(x)+blp1(x)+blp0(x))*(2*alpha**2+1))}
.func bbs3(x) {4*alpha*((blp0(x)-blp2(x))*beta-(blp2(x)+blp1(x)+blp0(x)))}
.func bbs4(x) {bbp4(x)}
.func abs0(x) {abp0(x)}
.func abs1(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs2(x) {2*((-alp2(x)+alp1(x)-alp0(x))*beta**2+(alp2(x)+alp1(x)+alp0(x))*(2*alpha**2+1))}
.func abs3(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs4(x) {abp4(x)}
* case selection
.func bltB0(x) {if(x<=nodopt,if(allpass|low,blp0(x),if(high,bhp0(x),if(bandpass,bbp0(x),bbs0(x)))),1)}
.func bltB1(x) {if(allpass|low,blp1(x),if(high,bhp1(x),if(bandpass,bbp1(x),bbs1(x))))}
.func bltB2(x) {if(allpass|low,blp2(x),if(high,bhp2(x),if(bandpass,bbp2(x),bbs2(x))))}
.func bltB3(x) {if(lphp,0,if(bandpass,bbp3(x),bbs3(x)))}
.func bltB4(x) {if(lphp,0,if(bandpass,bbp4(x),bbs4(x)))}
.func bltA0(x) {if(allpass,bltB2(x),if(low,alp0(x),if(high,ahp0(x),if(bandpass,abp0(x),abs0(x)))))}
.func bltA1(x) {if(allpass,bltB1(x),if(low,alp1(x),if(high,ahp1(x),if(bandpass,abp1(x),abs1(x)))))}
.func bltA2(x) {if(allpass,bltB0(x),if(low,alp2(x),if(high,ahp2(x),if(bandpass,abp2(x),abs2(x)))))}
.func bltA3(x) {if(lphp,0,if(bandpass,abp3(x),abs3(x)))}
.func bltA4(x) {if(lphp,0,if(bandpass,abp4(x),abs4(x)))}
*** buffered input
Gin 0 999 in GROUND 1
Rin 999 0 1
*** S&H input
Vbypass {inv(SH)*999} {inv(SH)*666}
Ash {SH*999} 0 {SH*0.4} 0 0 0 {SH*666} 0 SAMPLEHOLD Vhigh=1g Vlow=-1g
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** normalizing B0[n]
Gb0_1 0 667 666 0 {1/bltB0(1)}
*** B1[n]
Gb1_1 0 667 0 101 {bltB1(1)/bltB0(1)}
Gb1_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} {bltB1(2)/bltB0(2)}
Gb1_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} {bltB1(3)/bltB0(3)}
Gb1_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} {bltB1(4)/bltB0(4)}
Gb1_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} {bltB1(5)/bltB0(5)}
Gb1_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} {bltB1(6)/bltB0(6)}
Gb1_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} {bltB1(7)/bltB0(7)}
Gb1_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} {bltB1(8)/bltB0(8)}
Gb1_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} {bltB1(9)/bltB0(9)}
Gb1_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} {bltB1(10)/bltB0(10)}
Gb1_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} {bltB1(11)/bltB0(11)}
Gb1_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} {bltB1(12)/bltB0(12)}
Gb1_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} {bltB1(13)/bltB0(13)}
Gb1_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} {bltB1(14)/bltB0(14)}
Gb1_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} {bltB1(15)/bltB0(15)}
Gb1_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} {bltB1(16)/bltB0(16)}
*** B2[n]
Gb2_1 0 667 0 102 {bltB2(1)/bltB0(1)}
Gb2_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,202,0)} {bltB2(2)/bltB0(2)}
Gb2_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,302,0)} {bltB2(3)/bltB0(3)}
Gb2_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,402,0)} {bltB2(4)/bltB0(4)}
Gb2_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,502,0)} {bltB2(5)/bltB0(5)}
Gb2_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,602,0)} {bltB2(6)/bltB0(6)}
Gb2_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,702,0)} {bltB2(7)/bltB0(7)}
Gb2_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,802,0)} {bltB2(8)/bltB0(8)}
Gb2_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,902,0)} {bltB2(9)/bltB0(9)}
Gb2_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1002,0)} {bltB2(10)/bltB0(10)}
Gb2_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1102,0)} {bltB2(11)/bltB0(11)}
Gb2_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1202,0)} {bltB2(12)/bltB0(12)}
Gb2_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1302,0)} {bltB2(13)/bltB0(13)}
Gb2_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1402,0)} {bltB2(14)/bltB0(14)}
Gb2_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1502,0)} {bltB2(15)/bltB0(15)}
Gb2_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1602,0)} {bltB2(16)/bltB0(16)}
*** B3[n]
Gb3_1 0 {if(bpbs,667,0)} 0 {if(bpbs,103,0)} {bltB3(1)/bltB0(1)}
Gb3_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,203,0)} {bltB3(2)/bltB0(2)}
Gb3_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,303,0)} {bltB3(3)/bltB0(3)}
Gb3_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,403,0)} {bltB3(4)/bltB0(4)}
Gb3_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,503,0)} {bltB3(5)/bltB0(5)}
Gb3_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,603,0)} {bltB3(6)/bltB0(6)}
Gb3_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,703,0)} {bltB3(7)/bltB0(7)}
Gb3_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,803,0)} {bltB3(8)/bltB0(8)}
Gb3_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,903,0)} {bltB3(9)/bltB0(9)}
Gb3_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1003,0)} {bltB3(10)/bltB0(10)}
Gb3_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1103,0)} {bltB3(11)/bltB0(11)}
Gb3_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1203,0)} {bltB3(12)/bltB0(12)}
Gb3_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1303,0)} {bltB3(13)/bltB0(13)}
Gb3_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1403,0)} {bltB3(14)/bltB0(14)}
Gb3_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1503,0)} {bltB3(15)/bltB0(15)}
Gb3_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1603,0)} {bltB3(16)/bltB0(16)}
*** B4[n]
Gb4_1 0 {if(bpbs,667,0)} 0 {if(bpbs,104,0)} {bltB4(1)/bltB0(1)}
Gb4_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,204,0)} {bltB4(2)/bltB0(2)}
Gb4_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,304,0)} {bltB4(3)/bltB0(3)}
Gb4_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,404,0)} {bltB4(4)/bltB0(4)}
Gb4_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,504,0)} {bltB4(5)/bltB0(5)}
Gb4_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,604,0)} {bltB4(6)/bltB0(6)}
Gb4_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,704,0)} {bltB4(7)/bltB0(7)}
Gb4_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,804,0)} {bltB4(8)/bltB0(8)}
Gb4_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,904,0)} {bltB4(9)/bltB0(9)}
Gb4_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1004,0)} {bltB4(10)/bltB0(10)}
Gb4_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1104,0)} {bltB4(11)/bltB0(11)}
Gb4_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1204,0)} {bltB4(12)/bltB0(12)}
Gb4_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1304,0)} {bltB4(13)/bltB0(13)}
Gb4_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1404,0)} {bltB4(14)/bltB0(14)}
Gb4_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1504,0)} {bltB4(15)/bltB0(15)}
Gb4_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1604,0)} {bltB4(16)/bltB0(16)}
*** A0[n]
Ga0_1 0 1 667 0 {bltA0(1)/bltB0(2)}
Ga0_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,1,0)} 0 {bltA0(2)/bltB0(3)}
Ga0_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,2,0)} 0 {bltA0(3)/bltB0(4)}
Ga0_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,3,0)} 0 {bltA0(4)/bltB0(5)}
Ga0_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,4,0)} 0 {bltA0(5)/bltB0(6)}
Ga0_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,5,0)} 0 {bltA0(6)/bltB0(7)}
Ga0_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,6,0)} 0 {bltA0(7)/bltB0(8)}
Ga0_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,7,0)} 0 {bltA0(8)/bltB0(9)}
Ga0_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,8,0)} 0 {bltA0(9)/bltB0(10)}
Ga0_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,9,0)} 0 {bltA0(10)/bltB0(11)}
Ga0_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,10,0)} 0 {bltA0(11)/bltB0(12)}
Ga0_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,11,0)} 0 {bltA0(12)/bltB0(13)}
Ga0_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,12,0)} 0 {bltA0(13)/bltB0(14)}
Ga0_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,13,0)} 0 {bltA0(14)/bltB0(15)}
Ga0_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,14,0)} 0 {bltA0(15)/bltB0(16)}
Ga0_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,15,0)} 0 {bltA0(16)/bltB0(17)}
*** A1[n]
Ga1_1 0 1 101 0 {bltA1(1)/bltB0(2)}
Ga1_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,201,0)} 0 {bltA1(2)/bltB0(3)}
Ga1_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,301,0)} 0 {bltA1(3)/bltB0(4)}
Ga1_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,401,0)} 0 {bltA1(4)/bltB0(5)}
Ga1_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,501,0)} 0 {bltA1(5)/bltB0(6)}
Ga1_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,601,0)} 0 {bltA1(6)/bltB0(7)}
Ga1_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,701,0)} 0 {bltA1(7)/bltB0(8)}
Ga1_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,801,0)} 0 {bltA1(8)/bltB0(9)}
Ga1_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,901,0)} 0 {bltA1(9)/bltB0(10)}
Ga1_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1001,0)} 0 {bltA1(10)/bltB0(11)}
Ga1_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1101,0)} 0 {bltA1(11)/bltB0(12)}
Ga1_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1201,0)} 0 {bltA1(12)/bltB0(13)}
Ga1_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1301,0)} 0 {bltA1(13)/bltB0(14)}
Ga1_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1401,0)} 0 {bltA1(14)/bltB0(15)}
Ga1_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1501,0)} 0 {bltA1(15)/bltB0(16)}
Ga1_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1601,0)} 0 {bltA1(16)/bltB0(17)}
*** A2[n]
Ga2_1 0 1 102 0 {bltA2(1)/bltB0(2)}
Ga2_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,202,0)} 0 {bltA2(2)/bltB0(3)}
Ga2_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,302,0)} 0 {bltA2(3)/bltB0(4)}
Ga2_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,402,0)} 0 {bltA2(4)/bltB0(5)}
Ga2_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,502,0)} 0 {bltA2(5)/bltB0(6)}
Ga2_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,602,0)} 0 {bltA2(6)/bltB0(7)}
Ga2_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,702,0)} 0 {bltA2(7)/bltB0(8)}
Ga2_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,802,0)} 0 {bltA2(8)/bltB0(9)}
Ga2_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,902,0)} 0 {bltA2(9)/bltB0(10)}
Ga2_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1002,0)} 0 {bltA2(10)/bltB0(11)}
Ga2_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1102,0)} 0 {bltA2(11)/bltB0(12)}
Ga2_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1202,0)} 0 {bltA2(12)/bltB0(13)}
Ga2_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1302,0)} 0 {bltA2(13)/bltB0(14)}
Ga2_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1402,0)} 0 {bltA2(14)/bltB0(15)}
Ga2_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1502,0)} 0 {bltA2(15)/bltB0(16)}
Ga2_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1602,0)} 0 {bltA2(16)/bltB0(17)}
***A3[n]
Ga3_1 0 {bpbs} {if(bpbs,103,0)} 0 {bltA3(1)/bltB0(2)}
Ga3_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,203,0)} 0 {bltA3(2)/bltB0(3)}
Ga3_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,303,0)} 0 {bltA3(3)/bltB0(4)}
Ga3_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,403,0)} 0 {bltA3(4)/bltB0(5)}
Ga3_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,503,0)} 0 {bltA3(5)/bltB0(6)}
Ga3_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,603,0)} 0 {bltA3(6)/bltB0(7)}
Ga3_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,703,0)} 0 {bltA3(7)/bltB0(8)}
Ga3_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,803,0)} 0 {bltA3(8)/bltB0(9)}
Ga3_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,903,0)} 0 {bltA3(9)/bltB0(10)}
Ga3_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1003,0)} 0 {bltA3(10)/bltB0(11)}
Ga3_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1103,0)} 0 {bltA3(11)/bltB0(12)}
Ga3_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1203,0)} 0 {bltA3(12)/bltB0(13)}
Ga3_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1303,0)} 0 {bltA3(13)/bltB0(14)}
Ga3_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1403,0)} 0 {bltA3(14)/bltB0(15)}
Ga3_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1503,0)} 0 {bltA3(15)/bltB0(16)}
Ga3_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1603,0)} 0 {bltA3(16)/bltB0(17)}
***A4[n]
Ga4_1 0 {bpbs} {if(bpbs,104,0)} 0 {bltA4(1)/bltB0(2)}
Ga4_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,204,0)} 0 {bltA4(2)/bltB0(3)}
Ga4_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,304,0)} 0 {bltA4(3)/bltB0(4)}
Ga4_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,404,0)} 0 {bltA4(4)/bltB0(5)}
Ga4_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,504,0)} 0 {bltA4(5)/bltB0(6)}
Ga4_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,604,0)} 0 {bltA4(6)/bltB0(7)}
Ga4_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,704,0)} 0 {bltA4(7)/bltB0(8)}
Ga4_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,804,0)} 0 {bltA4(8)/bltB0(9)}
Ga4_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,904,0)} 0 {bltA4(9)/bltB0(10)}
Ga4_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1004,0)} 0 {bltA4(10)/bltB0(11)}
Ga4_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1104,0)} 0 {bltA4(11)/bltB0(12)}
Ga4_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1204,0)} 0 {bltA4(12)/bltB0(13)}
Ga4_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1304,0)} 0 {bltA4(13)/bltB0(14)}
Ga4_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1404,0)} 0 {bltA4(14)/bltB0(15)}
Ga4_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1504,0)} 0 {bltA4(15)/bltB0(16)}
Ga4_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1604,0)} 0 {bltA4(16)/bltB0(17)}
*** z^-1
Oz1_1 667 0 101 0 Z-1
Oz1_2 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} 0 Z-1
Oz1_3 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} 0 Z-1
Oz1_4 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} 0 Z-1
Oz1_5 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} 0 Z-1
Oz1_6 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} 0 Z-1
Oz1_7 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} 0 Z-1
Oz1_8 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} 0 Z-1
Oz1_9 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} 0 Z-1
Oz1_10 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} 0 Z-1
Oz1_11 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} 0 Z-1
Oz1_12 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} 0 Z-1
Oz1_13 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} 0 Z-1
Oz1_14 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} 0 Z-1
Oz1_15 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} 0 Z-1
Oz1_16 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} 0 Z-1
*** z^-2
Oz2_1 101 0 102 0 Z-1
Oz2_2 {if(2<=nodopt,201,0)} 0 {if(2<=nodopt,202,0)} 0 Z-1
Oz2_3 {if(3<=nodopt,301,0)} 0 {if(3<=nodopt,302,0)} 0 Z-1
Oz2_4 {if(4<=nodopt,401,0)} 0 {if(4<=nodopt,402,0)} 0 Z-1
Oz2_5 {if(5<=nodopt,501,0)} 0 {if(5<=nodopt,502,0)} 0 Z-1
Oz2_6 {if(6<=nodopt,601,0)} 0 {if(6<=nodopt,602,0)} 0 Z-1
Oz2_7 {if(7<=nodopt,701,0)} 0 {if(7<=nodopt,702,0)} 0 Z-1
Oz2_8 {if(8<=nodopt,801,0)} 0 {if(8<=nodopt,802,0)} 0 Z-1
Oz2_9 {if(9<=nodopt,901,0)} 0 {if(9<=nodopt,902,0)} 0 Z-1
Oz2_10 {if(10<=nodopt,1001,0)} 0 {if(10<=nodopt,1002,0)} 0 Z-1
Oz2_11 {if(11<=nodopt,1101,0)} 0 {if(11<=nodopt,1102,0)} 0 Z-1
Oz2_12 {if(12<=nodopt,1201,0)} 0 {if(12<=nodopt,1202,0)} 0 Z-1
Oz2_13 {if(13<=nodopt,1301,0)} 0 {if(13<=nodopt,1302,0)} 0 Z-1
Oz2_14 {if(14<=nodopt,1401,0)} 0 {if(14<=nodopt,1402,0)} 0 Z-1
Oz2_15 {if(15<=nodopt,1501,0)} 0 {if(15<=nodopt,1502,0)} 0 Z-1
Oz2_16 {if(16<=nodopt,1601,0)} 0 {if(16<=nodopt,1602,0)} 0 Z-1
*** z^-3
Oz3_1 {if(bpbs,102,0)} 0 {if(bpbs,103,0)} 0 Z-1
Oz3_2 {if(bpbs&2<=nodopt,202,0)} 0 {if(bpbs&2<=nodopt,203,0)} 0 Z-1
Oz3_3 {if(bpbs&3<=nodopt,302,0)} 0 {if(bpbs&3<=nodopt,303,0)} 0 Z-1
Oz3_4 {if(bpbs&4<=nodopt,402,0)} 0 {if(bpbs&4<=nodopt,403,0)} 0 Z-1
Oz3_5 {if(bpbs&5<=nodopt,502,0)} 0 {if(bpbs&5<=nodopt,503,0)} 0 Z-1
Oz3_6 {if(bpbs&6<=nodopt,602,0)} 0 {if(bpbs&6<=nodopt,603,0)} 0 Z-1
Oz3_7 {if(bpbs&7<=nodopt,702,0)} 0 {if(bpbs&7<=nodopt,703,0)} 0 Z-1
Oz3_8 {if(bpbs&8<=nodopt,802,0)} 0 {if(bpbs&8<=nodopt,803,0)} 0 Z-1
Oz3_9 {if(bpbs&9<=nodopt,902,0)} 0 {if(bpbs&9<=nodopt,903,0)} 0 Z-1
Oz3_10 {if(bpbs&10<=nodopt,1002,0)} 0 {if(bpbs&10<=nodopt,1003,0)} 0 Z-1
Oz3_11 {if(bpbs&11<=nodopt,1102,0)} 0 {if(bpbs&11<=nodopt,1103,0)} 0 Z-1
Oz3_12 {if(bpbs&12<=nodopt,1202,0)} 0 {if(bpbs&12<=nodopt,1203,0)} 0 Z-1
Oz3_13 {if(bpbs&13<=nodopt,1302,0)} 0 {if(bpbs&13<=nodopt,1303,0)} 0 Z-1
Oz3_14 {if(bpbs&14<=nodopt,1402,0)} 0 {if(bpbs&14<=nodopt,1403,0)} 0 Z-1
Oz3_15 {if(bpbs&15<=nodopt,1502,0)} 0 {if(bpbs&15<=nodopt,1503,0)} 0 Z-1
Oz3_16 {if(bpbs&16<=nodopt,1602,0)} 0 {if(bpbs&16<=nodopt,1603,0)} 0 Z-1
*** z^-4
Oz4_1 {if(bpbs,103,0)} 0 {if(bpbs,104,0)} 0 Z-1
Oz4_2 {if(bpbs&2<=nodopt,203,0)} 0 {if(bpbs&2<=nodopt,204,0)} 0 Z-1
Oz4_3 {if(bpbs&3<=nodopt,303,0)} 0 {if(bpbs&3<=nodopt,304,0)} 0 Z-1
Oz4_4 {if(bpbs&4<=nodopt,403,0)} 0 {if(bpbs&4<=nodopt,404,0)} 0 Z-1
Oz4_5 {if(bpbs&5<=nodopt,503,0)} 0 {if(bpbs&5<=nodopt,504,0)} 0 Z-1
Oz4_6 {if(bpbs&6<=nodopt,603,0)} 0 {if(bpbs&6<=nodopt,604,0)} 0 Z-1
Oz4_7 {if(bpbs&7<=nodopt,703,0)} 0 {if(bpbs&7<=nodopt,704,0)} 0 Z-1
Oz4_8 {if(bpbs&8<=nodopt,803,0)} 0 {if(bpbs&8<=nodopt,804,0)} 0 Z-1
Oz4_9 {if(bpbs&9<=nodopt,903,0)} 0 {if(bpbs&9<=nodopt,904,0)} 0 Z-1
Oz4_10 {if(bpbs&10<=nodopt,1003,0)} 0 {if(bpbs&10<=nodopt,1004,0)} 0 Z-1
Oz4_11 {if(bpbs&11<=nodopt,1103,0)} 0 {if(bpbs&11<=nodopt,1104,0)} 0 Z-1
Oz4_12 {if(bpbs&12<=nodopt,1203,0)} 0 {if(bpbs&12<=nodopt,1204,0)} 0 Z-1
Oz4_13 {if(bpbs&13<=nodopt,1303,0)} 0 {if(bpbs&13<=nodopt,1304,0)} 0 Z-1
Oz4_14 {if(bpbs&14<=nodopt,1403,0)} 0 {if(bpbs&14<=nodopt,1404,0)} 0 Z-1
Oz4_15 {if(bpbs&15<=nodopt,1503,0)} 0 {if(bpbs&15<=nodopt,1504,0)} 0 Z-1
Oz4_16 {if(bpbs&16<=nodopt,1603,0)} 0 {if(bpbs&16<=nodopt,1604,0)} 0 Z-1
.model z-1 ltra l={1/absf0} c={1/absf0} lininterp
*** (l)tline terminations
R1 {if(lphp,102,104)} 0 1
R2 {if(2<=nodopt,if(lphp,202,204),0)} 0 1
R3 {if(3<=nodopt,if(lphp,302,304),0)} 0 1
R4 {if(4<=nodopt,if(lphp,402,404),0)} 0 1
R5 {if(5<=nodopt,if(lphp,502,504),0)} 0 1
R6 {if(6<=nodopt,if(lphp,602,604),0)} 0 1
R7 {if(7<=nodopt,if(lphp,702,704),0)} 0 1
R8 {if(8<=nodopt,if(lphp,802,804),0)} 0 1
R9 {if(9<=nodopt,if(lphp,902,904),0)} 0 1
R10 {if(10<=nodopt,if(lphp,1002,1004),0)} 0 1
R11 {if(11<=nodopt,if(lphp,1102,1104),0)} 0 1
R12 {if(12<=nodopt,if(lphp,1202,1204),0)} 0 1
R13 {if(13<=nodopt,if(lphp,1302,1304),0)} 0 1
R14 {if(14<=nodopt,if(lphp,1402,1404),0)} 0 1
R15 {if(15<=nodopt,if(lphp,1502,1504),0)} 0 1
R16 {if(16<=nodopt,if(lphp,1602,1604),0)} 0 1
*** end chain resistor
Rx 0 {nodopt} 1
*** buffered output
Gout GROUND out {nodopt} 0 {G/if(nT==-1&evenN&u(case),sqrt(1+epsilon_p**-2),1)}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Va_tran 0.2 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltA0(1)} 0.9 {bltA0(1)}
+ 1.1 {bltA0(2)} 1.9 {bltA0(2)}
+ 2.1 {bltA0(3)} 2.9 {bltA0(3)}
+ 3.1 {bltA0(4)} 3.9 {bltA0(4)}
+ 4.1 {bltA0(5)} 4.9 {bltA0(5)}
+ 5.1 {bltA0(6)} 5.9 {bltA0(6)}
+ 6.1 {bltA0(7)} 6.9 {bltA0(7)}
+ 7.1 {bltA0(8)} 7.9 {bltA0(8)}
+ 8.1 {bltA0(9)} 8.9 {bltA0(9)}
+ 9.1 {bltA0(10)} 9.9 {bltA0(10)}
+ 10.1 {bltA0(11)} 10.9 {bltA0(11)}
+ 11.1 {bltA0(12)} 11.9 {bltA0(12)}
+ 12.1 {bltA0(13)} 12.9 {bltA0(13)}
+ 13.1 {bltA0(14)} 13.9 {bltA0(14)}
+ 14.1 {bltA0(15)} 14.9 {bltA0(15)}
+ 15.1 {bltA0(16)} 15.9 {bltA0(16)}
+ 16.1 {bltA1(1)} 16.9 {bltA1(1)}
+ 17.1 {bltA1(2)} 17.9 {bltA1(2)}
+ 18.1 {bltA1(3)} 18.9 {bltA1(3)}
+ 19.1 {bltA1(4)} 19.9 {bltA1(4)}
+ 20.1 {bltA1(5)} 20.9 {bltA1(5)}
+ 21.1 {bltA1(6)} 21.9 {bltA1(6)}
+ 22.1 {bltA1(7)} 22.9 {bltA1(7)}
+ 23.1 {bltA1(8)} 23.9 {bltA1(8)}
+ 24.1 {bltA1(9)} 24.9 {bltA1(9)}
+ 25.1 {bltA1(10)} 25.9 {bltA1(10)}
+ 26.1 {bltA1(11)} 26.9 {bltA1(11)}
+ 27.1 {bltA1(12)} 27.9 {bltA1(12)}
+ 28.1 {bltA1(13)} 28.9 {bltA1(13)}
+ 29.1 {bltA1(14)} 29.9 {bltA1(14)}
+ 30.1 {bltA1(15)} 30.9 {bltA1(15)}
+ 31.1 {bltA1(16)} 31.9 {bltA1(16)}
+ 32.1 {bltA2(1)} 32.9 {bltA2(1)}
+ 33.1 {bltA2(2)} 33.9 {bltA2(2)}
+ 34.1 {bltA2(3)} 34.9 {bltA2(3)}
+ 35.1 {bltA2(4)} 35.9 {bltA2(4)}
+ 36.1 {bltA2(5)} 36.9 {bltA2(5)}
+ 37.1 {bltA2(6)} 37.9 {bltA2(6)}
+ 38.1 {bltA2(7)} 38.9 {bltA2(7)}
+ 39.1 {bltA2(8)} 39.9 {bltA2(8)}
+ 40.1 {bltA2(9)} 40.9 {bltA2(9)}
+ 41.1 {bltA2(10)} 41.9 {bltA2(10)}
+ 42.1 {bltA2(11)} 42.9 {bltA2(11)}
+ 43.1 {bltA2(12)} 43.9 {bltA2(12)}
+ 44.1 {bltA2(13)} 44.9 {bltA2(13)}
+ 45.1 {bltA2(14)} 45.9 {bltA2(14)}
+ 46.1 {bltA2(15)} 46.9 {bltA2(15)}
+ 47.1 {bltA2(16)} 47.9 {bltA2(16)}
+ 48.1 {bltA3(1)} 48.9 {bltA3(1)}
+ 49.1 {bltA3(2)} 49.9 {bltA3(2)}
+ 50.1 {bltA3(3)} 50.9 {bltA3(3)}
+ 51.1 {bltA3(4)} 51.9 {bltA3(4)}
+ 52.1 {bltA3(5)} 52.9 {bltA3(5)}
+ 53.1 {bltA3(6)} 53.9 {bltA3(6)}
+ 54.1 {bltA3(7)} 54.9 {bltA3(7)}
+ 55.1 {bltA3(8)} 55.9 {bltA3(8)}
+ 56.1 {bltA3(9)} 56.9 {bltA3(9)}
+ 57.1 {bltA3(10)} 57.9 {bltA3(10)}
+ 58.1 {bltA3(11)} 58.9 {bltA3(11)}
+ 59.1 {bltA3(12)} 59.9 {bltA3(12)}
+ 60.1 {bltA3(13)} 60.9 {bltA3(13)}
+ 61.1 {bltA3(14)} 61.9 {bltA3(14)}
+ 62.1 {bltA3(15)} 62.9 {bltA3(15)}
+ 63.1 {bltA3(16)} 63.9 {bltA3(16)}
+ 64.1 {bltA4(1)} 64.9 {bltA4(1)}
+ 65.1 {bltA4(2)} 65.9 {bltA4(2)}
+ 66.1 {bltA4(3)} 66.9 {bltA4(3)}
+ 67.1 {bltA4(4)} 67.9 {bltA4(4)}
+ 68.1 {bltA4(5)} 68.9 {bltA4(5)}
+ 69.1 {bltA4(6)} 69.9 {bltA4(6)}
+ 70.1 {bltA4(7)} 70.9 {bltA4(7)}
+ 71.1 {bltA4(8)} 71.9 {bltA4(8)}
+ 72.1 {bltA4(9)} 72.9 {bltA4(9)}
+ 73.1 {bltA4(10)} 73.9 {bltA4(10)}
+ 74.1 {bltA4(11)} 74.9 {bltA4(11)}
+ 75.1 {bltA4(12)} 75.9 {bltA4(12)}
+ 76.1 {bltA4(13)} 76.9 {bltA4(13)}
+ 77.1 {bltA4(14)} 77.9 {bltA4(14)}
+ 78.1 {bltA4(15)} 78.9 {bltA4(15)}
+ 79.1 {bltA4(16)} 79.9 {bltA4(16)}
Vb_tran 0.3 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltB0(1)} 0.9 {bltB0(1)}
+ 1.1 {bltB0(2)} 1.9 {bltB0(2)}
+ 2.1 {bltB0(3)} 2.9 {bltB0(3)}
+ 3.1 {bltB0(4)} 3.9 {bltB0(4)}
+ 4.1 {bltB0(5)} 4.9 {bltB0(5)}
+ 5.1 {bltB0(6)} 5.9 {bltB0(6)}
+ 6.1 {bltB0(7)} 6.9 {bltB0(7)}
+ 7.1 {bltB0(8)} 7.9 {bltB0(8)}
+ 8.1 {bltB0(9)} 8.9 {bltB0(9)}
+ 9.1 {bltB0(10)} 9.9 {bltB0(10)}
+ 10.1 {bltB0(11)} 10.9 {bltB0(11)}
+ 11.1 {bltB0(12)} 11.9 {bltB0(12)}
+ 12.1 {bltB0(13)} 12.9 {bltB0(13)}
+ 13.1 {bltB0(14)} 13.9 {bltB0(14)}
+ 14.1 {bltB0(15)} 14.9 {bltB0(15)}
+ 15.1 {bltB0(16)} 15.9 {bltB0(16)}
+ 16.1 {bltB1(1)} 16.9 {bltB1(1)}
+ 17.1 {bltB1(2)} 17.9 {bltB1(2)}
+ 18.1 {bltB1(3)} 18.9 {bltB1(3)}
+ 19.1 {bltB1(4)} 19.9 {bltB1(4)}
+ 20.1 {bltB1(5)} 20.9 {bltB1(5)}
+ 21.1 {bltB1(6)} 21.9 {bltB1(6)}
+ 22.1 {bltB1(7)} 22.9 {bltB1(7)}
+ 23.1 {bltB1(8)} 23.9 {bltB1(8)}
+ 24.1 {bltB1(9)} 24.9 {bltB1(9)}
+ 25.1 {bltB1(10)} 25.9 {bltB1(10)}
+ 26.1 {bltB1(11)} 26.9 {bltB1(11)}
+ 27.1 {bltB1(12)} 27.9 {bltB1(12)}
+ 28.1 {bltB1(13)} 28.9 {bltB1(13)}
+ 29.1 {bltB1(14)} 29.9 {bltB1(14)}
+ 30.1 {bltB1(15)} 30.9 {bltB1(15)}
+ 31.1 {bltB1(16)} 31.9 {bltB1(16)}
+ 32.1 {bltB2(1)} 32.9 {bltB2(1)}
+ 33.1 {bltB2(2)} 33.9 {bltB2(2)}
+ 34.1 {bltB2(3)} 34.9 {bltB2(3)}
+ 35.1 {bltB2(4)} 35.9 {bltB2(4)}
+ 36.1 {bltB2(5)} 36.9 {bltB2(5)}
+ 37.1 {bltB2(6)} 37.9 {bltB2(6)}
+ 38.1 {bltB2(7)} 38.9 {bltB2(7)}
+ 39.1 {bltB2(8)} 39.9 {bltB2(8)}
+ 40.1 {bltB2(9)} 40.9 {bltB2(9)}
+ 41.1 {bltB2(10)} 41.9 {bltB2(10)}
+ 42.1 {bltB2(11)} 42.9 {bltB2(11)}
+ 43.1 {bltB2(12)} 43.9 {bltB2(12)}
+ 44.1 {bltB2(13)} 44.9 {bltB2(13)}
+ 45.1 {bltB2(14)} 45.9 {bltB2(14)}
+ 46.1 {bltB2(15)} 46.9 {bltB2(15)}
+ 47.1 {bltB2(16)} 47.9 {bltB2(16)}
+ 48.1 {bltB3(1)} 48.9 {bltB3(1)}
+ 49.1 {bltB3(2)} 49.9 {bltB3(2)}
+ 50.1 {bltB3(3)} 50.9 {bltB3(3)}
+ 51.1 {bltB3(4)} 51.9 {bltB3(4)}
+ 52.1 {bltB3(5)} 52.9 {bltB3(5)}
+ 53.1 {bltB3(6)} 53.9 {bltB3(6)}
+ 54.1 {bltB3(7)} 54.9 {bltB3(7)}
+ 55.1 {bltB3(8)} 55.9 {bltB3(8)}
+ 56.1 {bltB3(9)} 56.9 {bltB3(9)}
+ 57.1 {bltB3(10)} 57.9 {bltB3(10)}
+ 58.1 {bltB3(11)} 58.9 {bltB3(11)}
+ 59.1 {bltB3(12)} 59.9 {bltB3(12)}
+ 60.1 {bltB3(13)} 60.9 {bltB3(13)}
+ 61.1 {bltB3(14)} 61.9 {bltB3(14)}
+ 62.1 {bltB3(15)} 62.9 {bltB3(15)}
+ 63.1 {bltB3(16)} 63.9 {bltB3(16)}
+ 64.1 {bltB4(1)} 64.9 {bltB4(1)}
+ 65.1 {bltB4(2)} 65.9 {bltB4(2)}
+ 66.1 {bltB4(3)} 66.9 {bltB4(3)}
+ 67.1 {bltB4(4)} 67.9 {bltB4(4)}
+ 68.1 {bltB4(5)} 68.9 {bltB4(5)}
+ 69.1 {bltB4(6)} 69.9 {bltB4(6)}
+ 70.1 {bltB4(7)} 70.9 {bltB4(7)}
+ 71.1 {bltB4(8)} 71.9 {bltB4(8)}
+ 72.1 {bltB4(9)} 72.9 {bltB4(9)}
+ 73.1 {bltB4(10)} 73.9 {bltB4(10)}
+ 74.1 {bltB4(11)} 74.9 {bltB4(11)}
+ 75.1 {bltB4(12)} 75.9 {bltB4(12)}
+ 76.1 {bltB4(13)} 76.9 {bltB4(13)}
+ 77.1 {bltB4(14)} 77.9 {bltB4(14)}
+ 78.1 {bltB4(15)} 78.9 {bltB4(15)}
+ 79.1 {bltB4(16)} 79.9 {bltB4(16)}
.ends Chebyshev_IIR
****************************************
*
*	Chebyshev type II, IIR
*
****************************************
*
* Parameters: SH, f0, fc, BWp, BWs, G, Asc, As, N
*   (optional: sim, tr, td)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
* [NOTES]
*
* - If Asc>=As when N=0, {As} will be considered.
*
********************************
.subckt InvChebyshev_IIR IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sim=1 SH=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 As=80 N=0
+ tr=1m/absf0 td=0
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2)) absf0=abs(f0)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2)
+ oddCase=par(case+1) evenCase=inv(oddCase) oddN=par(Order+1) evenN=inv(oddN)
+ low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4) lphp=(case<=2) bpbs=inv(lphp)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, 1+(BWp>BWs), 3+(BWp>BWs))
+ epsilon_sc=if(Asc>0,sqrt(10**(Asc/10)-1),sqrt(10**(As/10)-1)/cosh(N*acosh(ratio)))
+ epsilon_s=if(As>0,sqrt(10**(As/10)-1),sqrt(10**(Asc/10)-1)*cosh(N*acosh(ratio)))
+ fpass1=if(lphp,BWp,(sqrt(BWp**2+4*fc**2)-BWp)/2) fpass2=if(lphp,0,(sqrt(BWp**2+4*fc**2)+BWp)/2)
+ fstop1=if(lphp,BWs,(sqrt(BWs**2+4*fc**2)-BWs)/2) fpz=tan(pi*fpass1/absf0) fsz=tan(pi/absf0*fstop1)
+ wp1=2*pi*fpass1/absf0 wp2=2*pi*fpass2/absf0
+ wscale=cosh(acosh(epsilon_s/epsilon_sc)/Order) ratio=max(fpz/fsz,fsz/fpz)
+ Order=if(N==0,ceil(acosh(epsilon_s/epsilon_sc**(Asc<As))/acosh(ratio)/(1+bpbs)),N)
*** real and imaginary parts of the poles/zeros
.func denom(x) {(cos((2*x-1)*pi/Order)+cosh(2*asinh(epsilon_s)/Order))/(wscale*2)}
.func real(x) {sin((2*x-1)*pi/2/Order)*sinh(asinh(epsilon_s)/Order)/denom(x)*fpz}
.func imag(x) {cos((2*x-1)*pi/2/Order)*cosh(asinh(epsilon_s)/Order)/denom(x)*fpz}
.func zero(x) {wscale/cos((2*x-1)*pi/2/Order)*fpz}
*** transfer function terms
.func a2(x) {inv(x==N21)}
.func xa0(x) {if(x==N21, real(x), zero(x))**2}
.func b2(x) {inv(x==N21)}
.func xb1(x) {if(x==N21,1,2*real(x))}
.func xb0(x) {if(x==N21,real(x),real(x)**2+imag(x)**2)}
*** precalculate these to reduce function unravelling...
.param b01=xb0(1) b11=xb1(1) a01=xa0(1)
+ b02=xb0(2) b12=xb1(2) a02=xa0(2)
+ b03=xb0(3) b13=xb1(3) a03=xa0(3)
+ b04=xb0(4) b14=xb1(4) a04=xa0(4)
+ b05=xb0(5) b15=xb1(5) a05=xa0(5)
+ b06=xb0(6) b16=xb1(6) a06=xa0(6)
+ b07=xb0(7) b17=xb1(7) a07=xa0(7)
+ b08=xb0(8) b18=xb1(8) a08=xa0(8)
+ b09=xb0(9) b19=xb1(9) a09=xa0(9)
+ b010=xb0(10) b110=xb1(10) a010=xa0(10)
+ b011=xb0(11) b111=xb1(11) a011=xa0(11)
+ b012=xb0(12) b112=xb1(12) a012=xa0(12)
+ b013=xb0(13) b113=xb1(13) a013=xa0(13)
+ b014=xb0(14) b114=xb1(14) a014=xa0(14)
+ b015=xb0(15) b115=xb1(15) a015=xa0(15)
+ b016=xb0(16) b116=xb1(16) a016=xa0(16)
*** ...and make new functions out of them. It helps significantly.
.func b0(x) {table(min(x,nodopt), 1, b01, 2, b02, 3, b03, 4, b04,
+ 5, b05, 6, b06, 7, b07, 8, b08, 9, b09, 10, b010, 11, b011,
+ 12, b012, 13, b013, 14, b014, 15, b015, 16, b016)}
.func b1(x) {table(min(x,nodopt), 1, b11, 2, b12, 3, b13, 4, b14, 5, b15,
+ 6, b16, 7, b17, 8, b18, 9, b19, 10, b110, 11, b111, 12, b112, 13, b113,
+ 14, b114, 15, b115, 16, b116)}
.func a0(x) {table(min(x,nodopt), 1, a01, 2, a02, 3, a03, 4, a04, 5, a05,
+ 6, a06, 7, a07, 8, a08, 9, a09, 10, a010, 11, a011, 12, a012, 13, a013,
+ 14, a014, 15, a015, 16, a016)}
*** bilinear transform for LP
.func blp0(x) {b2(x)+b1(x)+b0(x)}
.func blp1(x) {2*(b0(x)-b2(x))}
.func blp2(x) {b2(x)-b1(x)+b0(x)}
.func alp0(x) {a2(x)+a0(x)}
.func alp1(x) {2*(a0(x)-a2(x))}
.func alp2(x) {a2(x)+a0(x)}
*** spectral transformations
.parma alpha=if(lphp, -cos(wp1), cos((wp2+wp1)/2)/cos((wp2-wp1)/2) )
+ beta=tan(wp1/2)*if(bandpass, 1/tan((wp2-wp1)/2), tan((wp2-wp1)/2) )
* highpass
.func bhp0(x) {blp2(x)*alpha**2 - blp1(x)*alpha + blp0(x)}
.func bhp1(x) {-(alpha**2 + 1)*blp1(x) + 2*(blp2(x) + blp0(x))*alpha}
.func bhp2(x) {blp0(x)*alpha**2 - blp1(x)*alpha + blp2(x)}
.func ahp0(x) {alp2(x)*alpha**2 - alp1(x)*alpha + alp0(x)}
.func ahp1(x) {-alp1(x)*alpha**2 + 2*(alp2(x) + alp0(x))*alpha - alp1(x)}
.func ahp2(x) {alp0(x)*alpha**2 - alp1(x)*alpha + alp2(x)}
* bandpass
.func bbp0(x) {(beta**2-2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2+2*beta+1)*blp0(x)}
.func bbp1(x) {4*alpha*beta*((1-beta)*blp2(x)+beta*blp1(x)+(-beta-1)*blp0(x))}
.func bbp2(x) {((4*alpha**2+2)*beta**2-2)*(blp2(x)+blp0(x))-((4*alpha**2+2)*beta**2+2)*blp1(x)}
.func bbp3(x) {4*alpha*beta*((-blp2(x)+blp1(x)-blp0(x))*beta+blp0(x)-blp2(x))}
.func bbp4(x) {(beta**2+2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2-2*beta+1)*blp0(x)}
.func abp0(x) {(beta**2-2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2+2*beta+1)*alp0(x)}
.func abp1(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp2(x)-alp0(x))}
.func abp2(x) {((4*alpha**2+2)*beta**2-2)*(alp2(x)+alp0(x))-((4*alpha**2+2)*beta**2+2)*alp1(x)}
.func abp3(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp0(x)-alp2(x))}
.func abp4(x) {(beta**2+2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2-2*beta+1)*alp0(x)}
* bandstop
.func bbs0(x) {bbp0(x)}
.func bbs1(x) {4*alpha*((blp2(x)-blp0(x))*beta-blp2(x)-blp1(x)-blp0(x))}
.func bbs2(x) {2*((-blp2(x)+blp1(x)-blp0(x))*beta**2+(blp2(x)+blp1(x)+blp0(x))*(2*alpha**2+1))}
.func bbs3(x) {4*alpha*((blp0(x)-blp2(x))*beta-(blp2(x)+blp1(x)+blp0(x)))}
.func bbs4(x) {bbp4(x)}
.func abs0(x) {abp0(x)}
.func abs1(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs2(x) {2*((-alp2(x)+alp1(x)-alp0(x))*beta**2+(alp2(x)+alp1(x)+alp0(x))*(2*alpha**2+1))}
.func abs3(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs4(x) {abp4(x)}
*** case selection
.func bltB0(x) {if(x<=nodopt,if(low,blp0(x),if(high,bhp0(x),if(bandpass,bbp0(x),bbs0(x)))),1)}
.func bltB1(x) {if(low,blp1(x),if(high,bhp1(x),if(bandpass,bbp1(x),bbs1(x))))}
.func bltB2(x) {if(low,blp2(x),if(high,bhp2(x),if(bandpass,bbp2(x),bbs2(x))))}
.func bltB3(x) {if(lphp,0,if(bandpass,bbp3(x),bbs3(x)))}
.func bltB4(x) {if(lphp,0,if(bandpass,bbp4(x),bbs4(x)))}
.func bltA0(x) {if(low,alp0(x),if(high,ahp0(x),if(bandpass,abp0(x),abs0(x))))}
.func bltA1(x) {if(low,alp1(x),if(high,ahp1(x),if(bandpass,abp1(x),abs1(x))))}
.func bltA2(x) {if(low,alp2(x),if(high,ahp2(x),if(bandpass,abp2(x),abs2(x))))}
.func bltA3(x) {if(lphp,0,if(bandpass,abp3(x),abs3(x)))}
.func bltA4(x) {if(lphp,0,if(bandpass,abp4(x),abs4(x)))}
*** buffered input
Gin 0 999 in GROUND 1
Rin 999 0 1
*** S&H input
Vbypass {inv(SH)*999} {inv(SH)*666}
Ash {SH*999} 0 {SH*0.4} 0 0 0 {SH*666} 0 SAMPLEHOLD Vhigh=1g Vlow=-1g
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** normalizing B0[n]
Gb0_1 0 667 666 0 {1/bltB0(1)}
*** B1[n]
Gb1_1 0 667 0 101 {bltB1(1)/bltB0(1)}
Gb1_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} {bltB1(2)/bltB0(2)}
Gb1_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} {bltB1(3)/bltB0(3)}
Gb1_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} {bltB1(4)/bltB0(4)}
Gb1_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} {bltB1(5)/bltB0(5)}
Gb1_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} {bltB1(6)/bltB0(6)}
Gb1_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} {bltB1(7)/bltB0(7)}
Gb1_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} {bltB1(8)/bltB0(8)}
Gb1_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} {bltB1(9)/bltB0(9)}
Gb1_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} {bltB1(10)/bltB0(10)}
Gb1_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} {bltB1(11)/bltB0(11)}
Gb1_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} {bltB1(12)/bltB0(12)}
Gb1_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} {bltB1(13)/bltB0(13)}
Gb1_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} {bltB1(14)/bltB0(14)}
Gb1_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} {bltB1(15)/bltB0(15)}
Gb1_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} {bltB1(16)/bltB0(16)}
*** B2[n]
Gb2_1 0 667 0 102 {bltB2(1)/bltB0(1)}
Gb2_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,202,0)} {bltB2(2)/bltB0(2)}
Gb2_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,302,0)} {bltB2(3)/bltB0(3)}
Gb2_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,402,0)} {bltB2(4)/bltB0(4)}
Gb2_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,502,0)} {bltB2(5)/bltB0(5)}
Gb2_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,602,0)} {bltB2(6)/bltB0(6)}
Gb2_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,702,0)} {bltB2(7)/bltB0(7)}
Gb2_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,802,0)} {bltB2(8)/bltB0(8)}
Gb2_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,902,0)} {bltB2(9)/bltB0(9)}
Gb2_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1002,0)} {bltB2(10)/bltB0(10)}
Gb2_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1102,0)} {bltB2(11)/bltB0(11)}
Gb2_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1202,0)} {bltB2(12)/bltB0(12)}
Gb2_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1302,0)} {bltB2(13)/bltB0(13)}
Gb2_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1402,0)} {bltB2(14)/bltB0(14)}
Gb2_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1502,0)} {bltB2(15)/bltB0(15)}
Gb2_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1602,0)} {bltB2(16)/bltB0(16)}
*** B3[n]
Gb3_1 0 {if(bpbs,667,0)} 0 {if(bpbs,103,0)} {bltB3(1)/bltB0(1)}
Gb3_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,203,0)} {bltB3(2)/bltB0(2)}
Gb3_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,303,0)} {bltB3(3)/bltB0(3)}
Gb3_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,403,0)} {bltB3(4)/bltB0(4)}
Gb3_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,503,0)} {bltB3(5)/bltB0(5)}
Gb3_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,603,0)} {bltB3(6)/bltB0(6)}
Gb3_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,703,0)} {bltB3(7)/bltB0(7)}
Gb3_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,803,0)} {bltB3(8)/bltB0(8)}
Gb3_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,903,0)} {bltB3(9)/bltB0(9)}
Gb3_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1003,0)} {bltB3(10)/bltB0(10)}
Gb3_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1103,0)} {bltB3(11)/bltB0(11)}
Gb3_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1203,0)} {bltB3(12)/bltB0(12)}
Gb3_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1303,0)} {bltB3(13)/bltB0(13)}
Gb3_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1403,0)} {bltB3(14)/bltB0(14)}
Gb3_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1503,0)} {bltB3(15)/bltB0(15)}
Gb3_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1603,0)} {bltB3(16)/bltB0(16)}
*** B4[n]
Gb4_1 0 {if(bpbs,667,0)} 0 {if(bpbs,104,0)} {bltB4(1)/bltB0(1)}
Gb4_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,204,0)} {bltB4(2)/bltB0(2)}
Gb4_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,304,0)} {bltB4(3)/bltB0(3)}
Gb4_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,404,0)} {bltB4(4)/bltB0(4)}
Gb4_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,504,0)} {bltB4(5)/bltB0(5)}
Gb4_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,604,0)} {bltB4(6)/bltB0(6)}
Gb4_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,704,0)} {bltB4(7)/bltB0(7)}
Gb4_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,804,0)} {bltB4(8)/bltB0(8)}
Gb4_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,904,0)} {bltB4(9)/bltB0(9)}
Gb4_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1004,0)} {bltB4(10)/bltB0(10)}
Gb4_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1104,0)} {bltB4(11)/bltB0(11)}
Gb4_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1204,0)} {bltB4(12)/bltB0(12)}
Gb4_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1304,0)} {bltB4(13)/bltB0(13)}
Gb4_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1404,0)} {bltB4(14)/bltB0(14)}
Gb4_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1504,0)} {bltB4(15)/bltB0(15)}
Gb4_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1604,0)} {bltB4(16)/bltB0(16)}
*** A0[n]
Ga0_1 0 1 667 0 {bltA0(1)/bltB0(2)*b01/a01}
Ga0_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,1,0)} 0 {bltA0(2)/bltB0(3)*b02/a02}
Ga0_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,2,0)} 0 {bltA0(3)/bltB0(4)*b03/a03}
Ga0_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,3,0)} 0 {bltA0(4)/bltB0(5)*b04/a04}
Ga0_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,4,0)} 0 {bltA0(5)/bltB0(6)*b05/a05}
Ga0_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,5,0)} 0 {bltA0(6)/bltB0(7)*b06/a06}
Ga0_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,6,0)} 0 {bltA0(7)/bltB0(8)*b07/a07}
Ga0_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,7,0)} 0 {bltA0(8)/bltB0(9)*b08/a08}
Ga0_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,8,0)} 0 {bltA0(9)/bltB0(10)*b09/a09}
Ga0_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,9,0)} 0 {bltA0(10)/bltB0(11)*b010/a010}
Ga0_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,10,0)} 0 {bltA0(11)/bltB0(12)*b011/a011}
Ga0_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,11,0)} 0 {bltA0(12)/bltB0(13)*b012/a012}
Ga0_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,12,0)} 0 {bltA0(13)/bltB0(14)*b013/a013}
Ga0_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,13,0)} 0 {bltA0(14)/bltB0(15)*b014/a014}
Ga0_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,14,0)} 0 {bltA0(15)/bltB0(16)*b015/a015}
Ga0_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,15,0)} 0 {bltA0(16)/bltB0(17)*b016/a016}
*** A1[n]
Ga1_1 0 1 101 0 {bltA1(1)/bltB0(2)*b01/a01}
Ga1_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,201,0)} 0 {bltA1(2)/bltB0(3)*b02/a02}
Ga1_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,301,0)} 0 {bltA1(3)/bltB0(4)*b03/a03}
Ga1_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,401,0)} 0 {bltA1(4)/bltB0(5)*b04/a04}
Ga1_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,501,0)} 0 {bltA1(5)/bltB0(6)*b05/a05}
Ga1_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,601,0)} 0 {bltA1(6)/bltB0(7)*b06/a06}
Ga1_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,701,0)} 0 {bltA1(7)/bltB0(8)*b07/a07}
Ga1_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,801,0)} 0 {bltA1(8)/bltB0(9)*b08/a08}
Ga1_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,901,0)} 0 {bltA1(9)/bltB0(10)*b09/a09}
Ga1_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1001,0)} 0 {bltA1(10)/bltB0(11)*b010/a010}
Ga1_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1101,0)} 0 {bltA1(11)/bltB0(12)*b011/a011}
Ga1_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1201,0)} 0 {bltA1(12)/bltB0(13)*b012/a012}
Ga1_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1301,0)} 0 {bltA1(13)/bltB0(14)*b013/a013}
Ga1_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1401,0)} 0 {bltA1(14)/bltB0(15)*b014/a014}
Ga1_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1501,0)} 0 {bltA1(15)/bltB0(16)*b015/a015}
Ga1_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1601,0)} 0 {bltA1(16)/bltB0(17)*b016/a016}
*** A2[n]
Ga2_1 0 1 102 0 {bltA2(1)/bltB0(2)*b01/a01}
Ga2_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,202,0)} 0 {bltA2(2)/bltB0(3)*b02/a02}
Ga2_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,302,0)} 0 {bltA2(3)/bltB0(4)*b03/a03}
Ga2_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,402,0)} 0 {bltA2(4)/bltB0(5)*b04/a04}
Ga2_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,502,0)} 0 {bltA2(5)/bltB0(6)*b05/a05}
Ga2_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,602,0)} 0 {bltA2(6)/bltB0(7)*b06/a06}
Ga2_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,702,0)} 0 {bltA2(7)/bltB0(8)*b07/a07}
Ga2_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,802,0)} 0 {bltA2(8)/bltB0(9)*b08/a08}
Ga2_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,902,0)} 0 {bltA2(9)/bltB0(10)*b09/a09}
Ga2_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1002,0)} 0 {bltA2(10)/bltB0(11)*b010/a010}
Ga2_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1102,0)} 0 {bltA2(11)/bltB0(12)*b011/a011}
Ga2_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1202,0)} 0 {bltA2(12)/bltB0(13)*b012/a012}
Ga2_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1302,0)} 0 {bltA2(13)/bltB0(14)*b013/a013}
Ga2_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1402,0)} 0 {bltA2(14)/bltB0(15)*b014/a014}
Ga2_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1502,0)} 0 {bltA2(15)/bltB0(16)*b015/a015}
Ga2_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1602,0)} 0 {bltA2(16)/bltB0(17)*b016/a016}
***A3[n]
Ga3_1 0 {bpbs} {if(bpbs,103,0)} 0 {bltA3(1)/bltB0(2)*b01/a01}
Ga3_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,203,0)} 0 {bltA3(2)/bltB0(3)*b02/a02}
Ga3_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,303,0)} 0 {bltA3(3)/bltB0(4)*b03/a03}
Ga3_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,403,0)} 0 {bltA3(4)/bltB0(5)*b04/a04}
Ga3_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,503,0)} 0 {bltA3(5)/bltB0(6)*b05/a05}
Ga3_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,603,0)} 0 {bltA3(6)/bltB0(7)*b06/a06}
Ga3_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,703,0)} 0 {bltA3(7)/bltB0(8)*b07/a07}
Ga3_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,803,0)} 0 {bltA3(8)/bltB0(9)*b08/a08}
Ga3_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,903,0)} 0 {bltA3(9)/bltB0(10)*b09/a09}
Ga3_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1003,0)} 0 {bltA3(10)/bltB0(11)*b010/a010}
Ga3_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1103,0)} 0 {bltA3(11)/bltB0(12)*b011/a011}
Ga3_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1203,0)} 0 {bltA3(12)/bltB0(13)*b012/a012}
Ga3_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1303,0)} 0 {bltA3(13)/bltB0(14)*b013/a013}
Ga3_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1403,0)} 0 {bltA3(14)/bltB0(15)*b014/a014}
Ga3_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1503,0)} 0 {bltA3(15)/bltB0(16)*b015/a015}
Ga3_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1603,0)} 0 {bltA3(16)/bltB0(17)*b016/a016}
***A4[n]
Ga4_1 0 {bpbs} {if(bpbs,104,0)} 0 {bltA4(1)/bltB0(2)*b01/a01}
Ga4_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,204,0)} 0 {bltA4(2)/bltB0(3)*b02/a02}
Ga4_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,304,0)} 0 {bltA4(3)/bltB0(4)*b03/a03}
Ga4_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,404,0)} 0 {bltA4(4)/bltB0(5)*b04/a04}
Ga4_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,504,0)} 0 {bltA4(5)/bltB0(6)*b05/a05}
Ga4_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,604,0)} 0 {bltA4(6)/bltB0(7)*b06/a06}
Ga4_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,704,0)} 0 {bltA4(7)/bltB0(8)*b07/a07}
Ga4_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,804,0)} 0 {bltA4(8)/bltB0(9)*b08/a08}
Ga4_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,904,0)} 0 {bltA4(9)/bltB0(10)*b09/a09}
Ga4_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1004,0)} 0 {bltA4(10)/bltB0(11)*b010/a010}
Ga4_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1104,0)} 0 {bltA4(11)/bltB0(12)*b011/a011}
Ga4_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1204,0)} 0 {bltA4(12)/bltB0(13)*b012/a012}
Ga4_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1304,0)} 0 {bltA4(13)/bltB0(14)*b013/a013}
Ga4_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1404,0)} 0 {bltA4(14)/bltB0(15)*b014/a014}
Ga4_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1504,0)} 0 {bltA4(15)/bltB0(16)*b015/a015}
Ga4_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1604,0)} 0 {bltA4(16)/bltB0(17)*b016/a016}
*** z^-1
Oz1_1 667 0 101 0 Z-1
Oz1_2 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} 0 Z-1
Oz1_3 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} 0 Z-1
Oz1_4 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} 0 Z-1
Oz1_5 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} 0 Z-1
Oz1_6 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} 0 Z-1
Oz1_7 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} 0 Z-1
Oz1_8 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} 0 Z-1
Oz1_9 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} 0 Z-1
Oz1_10 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} 0 Z-1
Oz1_11 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} 0 Z-1
Oz1_12 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} 0 Z-1
Oz1_13 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} 0 Z-1
Oz1_14 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} 0 Z-1
Oz1_15 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} 0 Z-1
Oz1_16 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} 0 Z-1
*** z^-2
Oz2_1 101 0 102 0 Z-1
Oz2_2 {if(2<=nodopt,201,0)} 0 {if(2<=nodopt,202,0)} 0 Z-1
Oz2_3 {if(3<=nodopt,301,0)} 0 {if(3<=nodopt,302,0)} 0 Z-1
Oz2_4 {if(4<=nodopt,401,0)} 0 {if(4<=nodopt,402,0)} 0 Z-1
Oz2_5 {if(5<=nodopt,501,0)} 0 {if(5<=nodopt,502,0)} 0 Z-1
Oz2_6 {if(6<=nodopt,601,0)} 0 {if(6<=nodopt,602,0)} 0 Z-1
Oz2_7 {if(7<=nodopt,701,0)} 0 {if(7<=nodopt,702,0)} 0 Z-1
Oz2_8 {if(8<=nodopt,801,0)} 0 {if(8<=nodopt,802,0)} 0 Z-1
Oz2_9 {if(9<=nodopt,901,0)} 0 {if(9<=nodopt,902,0)} 0 Z-1
Oz2_10 {if(10<=nodopt,1001,0)} 0 {if(10<=nodopt,1002,0)} 0 Z-1
Oz2_11 {if(11<=nodopt,1101,0)} 0 {if(11<=nodopt,1102,0)} 0 Z-1
Oz2_12 {if(12<=nodopt,1201,0)} 0 {if(12<=nodopt,1202,0)} 0 Z-1
Oz2_13 {if(13<=nodopt,1301,0)} 0 {if(13<=nodopt,1302,0)} 0 Z-1
Oz2_14 {if(14<=nodopt,1401,0)} 0 {if(14<=nodopt,1402,0)} 0 Z-1
Oz2_15 {if(15<=nodopt,1501,0)} 0 {if(15<=nodopt,1502,0)} 0 Z-1
Oz2_16 {if(16<=nodopt,1601,0)} 0 {if(16<=nodopt,1602,0)} 0 Z-1
*** z^-3
Oz3_1 {if(bpbs,102,0)} 0 {if(bpbs,103,0)} 0 Z-1
Oz3_2 {if(bpbs&2<=nodopt,202,0)} 0 {if(bpbs&2<=nodopt,203,0)} 0 Z-1
Oz3_3 {if(bpbs&3<=nodopt,302,0)} 0 {if(bpbs&3<=nodopt,303,0)} 0 Z-1
Oz3_4 {if(bpbs&4<=nodopt,402,0)} 0 {if(bpbs&4<=nodopt,403,0)} 0 Z-1
Oz3_5 {if(bpbs&5<=nodopt,502,0)} 0 {if(bpbs&5<=nodopt,503,0)} 0 Z-1
Oz3_6 {if(bpbs&6<=nodopt,602,0)} 0 {if(bpbs&6<=nodopt,603,0)} 0 Z-1
Oz3_7 {if(bpbs&7<=nodopt,702,0)} 0 {if(bpbs&7<=nodopt,703,0)} 0 Z-1
Oz3_8 {if(bpbs&8<=nodopt,802,0)} 0 {if(bpbs&8<=nodopt,803,0)} 0 Z-1
Oz3_9 {if(bpbs&9<=nodopt,902,0)} 0 {if(bpbs&9<=nodopt,903,0)} 0 Z-1
Oz3_10 {if(bpbs&10<=nodopt,1002,0)} 0 {if(bpbs&10<=nodopt,1003,0)} 0 Z-1
Oz3_11 {if(bpbs&11<=nodopt,1102,0)} 0 {if(bpbs&11<=nodopt,1103,0)} 0 Z-1
Oz3_12 {if(bpbs&12<=nodopt,1202,0)} 0 {if(bpbs&12<=nodopt,1203,0)} 0 Z-1
Oz3_13 {if(bpbs&13<=nodopt,1302,0)} 0 {if(bpbs&13<=nodopt,1303,0)} 0 Z-1
Oz3_14 {if(bpbs&14<=nodopt,1402,0)} 0 {if(bpbs&14<=nodopt,1403,0)} 0 Z-1
Oz3_15 {if(bpbs&15<=nodopt,1502,0)} 0 {if(bpbs&15<=nodopt,1503,0)} 0 Z-1
Oz3_16 {if(bpbs&16<=nodopt,1602,0)} 0 {if(bpbs&16<=nodopt,1603,0)} 0 Z-1
*** z^-4
Oz4_1 {if(bpbs,103,0)} 0 {if(bpbs,104,0)} 0 Z-1
Oz4_2 {if(bpbs&2<=nodopt,203,0)} 0 {if(bpbs&2<=nodopt,204,0)} 0 Z-1
Oz4_3 {if(bpbs&3<=nodopt,303,0)} 0 {if(bpbs&3<=nodopt,304,0)} 0 Z-1
Oz4_4 {if(bpbs&4<=nodopt,403,0)} 0 {if(bpbs&4<=nodopt,404,0)} 0 Z-1
Oz4_5 {if(bpbs&5<=nodopt,503,0)} 0 {if(bpbs&5<=nodopt,504,0)} 0 Z-1
Oz4_6 {if(bpbs&6<=nodopt,603,0)} 0 {if(bpbs&6<=nodopt,604,0)} 0 Z-1
Oz4_7 {if(bpbs&7<=nodopt,703,0)} 0 {if(bpbs&7<=nodopt,704,0)} 0 Z-1
Oz4_8 {if(bpbs&8<=nodopt,803,0)} 0 {if(bpbs&8<=nodopt,804,0)} 0 Z-1
Oz4_9 {if(bpbs&9<=nodopt,903,0)} 0 {if(bpbs&9<=nodopt,904,0)} 0 Z-1
Oz4_10 {if(bpbs&10<=nodopt,1003,0)} 0 {if(bpbs&10<=nodopt,1004,0)} 0 Z-1
Oz4_11 {if(bpbs&11<=nodopt,1103,0)} 0 {if(bpbs&11<=nodopt,1104,0)} 0 Z-1
Oz4_12 {if(bpbs&12<=nodopt,1203,0)} 0 {if(bpbs&12<=nodopt,1204,0)} 0 Z-1
Oz4_13 {if(bpbs&13<=nodopt,1303,0)} 0 {if(bpbs&13<=nodopt,1304,0)} 0 Z-1
Oz4_14 {if(bpbs&14<=nodopt,1403,0)} 0 {if(bpbs&14<=nodopt,1404,0)} 0 Z-1
Oz4_15 {if(bpbs&15<=nodopt,1503,0)} 0 {if(bpbs&15<=nodopt,1504,0)} 0 Z-1
Oz4_16 {if(bpbs&16<=nodopt,1603,0)} 0 {if(bpbs&16<=nodopt,1604,0)} 0 Z-1
.model z-1 ltra l={1/absf0} c={1/absf0} lininterp
*** (l)tline terminations
R1 {if(lphp,102,104)} 0 1
R2 {if(2<=nodopt,if(lphp,202,204),0)} 0 1
R3 {if(3<=nodopt,if(lphp,302,304),0)} 0 1
R4 {if(4<=nodopt,if(lphp,402,404),0)} 0 1
R5 {if(5<=nodopt,if(lphp,502,504),0)} 0 1
R6 {if(6<=nodopt,if(lphp,602,604),0)} 0 1
R7 {if(7<=nodopt,if(lphp,702,704),0)} 0 1
R8 {if(8<=nodopt,if(lphp,802,804),0)} 0 1
R9 {if(9<=nodopt,if(lphp,902,904),0)} 0 1
R10 {if(10<=nodopt,if(lphp,1002,1004),0)} 0 1
R11 {if(11<=nodopt,if(lphp,1102,1104),0)} 0 1
R12 {if(12<=nodopt,if(lphp,1202,1204),0)} 0 1
R13 {if(13<=nodopt,if(lphp,1302,1304),0)} 0 1
R14 {if(14<=nodopt,if(lphp,1402,1404),0)} 0 1
R15 {if(15<=nodopt,if(lphp,1502,1504),0)} 0 1
R16 {if(16<=nodopt,if(lphp,1602,1604),0)} 0 1
*** end chain resistor
Rx 0 {nodopt} 1
*** buffered output
Gout GROUND out {nodopt} 0 {G}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Va_tran 0.2 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltA0(1)} 0.9 {bltA0(1)}
+ 1.1 {bltA0(2)} 1.9 {bltA0(2)}
+ 2.1 {bltA0(3)} 2.9 {bltA0(3)}
+ 3.1 {bltA0(4)} 3.9 {bltA0(4)}
+ 4.1 {bltA0(5)} 4.9 {bltA0(5)}
+ 5.1 {bltA0(6)} 5.9 {bltA0(6)}
+ 6.1 {bltA0(7)} 6.9 {bltA0(7)}
+ 7.1 {bltA0(8)} 7.9 {bltA0(8)}
+ 8.1 {bltA0(9)} 8.9 {bltA0(9)}
+ 9.1 {bltA0(10)} 9.9 {bltA0(10)}
+ 10.1 {bltA0(11)} 10.9 {bltA0(11)}
+ 11.1 {bltA0(12)} 11.9 {bltA0(12)}
+ 12.1 {bltA0(13)} 12.9 {bltA0(13)}
+ 13.1 {bltA0(14)} 13.9 {bltA0(14)}
+ 14.1 {bltA0(15)} 14.9 {bltA0(15)}
+ 15.1 {bltA0(16)} 15.9 {bltA0(16)}
+ 16.1 {bltA1(1)} 16.9 {bltA1(1)}
+ 17.1 {bltA1(2)} 17.9 {bltA1(2)}
+ 18.1 {bltA1(3)} 18.9 {bltA1(3)}
+ 19.1 {bltA1(4)} 19.9 {bltA1(4)}
+ 20.1 {bltA1(5)} 20.9 {bltA1(5)}
+ 21.1 {bltA1(6)} 21.9 {bltA1(6)}
+ 22.1 {bltA1(7)} 22.9 {bltA1(7)}
+ 23.1 {bltA1(8)} 23.9 {bltA1(8)}
+ 24.1 {bltA1(9)} 24.9 {bltA1(9)}
+ 25.1 {bltA1(10)} 25.9 {bltA1(10)}
+ 26.1 {bltA1(11)} 26.9 {bltA1(11)}
+ 27.1 {bltA1(12)} 27.9 {bltA1(12)}
+ 28.1 {bltA1(13)} 28.9 {bltA1(13)}
+ 29.1 {bltA1(14)} 29.9 {bltA1(14)}
+ 30.1 {bltA1(15)} 30.9 {bltA1(15)}
+ 31.1 {bltA1(16)} 31.9 {bltA1(16)}
+ 32.1 {bltA2(1)} 32.9 {bltA2(1)}
+ 33.1 {bltA2(2)} 33.9 {bltA2(2)}
+ 34.1 {bltA2(3)} 34.9 {bltA2(3)}
+ 35.1 {bltA2(4)} 35.9 {bltA2(4)}
+ 36.1 {bltA2(5)} 36.9 {bltA2(5)}
+ 37.1 {bltA2(6)} 37.9 {bltA2(6)}
+ 38.1 {bltA2(7)} 38.9 {bltA2(7)}
+ 39.1 {bltA2(8)} 39.9 {bltA2(8)}
+ 40.1 {bltA2(9)} 40.9 {bltA2(9)}
+ 41.1 {bltA2(10)} 41.9 {bltA2(10)}
+ 42.1 {bltA2(11)} 42.9 {bltA2(11)}
+ 43.1 {bltA2(12)} 43.9 {bltA2(12)}
+ 44.1 {bltA2(13)} 44.9 {bltA2(13)}
+ 45.1 {bltA2(14)} 45.9 {bltA2(14)}
+ 46.1 {bltA2(15)} 46.9 {bltA2(15)}
+ 47.1 {bltA2(16)} 47.9 {bltA2(16)}
+ 48.1 {bltA3(1)} 48.9 {bltA3(1)}
+ 49.1 {bltA3(2)} 49.9 {bltA3(2)}
+ 50.1 {bltA3(3)} 50.9 {bltA3(3)}
+ 51.1 {bltA3(4)} 51.9 {bltA3(4)}
+ 52.1 {bltA3(5)} 52.9 {bltA3(5)}
+ 53.1 {bltA3(6)} 53.9 {bltA3(6)}
+ 54.1 {bltA3(7)} 54.9 {bltA3(7)}
+ 55.1 {bltA3(8)} 55.9 {bltA3(8)}
+ 56.1 {bltA3(9)} 56.9 {bltA3(9)}
+ 57.1 {bltA3(10)} 57.9 {bltA3(10)}
+ 58.1 {bltA3(11)} 58.9 {bltA3(11)}
+ 59.1 {bltA3(12)} 59.9 {bltA3(12)}
+ 60.1 {bltA3(13)} 60.9 {bltA3(13)}
+ 61.1 {bltA3(14)} 61.9 {bltA3(14)}
+ 62.1 {bltA3(15)} 62.9 {bltA3(15)}
+ 63.1 {bltA3(16)} 63.9 {bltA3(16)}
+ 64.1 {bltA4(1)} 64.9 {bltA4(1)}
+ 65.1 {bltA4(2)} 65.9 {bltA4(2)}
+ 66.1 {bltA4(3)} 66.9 {bltA4(3)}
+ 67.1 {bltA4(4)} 67.9 {bltA4(4)}
+ 68.1 {bltA4(5)} 68.9 {bltA4(5)}
+ 69.1 {bltA4(6)} 69.9 {bltA4(6)}
+ 70.1 {bltA4(7)} 70.9 {bltA4(7)}
+ 71.1 {bltA4(8)} 71.9 {bltA4(8)}
+ 72.1 {bltA4(9)} 72.9 {bltA4(9)}
+ 73.1 {bltA4(10)} 73.9 {bltA4(10)}
+ 74.1 {bltA4(11)} 74.9 {bltA4(11)}
+ 75.1 {bltA4(12)} 75.9 {bltA4(12)}
+ 76.1 {bltA4(13)} 76.9 {bltA4(13)}
+ 77.1 {bltA4(14)} 77.9 {bltA4(14)}
+ 78.1 {bltA4(15)} 78.9 {bltA4(15)}
+ 79.1 {bltA4(16)} 79.9 {bltA4(16)}
Vb_tran 0.3 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltB0(1)} 0.9 {bltB0(1)}
+ 1.1 {bltB0(2)} 1.9 {bltB0(2)}
+ 2.1 {bltB0(3)} 2.9 {bltB0(3)}
+ 3.1 {bltB0(4)} 3.9 {bltB0(4)}
+ 4.1 {bltB0(5)} 4.9 {bltB0(5)}
+ 5.1 {bltB0(6)} 5.9 {bltB0(6)}
+ 6.1 {bltB0(7)} 6.9 {bltB0(7)}
+ 7.1 {bltB0(8)} 7.9 {bltB0(8)}
+ 8.1 {bltB0(9)} 8.9 {bltB0(9)}
+ 9.1 {bltB0(10)} 9.9 {bltB0(10)}
+ 10.1 {bltB0(11)} 10.9 {bltB0(11)}
+ 11.1 {bltB0(12)} 11.9 {bltB0(12)}
+ 12.1 {bltB0(13)} 12.9 {bltB0(13)}
+ 13.1 {bltB0(14)} 13.9 {bltB0(14)}
+ 14.1 {bltB0(15)} 14.9 {bltB0(15)}
+ 15.1 {bltB0(16)} 15.9 {bltB0(16)}
+ 16.1 {bltB1(1)} 16.9 {bltB1(1)}
+ 17.1 {bltB1(2)} 17.9 {bltB1(2)}
+ 18.1 {bltB1(3)} 18.9 {bltB1(3)}
+ 19.1 {bltB1(4)} 19.9 {bltB1(4)}
+ 20.1 {bltB1(5)} 20.9 {bltB1(5)}
+ 21.1 {bltB1(6)} 21.9 {bltB1(6)}
+ 22.1 {bltB1(7)} 22.9 {bltB1(7)}
+ 23.1 {bltB1(8)} 23.9 {bltB1(8)}
+ 24.1 {bltB1(9)} 24.9 {bltB1(9)}
+ 25.1 {bltB1(10)} 25.9 {bltB1(10)}
+ 26.1 {bltB1(11)} 26.9 {bltB1(11)}
+ 27.1 {bltB1(12)} 27.9 {bltB1(12)}
+ 28.1 {bltB1(13)} 28.9 {bltB1(13)}
+ 29.1 {bltB1(14)} 29.9 {bltB1(14)}
+ 30.1 {bltB1(15)} 30.9 {bltB1(15)}
+ 31.1 {bltB1(16)} 31.9 {bltB1(16)}
+ 32.1 {bltB2(1)} 32.9 {bltB2(1)}
+ 33.1 {bltB2(2)} 33.9 {bltB2(2)}
+ 34.1 {bltB2(3)} 34.9 {bltB2(3)}
+ 35.1 {bltB2(4)} 35.9 {bltB2(4)}
+ 36.1 {bltB2(5)} 36.9 {bltB2(5)}
+ 37.1 {bltB2(6)} 37.9 {bltB2(6)}
+ 38.1 {bltB2(7)} 38.9 {bltB2(7)}
+ 39.1 {bltB2(8)} 39.9 {bltB2(8)}
+ 40.1 {bltB2(9)} 40.9 {bltB2(9)}
+ 41.1 {bltB2(10)} 41.9 {bltB2(10)}
+ 42.1 {bltB2(11)} 42.9 {bltB2(11)}
+ 43.1 {bltB2(12)} 43.9 {bltB2(12)}
+ 44.1 {bltB2(13)} 44.9 {bltB2(13)}
+ 45.1 {bltB2(14)} 45.9 {bltB2(14)}
+ 46.1 {bltB2(15)} 46.9 {bltB2(15)}
+ 47.1 {bltB2(16)} 47.9 {bltB2(16)}
+ 48.1 {bltB3(1)} 48.9 {bltB3(1)}
+ 49.1 {bltB3(2)} 49.9 {bltB3(2)}
+ 50.1 {bltB3(3)} 50.9 {bltB3(3)}
+ 51.1 {bltB3(4)} 51.9 {bltB3(4)}
+ 52.1 {bltB3(5)} 52.9 {bltB3(5)}
+ 53.1 {bltB3(6)} 53.9 {bltB3(6)}
+ 54.1 {bltB3(7)} 54.9 {bltB3(7)}
+ 55.1 {bltB3(8)} 55.9 {bltB3(8)}
+ 56.1 {bltB3(9)} 56.9 {bltB3(9)}
+ 57.1 {bltB3(10)} 57.9 {bltB3(10)}
+ 58.1 {bltB3(11)} 58.9 {bltB3(11)}
+ 59.1 {bltB3(12)} 59.9 {bltB3(12)}
+ 60.1 {bltB3(13)} 60.9 {bltB3(13)}
+ 61.1 {bltB3(14)} 61.9 {bltB3(14)}
+ 62.1 {bltB3(15)} 62.9 {bltB3(15)}
+ 63.1 {bltB3(16)} 63.9 {bltB3(16)}
+ 64.1 {bltB4(1)} 64.9 {bltB4(1)}
+ 65.1 {bltB4(2)} 65.9 {bltB4(2)}
+ 66.1 {bltB4(3)} 66.9 {bltB4(3)}
+ 67.1 {bltB4(4)} 67.9 {bltB4(4)}
+ 68.1 {bltB4(5)} 68.9 {bltB4(5)}
+ 69.1 {bltB4(6)} 69.9 {bltB4(6)}
+ 70.1 {bltB4(7)} 70.9 {bltB4(7)}
+ 71.1 {bltB4(8)} 71.9 {bltB4(8)}
+ 72.1 {bltB4(9)} 72.9 {bltB4(9)}
+ 73.1 {bltB4(10)} 73.9 {bltB4(10)}
+ 74.1 {bltB4(11)} 74.9 {bltB4(11)}
+ 75.1 {bltB4(12)} 75.9 {bltB4(12)}
+ 76.1 {bltB4(13)} 76.9 {bltB4(13)}
+ 77.1 {bltB4(14)} 77.9 {bltB4(14)}
+ 78.1 {bltB4(15)} 78.9 {bltB4(15)}
+ 79.1 {bltB4(16)} 79.9 {bltB4(16)}
.ends InvChebyshev_IIR
****************************************
*
*     Cauer (Elliptic), IIR
*
****************************************
*
* Parameters: nT, SH, f0, fc, BWp, BWs, G, Ap, As, N
*   (optional: sim, tr, td)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
********************************
.subckt Cauer_IIR IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ nT=0
+ sim=1 SH=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 Asc=3.0103 Ap=1 As=80 N=0
+ tr=1m/absf0 td=0
*** preliminary calculations
.param BWp=if(fc==0,fp1,fp2-fp1) BWs=if(fc==0,fs1,fs2-fs1) fc=if(fp2==0,0,sqrt(fp1*fp2)) absf0=abs(f0)
+ N2=Order/2 N21=(Order+1)/2 nodopt=ceil(N2)
+ oddCase=par(case+1) evenCase=inv(oddCase) oddN=par(Order+1) evenN=inv(oddN)
+ low=(case==1) high=(case==2) bandpass=(case==3) bandstop=(case==4) lphp=(case<=2) bpbs=inv(lphp)
.func par(x) {x/2==int(x/2)}
.param case=if(fc==0, 1+(BWp>BWs), 3+(BWp>BWs))
+ epsilon_p=if(Ap>0,(10**(Ap/10)-1),16*(10**(As/10)-1)*exp(log(nomeq_alt)*N))
+ epsilon_s=if(As>0,(10**(As/10)-1),(10**(Ap/10)-1)/16*exp(-log(nomeq_alt)*N))
+ epsilon_sc=(10**(Asc/10)-u(Asc)) fpass1=if(lphp,BWp,(sqrt(BWp**2+4*fc**2)-BWp)/2)
+ fpass2=if(lphp,0,(sqrt(BWp**2+4*fc**2)+BWp)/2) fstop1=if(lphp,BWs,(sqrt(BWs**2+4*fc**2)-BWs)/2)
+ fpz=tan(pi*fpass1/absf0) fsz=tan(pi/absf0*fstop1) wp1=2*pi*fpass1/absf0 wp2=2*pi*fpass2/absf0
*** elliptic modulus k and nome q
.param modulusk_alt=min(fpz/fsz,fsz/fpz)**if(bpbs,3,1) modulusk1=epsilon_p/epsilon_s
+ modulusk2=4*nomeq2**.5*(1+4*nomeq2**2)**.5/(1+2*nomeq2)**2
+ h0=(1-(1-modulusk_alt**2)**.25)/(1+(1-modulusk_alt**2)**.25)/2
+ nomeq2=nomeq1**(1/N**u(N)) nomeq_alt=h0*(h0**4*(15*h0**4+2)+1)
+ nomeq1=exp(-pi*ellipticK1_/ellipticK1) nomeq=if(N==0,nomeq_alt,nomeq2)
+ modulusk=if(N==0,modulusk_alt,modulusk2)
+ Order=if(N==0, ceil(-log(16*epsilon_s/epsilon_p)/log(nomeq)), N)
*** frequency scaling
.param ellipticK2=ellipticK(modulusk**2) ellipticK2_=ellipticK(1-modulusk**2)
+ ellipticK1=ellipticK(modulusk1) ellipticK1_=ellipticK(1-modulusk1) acoshEps=acosh(sqrt(epsilon_sc/epsilon_p))
+ wscale=if(Asc<=Ap,1,(((modulusk**2-1)*(2*sin((3*((3*(-sin(4*acoshEps)+
+ 8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(2*pi*ellipticK2)/ellipticK2_)-2*sin((5*((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(6*pi*ellipticK2)/ellipticK2_)+2*sin((7*((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_))*exp(-(12*pi*ellipticK2)/ellipticK2_)-2*sin((((3*(-sin(4*
+ acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+((sin(2*acoshEps)-
+ 2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/(2*Order*ellipticK1*
+ ellipticK2_)))**2*exp(-(0.5*pi*ellipticK2)/ellipticK2_))/(sqrt(1-modulusk**2)*
+ (2*cos((((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/
+ 256+((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(pi*ellipticK2)/ellipticK2_)-
+ 2*cos((2*((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/
+ 256+((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(4*pi*ellipticK2)/ellipticK2_)+2*cos((3*
+ ((3*(-sin(4*acoshEps)+8*sin(2*acoshEps)-12*acoshEps)*modulusk1**2)/256+
+ ((sin(2*acoshEps)-2*acoshEps)*modulusk1)/8-acoshEps)*pi*ellipticK2)/
+ (Order*ellipticK1*ellipticK2_))*exp(-(9*pi*ellipticK2)/ellipticK2_)-1)**2)+1))
*** steps for approximating poles/zeroes
.param Lambda=.5/Order*log((sqrt(epsilon_p+1)+1)/(sqrt(epsilon_p+1)-1))
.func ellipticK(x) {92.18730129420581/(1.834008086409342*sqrt(1-x)+
+ 3.668016172818685*(1-x)**0.25+5.187358218604039*sqrt(sqrt(1-x)+1)*
+ (1-x)**0.125+6.168843301631763*(sqrt(1-x)+1)**0.25*sqrt(sqrt(1-x)+2*
+ (1-x)**0.25+1)*(1-x)**0.0625+5.656854249492383*(sqrt(1-x)+1)**0.125*
+ (sqrt(1-x)+2*(1-x)**0.25+1)**0.25*sqrt(1.414213562373095*sqrt(1-x)+
+ 2.82842712474619*(1-x)**0.25+4*sqrt(sqrt(1-x)+1)*(1-x)**0.125+
+ 1.414213562373095)*(1-x)**0.03125+1.834008086409342)}
.func zero_alt(x) {(nomeq**.25*(nomeq**6*sin(5*pi*((x-0.5)/Order+0.5))-
+ nomeq**2*sin(3*pi*((x-0.5)/Order+0.5))+sin(pi*((x-0.5)/Order+0.5))))/
+ (nomeq**4*cos(4*pi*((x-0.5)/Order+0.5))-nomeq*cos(2*pi*((x-0.5)/Order+0.5))+
+ 0.5)/sqrt(modulusk)}
.param real0=(nomeq**.25*(nomeq**6*sinh(5*Lambda)-nomeq**2*sinh(3*Lambda)+
+ sinh(Lambda)))/(nomeq**4*cosh(4*Lambda)-nomeq*cosh(2*Lambda)+0.5)
.func tmp_Q0(x) {zero_alt(x)/(2*real0)*sqrt((real0**2+zero_alt(x)**2*modulusk)*
+ (real0**2*modulusk+zero_alt(x)**(-2))/((1-(zero_alt(x)*modulusk)**2)*(1-zero_alt(x)**2)))}
.func tmp_bi0(x) {(real0**2/modulusk+zero_alt(x)**2)/(1+(real0*zero_alt(x))**2*modulusk)}
*** real and imaginary parts of the poles/zeros
.func real(x) {0.5/tmp_Q0(x)*sqrt(tmp_bi0(x)*wscale)*fpz}
.func imag(x) {sqrt((1-0.25/tmp_Q0(x)**2)*(tmp_bi0(x)*wscale))*fpz}
.func zero(x) {sqrt(wscale)/(modulusk*zero_alt(x))*fpz}
*** transfer function terms
.func a2(x) {inv(x==N21)}
.func xa0(x) {if(x==N21, real(x), zero(x)**2)}
.func b2(x) {inv(x==N21)}
.func xb1(x) {if(x==N21,1,2*real(x))}
.func xb0(x) {if(x==N21,real(x),real(x)**2+imag(x)**2)}
*** precalculate these to reduce function unravelling...
.param b01=xb0(1) b11=xb1(1) a01=xa0(1)
+ b02=xb0(2) b12=xb1(2) a02=xa0(2)
+ b03=xb0(3) b13=xb1(3) a03=xa0(3)
+ b04=xb0(4) b14=xb1(4) a04=xa0(4)
+ b05=xb0(5) b15=xb1(5) a05=xa0(5)
+ b06=xb0(6) b16=xb1(6) a06=xa0(6)
+ b07=xb0(7) b17=xb1(7) a07=xa0(7)
+ b08=xb0(8) b18=xb1(8) a08=xa0(8)
+ b09=xb0(9) b19=xb1(9) a09=xa0(9)
+ b010=xb0(10) b110=xb1(10) a010=xa0(10)
+ b011=xb0(11) b111=xb1(11) a011=xa0(11)
+ b012=xb0(12) b112=xb1(12) a012=xa0(12)
+ b013=xb0(13) b113=xb1(13) a013=xa0(13)
+ b014=xb0(14) b114=xb1(14) a014=xa0(14)
+ b015=xb0(15) b115=xb1(15) a015=xa0(15)
+ b016=xb0(16) b116=xb1(16) a016=xa0(16)
*** ...and make new functions out of them. It helps significantly.
.func b0(x) {table(min(x,nodopt), 1, b01, 2, b02, 3, b03, 4, b04,
+ 5, b05, 6, b06, 7, b07, 8, b08, 9, b09, 10, b010, 11, b011,
+ 12, b012, 13, b013, 14, b014, 15, b015, 16, b016)}
.func b1(x) {table(min(x,nodopt), 1, b11, 2, b12, 3, b13, 4, b14, 5, b15,
+ 6, b16, 7, b17, 8, b18, 9, b19, 10, b110, 11, b111, 12, b112, 13, b113,
+ 14, b114, 15, b115, 16, b116)}
.func a0(x) {table(min(x,nodopt), 1, a01, 2, a02, 3, a03, 4, a04, 5, a05,
+ 6, a06, 7, a07, 8, a08, 9, a09, 10, a010, 11, a011, 12, a012, 13, a013,
+ 14, a014, 15, a015, 16, a016)}
*** bilinear transform for LP
.func blp0(x) {b2(x)+b1(x)+b0(x)}
.func blp1(x) {2*(b0(x)-b2(x))}
.func blp2(x) {b2(x)-b1(x)+b0(x)}
.func alp0(x) {a2(x)+a0(x)}
.func alp1(x) {2*(a0(x)-a2(x))}
.func alp2(x) {a2(x)+a0(x)}
*** spectral transformations
.parma alpha=if(lphp, -cos(wp1), cos((wp2+wp1)/2)/cos((wp2-wp1)/2) )
+ beta=tan(wp1/2)*if(bandpass, 1/tan((wp2-wp1)/2), tan((wp2-wp1)/2) )
* highpass
.func bhp0(x) {blp2(x)*alpha**2 - blp1(x)*alpha + blp0(x)}
.func bhp1(x) {-(alpha**2 + 1)*blp1(x) + 2*(blp2(x) + blp0(x))*alpha}
.func bhp2(x) {blp0(x)*alpha**2 - blp1(x)*alpha + blp2(x)}
.func ahp0(x) {alp2(x)*alpha**2 - alp1(x)*alpha + alp0(x)}
.func ahp1(x) {-alp1(x)*alpha**2 + 2*(alp2(x) + alp0(x))*alpha - alp1(x)}
.func ahp2(x) {alp0(x)*alpha**2 - alp1(x)*alpha + alp2(x)}
* bandpass
.func bbp0(x) {(beta**2-2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2+2*beta+1)*blp0(x)}
.func bbp1(x) {4*alpha*beta*((1-beta)*blp2(x)+beta*blp1(x)+(-beta-1)*blp0(x))}
.func bbp2(x) {((4*alpha**2+2)*beta**2-2)*(blp2(x)+blp0(x))-((4*alpha**2+2)*beta**2+2)*blp1(x)}
.func bbp3(x) {4*alpha*beta*((-blp2(x)+blp1(x)-blp0(x))*beta+blp0(x)-blp2(x))}
.func bbp4(x) {(beta**2+2*beta+1)*blp2(x)+(1-beta**2)*blp1(x)+(beta**2-2*beta+1)*blp0(x)}
.func abp0(x) {(beta**2-2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2+2*beta+1)*alp0(x)}
.func abp1(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp2(x)-alp0(x))}
.func abp2(x) {((4*alpha**2+2)*beta**2-2)*(alp2(x)+alp0(x))-((4*alpha**2+2)*beta**2+2)*alp1(x)}
.func abp3(x) {4*alpha*beta*((-alp2(x)+alp1(x)-alp0(x))*beta+alp0(x)-alp2(x))}
.func abp4(x) {(beta**2+2*beta+1)*alp2(x)+(1-beta**2)*alp1(x)+(beta**2-2*beta+1)*alp0(x)}
* bandstop
.func bbs0(x) {bbp0(x)}
.func bbs1(x) {4*alpha*((blp2(x)-blp0(x))*beta-blp2(x)-blp1(x)-blp0(x))}
.func bbs2(x) {2*((-blp2(x)+blp1(x)-blp0(x))*beta**2+(blp2(x)+blp1(x)+blp0(x))*(2*alpha**2+1))}
.func bbs3(x) {4*alpha*((blp0(x)-blp2(x))*beta-(blp2(x)+blp1(x)+blp0(x)))}
.func bbs4(x) {bbp4(x)}
.func abs0(x) {abp0(x)}
.func abs1(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs2(x) {2*((-alp2(x)+alp1(x)-alp0(x))*beta**2+(alp2(x)+alp1(x)+alp0(x))*(2*alpha**2+1))}
.func abs3(x) {4*alpha*((alp2(x)-alp0(x))*beta-(alp2(x)+alp1(x)+alp0(x)))}
.func abs4(x) {abp4(x)}
*** case selection
.func bltB0(x) {if(x<=nodopt,if(low,blp0(x),if(high,bhp0(x),if(bandpass,bbp0(x),bbs0(x)))),1)}
.func bltB1(x) {if(low,blp1(x),if(high,bhp1(x),if(bandpass,bbp1(x),bbs1(x))))}
.func bltB2(x) {if(low,blp2(x),if(high,bhp2(x),if(bandpass,bbp2(x),bbs2(x))))}
.func bltB3(x) {if(lphp,0,if(bandpass,bbp3(x),bbs3(x)))}
.func bltB4(x) {if(lphp,0,if(bandpass,bbp4(x),bbs4(x)))}
.func bltA0(x) {if(low,alp0(x),if(high,ahp0(x),if(bandpass,abp0(x),abs0(x))))}
.func bltA1(x) {if(low,alp1(x),if(high,ahp1(x),if(bandpass,abp1(x),abs1(x))))}
.func bltA2(x) {if(low,alp2(x),if(high,ahp2(x),if(bandpass,abp2(x),abs2(x))))}
.func bltA3(x) {if(lphp,0,if(bandpass,abp3(x),abs3(x)))}
.func bltA4(x) {if(lphp,0,if(bandpass,abp4(x),abs4(x)))}
*** buffered input
Gin 0 999 in GROUND 1
Rin 999 0 1
*** S&H input
Vbypass {inv(SH)*999} {inv(SH)*666}
Ash {SH*999} 0 {SH*0.4} 0 0 0 {SH*666} 0 SAMPLEHOLD Vhigh=1g Vlow=-1g
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** normalizing B0[n]
Gb0_1 0 667 666 0 {1/bltB0(1)}
*** B1[n]
Gb1_1 0 667 0 101 {bltB1(1)/bltB0(1)}
Gb1_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} {bltB1(2)/bltB0(2)}
Gb1_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} {bltB1(3)/bltB0(3)}
Gb1_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} {bltB1(4)/bltB0(4)}
Gb1_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} {bltB1(5)/bltB0(5)}
Gb1_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} {bltB1(6)/bltB0(6)}
Gb1_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} {bltB1(7)/bltB0(7)}
Gb1_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} {bltB1(8)/bltB0(8)}
Gb1_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} {bltB1(9)/bltB0(9)}
Gb1_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} {bltB1(10)/bltB0(10)}
Gb1_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} {bltB1(11)/bltB0(11)}
Gb1_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} {bltB1(12)/bltB0(12)}
Gb1_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} {bltB1(13)/bltB0(13)}
Gb1_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} {bltB1(14)/bltB0(14)}
Gb1_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} {bltB1(15)/bltB0(15)}
Gb1_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} {bltB1(16)/bltB0(16)}
*** B2[n]
Gb2_1 0 667 0 102 {bltB2(1)/bltB0(1)}
Gb2_2 0 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,202,0)} {bltB2(2)/bltB0(2)}
Gb2_3 0 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,302,0)} {bltB2(3)/bltB0(3)}
Gb2_4 0 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,402,0)} {bltB2(4)/bltB0(4)}
Gb2_5 0 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,502,0)} {bltB2(5)/bltB0(5)}
Gb2_6 0 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,602,0)} {bltB2(6)/bltB0(6)}
Gb2_7 0 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,702,0)} {bltB2(7)/bltB0(7)}
Gb2_8 0 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,802,0)} {bltB2(8)/bltB0(8)}
Gb2_9 0 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,902,0)} {bltB2(9)/bltB0(9)}
Gb2_10 0 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1002,0)} {bltB2(10)/bltB0(10)}
Gb2_11 0 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1102,0)} {bltB2(11)/bltB0(11)}
Gb2_12 0 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1202,0)} {bltB2(12)/bltB0(12)}
Gb2_13 0 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1302,0)} {bltB2(13)/bltB0(13)}
Gb2_14 0 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1402,0)} {bltB2(14)/bltB0(14)}
Gb2_15 0 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1502,0)} {bltB2(15)/bltB0(15)}
Gb2_16 0 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1602,0)} {bltB2(16)/bltB0(16)}
*** B3[n]
Gb3_1 0 {if(bpbs,667,0)} 0 {if(bpbs,103,0)} {bltB3(1)/bltB0(1)}
Gb3_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,203,0)} {bltB3(2)/bltB0(2)}
Gb3_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,303,0)} {bltB3(3)/bltB0(3)}
Gb3_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,403,0)} {bltB3(4)/bltB0(4)}
Gb3_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,503,0)} {bltB3(5)/bltB0(5)}
Gb3_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,603,0)} {bltB3(6)/bltB0(6)}
Gb3_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,703,0)} {bltB3(7)/bltB0(7)}
Gb3_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,803,0)} {bltB3(8)/bltB0(8)}
Gb3_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,903,0)} {bltB3(9)/bltB0(9)}
Gb3_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1003,0)} {bltB3(10)/bltB0(10)}
Gb3_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1103,0)} {bltB3(11)/bltB0(11)}
Gb3_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1203,0)} {bltB3(12)/bltB0(12)}
Gb3_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1303,0)} {bltB3(13)/bltB0(13)}
Gb3_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1403,0)} {bltB3(14)/bltB0(14)}
Gb3_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1503,0)} {bltB3(15)/bltB0(15)}
Gb3_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1603,0)} {bltB3(16)/bltB0(16)}
*** B4[n]
Gb4_1 0 {if(bpbs,667,0)} 0 {if(bpbs,104,0)} {bltB4(1)/bltB0(1)}
Gb4_2 0 {if(bpbs&2<=nodopt,1,0)} 0 {if(bpbs&2<=nodopt,204,0)} {bltB4(2)/bltB0(2)}
Gb4_3 0 {if(bpbs&3<=nodopt,2,0)} 0 {if(bpbs&3<=nodopt,304,0)} {bltB4(3)/bltB0(3)}
Gb4_4 0 {if(bpbs&4<=nodopt,3,0)} 0 {if(bpbs&4<=nodopt,404,0)} {bltB4(4)/bltB0(4)}
Gb4_5 0 {if(bpbs&5<=nodopt,4,0)} 0 {if(bpbs&5<=nodopt,504,0)} {bltB4(5)/bltB0(5)}
Gb4_6 0 {if(bpbs&6<=nodopt,5,0)} 0 {if(bpbs&6<=nodopt,604,0)} {bltB4(6)/bltB0(6)}
Gb4_7 0 {if(bpbs&7<=nodopt,6,0)} 0 {if(bpbs&7<=nodopt,704,0)} {bltB4(7)/bltB0(7)}
Gb4_8 0 {if(bpbs&8<=nodopt,7,0)} 0 {if(bpbs&8<=nodopt,804,0)} {bltB4(8)/bltB0(8)}
Gb4_9 0 {if(bpbs&9<=nodopt,8,0)} 0 {if(bpbs&9<=nodopt,904,0)} {bltB4(9)/bltB0(9)}
Gb4_10 0 {if(bpbs&10<=nodopt,9,0)} 0 {if(bpbs&10<=nodopt,1004,0)} {bltB4(10)/bltB0(10)}
Gb4_11 0 {if(bpbs&11<=nodopt,10,0)} 0 {if(bpbs&11<=nodopt,1104,0)} {bltB4(11)/bltB0(11)}
Gb4_12 0 {if(bpbs&12<=nodopt,11,0)} 0 {if(bpbs&12<=nodopt,1204,0)} {bltB4(12)/bltB0(12)}
Gb4_13 0 {if(bpbs&13<=nodopt,12,0)} 0 {if(bpbs&13<=nodopt,1304,0)} {bltB4(13)/bltB0(13)}
Gb4_14 0 {if(bpbs&14<=nodopt,13,0)} 0 {if(bpbs&14<=nodopt,1404,0)} {bltB4(14)/bltB0(14)}
Gb4_15 0 {if(bpbs&15<=nodopt,14,0)} 0 {if(bpbs&15<=nodopt,1504,0)} {bltB4(15)/bltB0(15)}
Gb4_16 0 {if(bpbs&16<=nodopt,15,0)} 0 {if(bpbs&16<=nodopt,1604,0)} {bltB4(16)/bltB0(16)}
*** A0[n]
Ga0_1 0 1 667 0 {bltA0(1)/bltB0(2)*b01/a01}
Ga0_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,1,0)} 0 {bltA0(2)/bltB0(3)*b02/a02}
Ga0_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,2,0)} 0 {bltA0(3)/bltB0(4)*b03/a03}
Ga0_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,3,0)} 0 {bltA0(4)/bltB0(5)*b04/a04}
Ga0_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,4,0)} 0 {bltA0(5)/bltB0(6)*b05/a05}
Ga0_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,5,0)} 0 {bltA0(6)/bltB0(7)*b06/a06}
Ga0_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,6,0)} 0 {bltA0(7)/bltB0(8)*b07/a07}
Ga0_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,7,0)} 0 {bltA0(8)/bltB0(9)*b08/a08}
Ga0_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,8,0)} 0 {bltA0(9)/bltB0(10)*b09/a09}
Ga0_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,9,0)} 0 {bltA0(10)/bltB0(11)*b010/a010}
Ga0_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,10,0)} 0 {bltA0(11)/bltB0(12)*b011/a011}
Ga0_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,11,0)} 0 {bltA0(12)/bltB0(13)*b012/a012}
Ga0_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,12,0)} 0 {bltA0(13)/bltB0(14)*b013/a013}
Ga0_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,13,0)} 0 {bltA0(14)/bltB0(15)*b014/a014}
Ga0_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,14,0)} 0 {bltA0(15)/bltB0(16)*b015/a015}
Ga0_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,15,0)} 0 {bltA0(16)/bltB0(17)*b016/a016}
*** A1[n]
Ga1_1 0 1 101 0 {bltA1(1)/bltB0(2)*b01/a01}
Ga1_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,201,0)} 0 {bltA1(2)/bltB0(3)*b02/a02}
Ga1_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,301,0)} 0 {bltA1(3)/bltB0(4)*b03/a03}
Ga1_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,401,0)} 0 {bltA1(4)/bltB0(5)*b04/a04}
Ga1_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,501,0)} 0 {bltA1(5)/bltB0(6)*b05/a05}
Ga1_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,601,0)} 0 {bltA1(6)/bltB0(7)*b06/a06}
Ga1_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,701,0)} 0 {bltA1(7)/bltB0(8)*b07/a07}
Ga1_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,801,0)} 0 {bltA1(8)/bltB0(9)*b08/a08}
Ga1_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,901,0)} 0 {bltA1(9)/bltB0(10)*b09/a09}
Ga1_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1001,0)} 0 {bltA1(10)/bltB0(11)*b010/a010}
Ga1_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1101,0)} 0 {bltA1(11)/bltB0(12)*b011/a011}
Ga1_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1201,0)} 0 {bltA1(12)/bltB0(13)*b012/a012}
Ga1_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1301,0)} 0 {bltA1(13)/bltB0(14)*b013/a013}
Ga1_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1401,0)} 0 {bltA1(14)/bltB0(15)*b014/a014}
Ga1_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1501,0)} 0 {bltA1(15)/bltB0(16)*b015/a015}
Ga1_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1601,0)} 0 {bltA1(16)/bltB0(17)*b016/a016}
*** A2[n]
Ga2_1 0 1 102 0 {bltA2(1)/bltB0(2)*b01/a01}
Ga2_2 0 {if(2<=nodopt,2,0)} {if(2<=nodopt,202,0)} 0 {bltA2(2)/bltB0(3)*b02/a02}
Ga2_3 0 {if(3<=nodopt,3,0)} {if(3<=nodopt,302,0)} 0 {bltA2(3)/bltB0(4)*b03/a03}
Ga2_4 0 {if(4<=nodopt,4,0)} {if(4<=nodopt,402,0)} 0 {bltA2(4)/bltB0(5)*b04/a04}
Ga2_5 0 {if(5<=nodopt,5,0)} {if(5<=nodopt,502,0)} 0 {bltA2(5)/bltB0(6)*b05/a05}
Ga2_6 0 {if(6<=nodopt,6,0)} {if(6<=nodopt,602,0)} 0 {bltA2(6)/bltB0(7)*b06/a06}
Ga2_7 0 {if(7<=nodopt,7,0)} {if(7<=nodopt,702,0)} 0 {bltA2(7)/bltB0(8)*b07/a07}
Ga2_8 0 {if(8<=nodopt,8,0)} {if(8<=nodopt,802,0)} 0 {bltA2(8)/bltB0(9)*b08/a08}
Ga2_9 0 {if(9<=nodopt,9,0)} {if(9<=nodopt,902,0)} 0 {bltA2(9)/bltB0(10)*b09/a09}
Ga2_10 0 {if(10<=nodopt,10,0)} {if(10<=nodopt,1002,0)} 0 {bltA2(10)/bltB0(11)*b010/a010}
Ga2_11 0 {if(11<=nodopt,11,0)} {if(11<=nodopt,1102,0)} 0 {bltA2(11)/bltB0(12)*b011/a011}
Ga2_12 0 {if(12<=nodopt,12,0)} {if(12<=nodopt,1202,0)} 0 {bltA2(12)/bltB0(13)*b012/a012}
Ga2_13 0 {if(13<=nodopt,13,0)} {if(13<=nodopt,1302,0)} 0 {bltA2(13)/bltB0(14)*b013/a013}
Ga2_14 0 {if(14<=nodopt,14,0)} {if(14<=nodopt,1402,0)} 0 {bltA2(14)/bltB0(15)*b014/a014}
Ga2_15 0 {if(15<=nodopt,15,0)} {if(15<=nodopt,1502,0)} 0 {bltA2(15)/bltB0(16)*b015/a015}
Ga2_16 0 {if(16<=nodopt,16,0)} {if(16<=nodopt,1602,0)} 0 {bltA2(16)/bltB0(17)*b016/a016}
***A3[n]
Ga3_1 0 {bpbs} {if(bpbs,103,0)} 0 {bltA3(1)/bltB0(2)*b01/a01}
Ga3_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,203,0)} 0 {bltA3(2)/bltB0(3)*b02/a02}
Ga3_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,303,0)} 0 {bltA3(3)/bltB0(4)*b03/a03}
Ga3_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,403,0)} 0 {bltA3(4)/bltB0(5)*b04/a04}
Ga3_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,503,0)} 0 {bltA3(5)/bltB0(6)*b05/a05}
Ga3_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,603,0)} 0 {bltA3(6)/bltB0(7)*b06/a06}
Ga3_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,703,0)} 0 {bltA3(7)/bltB0(8)*b07/a07}
Ga3_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,803,0)} 0 {bltA3(8)/bltB0(9)*b08/a08}
Ga3_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,903,0)} 0 {bltA3(9)/bltB0(10)*b09/a09}
Ga3_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1003,0)} 0 {bltA3(10)/bltB0(11)*b010/a010}
Ga3_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1103,0)} 0 {bltA3(11)/bltB0(12)*b011/a011}
Ga3_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1203,0)} 0 {bltA3(12)/bltB0(13)*b012/a012}
Ga3_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1303,0)} 0 {bltA3(13)/bltB0(14)*b013/a013}
Ga3_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1403,0)} 0 {bltA3(14)/bltB0(15)*b014/a014}
Ga3_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1503,0)} 0 {bltA3(15)/bltB0(16)*b015/a015}
Ga3_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1603,0)} 0 {bltA3(16)/bltB0(17)*b016/a016}
***A4[n]
Ga4_1 0 {bpbs} {if(bpbs,104,0)} 0 {bltA4(1)/bltB0(2)*b01/a01}
Ga4_2 0 {if(bpbs&2<=nodopt,2,0)} {if(bpbs&2<=nodopt,204,0)} 0 {bltA4(2)/bltB0(3)*b02/a02}
Ga4_3 0 {if(bpbs&3<=nodopt,3,0)} {if(bpbs&3<=nodopt,304,0)} 0 {bltA4(3)/bltB0(4)*b03/a03}
Ga4_4 0 {if(bpbs&4<=nodopt,4,0)} {if(bpbs&4<=nodopt,404,0)} 0 {bltA4(4)/bltB0(5)*b04/a04}
Ga4_5 0 {if(bpbs&5<=nodopt,5,0)} {if(bpbs&5<=nodopt,504,0)} 0 {bltA4(5)/bltB0(6)*b05/a05}
Ga4_6 0 {if(bpbs&6<=nodopt,6,0)} {if(bpbs&6<=nodopt,604,0)} 0 {bltA4(6)/bltB0(7)*b06/a06}
Ga4_7 0 {if(bpbs&7<=nodopt,7,0)} {if(bpbs&7<=nodopt,704,0)} 0 {bltA4(7)/bltB0(8)*b07/a07}
Ga4_8 0 {if(bpbs&8<=nodopt,8,0)} {if(bpbs&8<=nodopt,804,0)} 0 {bltA4(8)/bltB0(9)*b08/a08}
Ga4_9 0 {if(bpbs&9<=nodopt,9,0)} {if(bpbs&9<=nodopt,904,0)} 0 {bltA4(9)/bltB0(10)*b09/a09}
Ga4_10 0 {if(bpbs&10<=nodopt,10,0)} {if(bpbs&10<=nodopt,1004,0)} 0 {bltA4(10)/bltB0(11)*b010/a010}
Ga4_11 0 {if(bpbs&11<=nodopt,11,0)} {if(bpbs&11<=nodopt,1104,0)} 0 {bltA4(11)/bltB0(12)*b011/a011}
Ga4_12 0 {if(bpbs&12<=nodopt,12,0)} {if(bpbs&12<=nodopt,1204,0)} 0 {bltA4(12)/bltB0(13)*b012/a012}
Ga4_13 0 {if(bpbs&13<=nodopt,13,0)} {if(bpbs&13<=nodopt,1304,0)} 0 {bltA4(13)/bltB0(14)*b013/a013}
Ga4_14 0 {if(bpbs&14<=nodopt,14,0)} {if(bpbs&14<=nodopt,1404,0)} 0 {bltA4(14)/bltB0(15)*b014/a014}
Ga4_15 0 {if(bpbs&15<=nodopt,15,0)} {if(bpbs&15<=nodopt,1504,0)} 0 {bltA4(15)/bltB0(16)*b015/a015}
Ga4_16 0 {if(bpbs&16<=nodopt,16,0)} {if(bpbs&16<=nodopt,1604,0)} 0 {bltA4(16)/bltB0(17)*b016/a016}
*** z^-1
Oz1_1 667 0 101 0 Z-1
Oz1_2 {if(2<=nodopt,1,0)} 0 {if(2<=nodopt,201,0)} 0 Z-1
Oz1_3 {if(3<=nodopt,2,0)} 0 {if(3<=nodopt,301,0)} 0 Z-1
Oz1_4 {if(4<=nodopt,3,0)} 0 {if(4<=nodopt,401,0)} 0 Z-1
Oz1_5 {if(5<=nodopt,4,0)} 0 {if(5<=nodopt,501,0)} 0 Z-1
Oz1_6 {if(6<=nodopt,5,0)} 0 {if(6<=nodopt,601,0)} 0 Z-1
Oz1_7 {if(7<=nodopt,6,0)} 0 {if(7<=nodopt,701,0)} 0 Z-1
Oz1_8 {if(8<=nodopt,7,0)} 0 {if(8<=nodopt,801,0)} 0 Z-1
Oz1_9 {if(9<=nodopt,8,0)} 0 {if(9<=nodopt,901,0)} 0 Z-1
Oz1_10 {if(10<=nodopt,9,0)} 0 {if(10<=nodopt,1001,0)} 0 Z-1
Oz1_11 {if(11<=nodopt,10,0)} 0 {if(11<=nodopt,1101,0)} 0 Z-1
Oz1_12 {if(12<=nodopt,11,0)} 0 {if(12<=nodopt,1201,0)} 0 Z-1
Oz1_13 {if(13<=nodopt,12,0)} 0 {if(13<=nodopt,1301,0)} 0 Z-1
Oz1_14 {if(14<=nodopt,13,0)} 0 {if(14<=nodopt,1401,0)} 0 Z-1
Oz1_15 {if(15<=nodopt,14,0)} 0 {if(15<=nodopt,1501,0)} 0 Z-1
Oz1_16 {if(16<=nodopt,15,0)} 0 {if(16<=nodopt,1601,0)} 0 Z-1
*** z^-2
Oz2_1 101 0 102 0 Z-1
Oz2_2 {if(2<=nodopt,201,0)} 0 {if(2<=nodopt,202,0)} 0 Z-1
Oz2_3 {if(3<=nodopt,301,0)} 0 {if(3<=nodopt,302,0)} 0 Z-1
Oz2_4 {if(4<=nodopt,401,0)} 0 {if(4<=nodopt,402,0)} 0 Z-1
Oz2_5 {if(5<=nodopt,501,0)} 0 {if(5<=nodopt,502,0)} 0 Z-1
Oz2_6 {if(6<=nodopt,601,0)} 0 {if(6<=nodopt,602,0)} 0 Z-1
Oz2_7 {if(7<=nodopt,701,0)} 0 {if(7<=nodopt,702,0)} 0 Z-1
Oz2_8 {if(8<=nodopt,801,0)} 0 {if(8<=nodopt,802,0)} 0 Z-1
Oz2_9 {if(9<=nodopt,901,0)} 0 {if(9<=nodopt,902,0)} 0 Z-1
Oz2_10 {if(10<=nodopt,1001,0)} 0 {if(10<=nodopt,1002,0)} 0 Z-1
Oz2_11 {if(11<=nodopt,1101,0)} 0 {if(11<=nodopt,1102,0)} 0 Z-1
Oz2_12 {if(12<=nodopt,1201,0)} 0 {if(12<=nodopt,1202,0)} 0 Z-1
Oz2_13 {if(13<=nodopt,1301,0)} 0 {if(13<=nodopt,1302,0)} 0 Z-1
Oz2_14 {if(14<=nodopt,1401,0)} 0 {if(14<=nodopt,1402,0)} 0 Z-1
Oz2_15 {if(15<=nodopt,1501,0)} 0 {if(15<=nodopt,1502,0)} 0 Z-1
Oz2_16 {if(16<=nodopt,1601,0)} 0 {if(16<=nodopt,1602,0)} 0 Z-1
*** z^-3
Oz3_1 {if(bpbs,102,0)} 0 {if(bpbs,103,0)} 0 Z-1
Oz3_2 {if(bpbs&2<=nodopt,202,0)} 0 {if(bpbs&2<=nodopt,203,0)} 0 Z-1
Oz3_3 {if(bpbs&3<=nodopt,302,0)} 0 {if(bpbs&3<=nodopt,303,0)} 0 Z-1
Oz3_4 {if(bpbs&4<=nodopt,402,0)} 0 {if(bpbs&4<=nodopt,403,0)} 0 Z-1
Oz3_5 {if(bpbs&5<=nodopt,502,0)} 0 {if(bpbs&5<=nodopt,503,0)} 0 Z-1
Oz3_6 {if(bpbs&6<=nodopt,602,0)} 0 {if(bpbs&6<=nodopt,603,0)} 0 Z-1
Oz3_7 {if(bpbs&7<=nodopt,702,0)} 0 {if(bpbs&7<=nodopt,703,0)} 0 Z-1
Oz3_8 {if(bpbs&8<=nodopt,802,0)} 0 {if(bpbs&8<=nodopt,803,0)} 0 Z-1
Oz3_9 {if(bpbs&9<=nodopt,902,0)} 0 {if(bpbs&9<=nodopt,903,0)} 0 Z-1
Oz3_10 {if(bpbs&10<=nodopt,1002,0)} 0 {if(bpbs&10<=nodopt,1003,0)} 0 Z-1
Oz3_11 {if(bpbs&11<=nodopt,1102,0)} 0 {if(bpbs&11<=nodopt,1103,0)} 0 Z-1
Oz3_12 {if(bpbs&12<=nodopt,1202,0)} 0 {if(bpbs&12<=nodopt,1203,0)} 0 Z-1
Oz3_13 {if(bpbs&13<=nodopt,1302,0)} 0 {if(bpbs&13<=nodopt,1303,0)} 0 Z-1
Oz3_14 {if(bpbs&14<=nodopt,1402,0)} 0 {if(bpbs&14<=nodopt,1403,0)} 0 Z-1
Oz3_15 {if(bpbs&15<=nodopt,1502,0)} 0 {if(bpbs&15<=nodopt,1503,0)} 0 Z-1
Oz3_16 {if(bpbs&16<=nodopt,1602,0)} 0 {if(bpbs&16<=nodopt,1603,0)} 0 Z-1
*** z^-4
Oz4_1 {if(bpbs,103,0)} 0 {if(bpbs,104,0)} 0 Z-1
Oz4_2 {if(bpbs&2<=nodopt,203,0)} 0 {if(bpbs&2<=nodopt,204,0)} 0 Z-1
Oz4_3 {if(bpbs&3<=nodopt,303,0)} 0 {if(bpbs&3<=nodopt,304,0)} 0 Z-1
Oz4_4 {if(bpbs&4<=nodopt,403,0)} 0 {if(bpbs&4<=nodopt,404,0)} 0 Z-1
Oz4_5 {if(bpbs&5<=nodopt,503,0)} 0 {if(bpbs&5<=nodopt,504,0)} 0 Z-1
Oz4_6 {if(bpbs&6<=nodopt,603,0)} 0 {if(bpbs&6<=nodopt,604,0)} 0 Z-1
Oz4_7 {if(bpbs&7<=nodopt,703,0)} 0 {if(bpbs&7<=nodopt,704,0)} 0 Z-1
Oz4_8 {if(bpbs&8<=nodopt,803,0)} 0 {if(bpbs&8<=nodopt,804,0)} 0 Z-1
Oz4_9 {if(bpbs&9<=nodopt,903,0)} 0 {if(bpbs&9<=nodopt,904,0)} 0 Z-1
Oz4_10 {if(bpbs&10<=nodopt,1003,0)} 0 {if(bpbs&10<=nodopt,1004,0)} 0 Z-1
Oz4_11 {if(bpbs&11<=nodopt,1103,0)} 0 {if(bpbs&11<=nodopt,1104,0)} 0 Z-1
Oz4_12 {if(bpbs&12<=nodopt,1203,0)} 0 {if(bpbs&12<=nodopt,1204,0)} 0 Z-1
Oz4_13 {if(bpbs&13<=nodopt,1303,0)} 0 {if(bpbs&13<=nodopt,1304,0)} 0 Z-1
Oz4_14 {if(bpbs&14<=nodopt,1403,0)} 0 {if(bpbs&14<=nodopt,1404,0)} 0 Z-1
Oz4_15 {if(bpbs&15<=nodopt,1503,0)} 0 {if(bpbs&15<=nodopt,1504,0)} 0 Z-1
Oz4_16 {if(bpbs&16<=nodopt,1603,0)} 0 {if(bpbs&16<=nodopt,1604,0)} 0 Z-1
.model z-1 ltra l={1/absf0} c={1/absf0} lininterp
*** (l)tline terminations
R1 {if(lphp,102,104)} 0 1
R2 {if(2<=nodopt,if(lphp,202,204),0)} 0 1
R3 {if(3<=nodopt,if(lphp,302,304),0)} 0 1
R4 {if(4<=nodopt,if(lphp,402,404),0)} 0 1
R5 {if(5<=nodopt,if(lphp,502,504),0)} 0 1
R6 {if(6<=nodopt,if(lphp,602,604),0)} 0 1
R7 {if(7<=nodopt,if(lphp,702,704),0)} 0 1
R8 {if(8<=nodopt,if(lphp,802,804),0)} 0 1
R9 {if(9<=nodopt,if(lphp,902,904),0)} 0 1
R10 {if(10<=nodopt,if(lphp,1002,1004),0)} 0 1
R11 {if(11<=nodopt,if(lphp,1102,1104),0)} 0 1
R12 {if(12<=nodopt,if(lphp,1202,1204),0)} 0 1
R13 {if(13<=nodopt,if(lphp,1302,1304),0)} 0 1
R14 {if(14<=nodopt,if(lphp,1402,1404),0)} 0 1
R15 {if(15<=nodopt,if(lphp,1502,1504),0)} 0 1
R16 {if(16<=nodopt,if(lphp,1602,1604),0)} 0 1
*** end chain resistor
Rx 0 {nodopt} 1
*** buffered output
Gout GROUND out {nodopt} 0 {G/if(nT==-1&evenN,sqrt(1+epsilon_p),1)}
Rout out GROUND 1
*** test area
VN 0.1 0 {Order} AC {10**(Order/20)} {Order}
Va_tran 0.2 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltA0(1)} 0.9 {bltA0(1)}
+ 1.1 {bltA0(2)} 1.9 {bltA0(2)}
+ 2.1 {bltA0(3)} 2.9 {bltA0(3)}
+ 3.1 {bltA0(4)} 3.9 {bltA0(4)}
+ 4.1 {bltA0(5)} 4.9 {bltA0(5)}
+ 5.1 {bltA0(6)} 5.9 {bltA0(6)}
+ 6.1 {bltA0(7)} 6.9 {bltA0(7)}
+ 7.1 {bltA0(8)} 7.9 {bltA0(8)}
+ 8.1 {bltA0(9)} 8.9 {bltA0(9)}
+ 9.1 {bltA0(10)} 9.9 {bltA0(10)}
+ 10.1 {bltA0(11)} 10.9 {bltA0(11)}
+ 11.1 {bltA0(12)} 11.9 {bltA0(12)}
+ 12.1 {bltA0(13)} 12.9 {bltA0(13)}
+ 13.1 {bltA0(14)} 13.9 {bltA0(14)}
+ 14.1 {bltA0(15)} 14.9 {bltA0(15)}
+ 15.1 {bltA0(16)} 15.9 {bltA0(16)}
+ 16.1 {bltA1(1)} 16.9 {bltA1(1)}
+ 17.1 {bltA1(2)} 17.9 {bltA1(2)}
+ 18.1 {bltA1(3)} 18.9 {bltA1(3)}
+ 19.1 {bltA1(4)} 19.9 {bltA1(4)}
+ 20.1 {bltA1(5)} 20.9 {bltA1(5)}
+ 21.1 {bltA1(6)} 21.9 {bltA1(6)}
+ 22.1 {bltA1(7)} 22.9 {bltA1(7)}
+ 23.1 {bltA1(8)} 23.9 {bltA1(8)}
+ 24.1 {bltA1(9)} 24.9 {bltA1(9)}
+ 25.1 {bltA1(10)} 25.9 {bltA1(10)}
+ 26.1 {bltA1(11)} 26.9 {bltA1(11)}
+ 27.1 {bltA1(12)} 27.9 {bltA1(12)}
+ 28.1 {bltA1(13)} 28.9 {bltA1(13)}
+ 29.1 {bltA1(14)} 29.9 {bltA1(14)}
+ 30.1 {bltA1(15)} 30.9 {bltA1(15)}
+ 31.1 {bltA1(16)} 31.9 {bltA1(16)}
+ 32.1 {bltA2(1)} 32.9 {bltA2(1)}
+ 33.1 {bltA2(2)} 33.9 {bltA2(2)}
+ 34.1 {bltA2(3)} 34.9 {bltA2(3)}
+ 35.1 {bltA2(4)} 35.9 {bltA2(4)}
+ 36.1 {bltA2(5)} 36.9 {bltA2(5)}
+ 37.1 {bltA2(6)} 37.9 {bltA2(6)}
+ 38.1 {bltA2(7)} 38.9 {bltA2(7)}
+ 39.1 {bltA2(8)} 39.9 {bltA2(8)}
+ 40.1 {bltA2(9)} 40.9 {bltA2(9)}
+ 41.1 {bltA2(10)} 41.9 {bltA2(10)}
+ 42.1 {bltA2(11)} 42.9 {bltA2(11)}
+ 43.1 {bltA2(12)} 43.9 {bltA2(12)}
+ 44.1 {bltA2(13)} 44.9 {bltA2(13)}
+ 45.1 {bltA2(14)} 45.9 {bltA2(14)}
+ 46.1 {bltA2(15)} 46.9 {bltA2(15)}
+ 47.1 {bltA2(16)} 47.9 {bltA2(16)}
+ 48.1 {bltA3(1)} 48.9 {bltA3(1)}
+ 49.1 {bltA3(2)} 49.9 {bltA3(2)}
+ 50.1 {bltA3(3)} 50.9 {bltA3(3)}
+ 51.1 {bltA3(4)} 51.9 {bltA3(4)}
+ 52.1 {bltA3(5)} 52.9 {bltA3(5)}
+ 53.1 {bltA3(6)} 53.9 {bltA3(6)}
+ 54.1 {bltA3(7)} 54.9 {bltA3(7)}
+ 55.1 {bltA3(8)} 55.9 {bltA3(8)}
+ 56.1 {bltA3(9)} 56.9 {bltA3(9)}
+ 57.1 {bltA3(10)} 57.9 {bltA3(10)}
+ 58.1 {bltA3(11)} 58.9 {bltA3(11)}
+ 59.1 {bltA3(12)} 59.9 {bltA3(12)}
+ 60.1 {bltA3(13)} 60.9 {bltA3(13)}
+ 61.1 {bltA3(14)} 61.9 {bltA3(14)}
+ 62.1 {bltA3(15)} 62.9 {bltA3(15)}
+ 63.1 {bltA3(16)} 63.9 {bltA3(16)}
+ 64.1 {bltA4(1)} 64.9 {bltA4(1)}
+ 65.1 {bltA4(2)} 65.9 {bltA4(2)}
+ 66.1 {bltA4(3)} 66.9 {bltA4(3)}
+ 67.1 {bltA4(4)} 67.9 {bltA4(4)}
+ 68.1 {bltA4(5)} 68.9 {bltA4(5)}
+ 69.1 {bltA4(6)} 69.9 {bltA4(6)}
+ 70.1 {bltA4(7)} 70.9 {bltA4(7)}
+ 71.1 {bltA4(8)} 71.9 {bltA4(8)}
+ 72.1 {bltA4(9)} 72.9 {bltA4(9)}
+ 73.1 {bltA4(10)} 73.9 {bltA4(10)}
+ 74.1 {bltA4(11)} 74.9 {bltA4(11)}
+ 75.1 {bltA4(12)} 75.9 {bltA4(12)}
+ 76.1 {bltA4(13)} 76.9 {bltA4(13)}
+ 77.1 {bltA4(14)} 77.9 {bltA4(14)}
+ 78.1 {bltA4(15)} 78.9 {bltA4(15)}
+ 79.1 {bltA4(16)} 79.9 {bltA4(16)}
Vb_tran 0.3 0 PWL time_scale_factor={sim/80}
+ 0.1 {bltB0(1)} 0.9 {bltB0(1)}
+ 1.1 {bltB0(2)} 1.9 {bltB0(2)}
+ 2.1 {bltB0(3)} 2.9 {bltB0(3)}
+ 3.1 {bltB0(4)} 3.9 {bltB0(4)}
+ 4.1 {bltB0(5)} 4.9 {bltB0(5)}
+ 5.1 {bltB0(6)} 5.9 {bltB0(6)}
+ 6.1 {bltB0(7)} 6.9 {bltB0(7)}
+ 7.1 {bltB0(8)} 7.9 {bltB0(8)}
+ 8.1 {bltB0(9)} 8.9 {bltB0(9)}
+ 9.1 {bltB0(10)} 9.9 {bltB0(10)}
+ 10.1 {bltB0(11)} 10.9 {bltB0(11)}
+ 11.1 {bltB0(12)} 11.9 {bltB0(12)}
+ 12.1 {bltB0(13)} 12.9 {bltB0(13)}
+ 13.1 {bltB0(14)} 13.9 {bltB0(14)}
+ 14.1 {bltB0(15)} 14.9 {bltB0(15)}
+ 15.1 {bltB0(16)} 15.9 {bltB0(16)}
+ 16.1 {bltB1(1)} 16.9 {bltB1(1)}
+ 17.1 {bltB1(2)} 17.9 {bltB1(2)}
+ 18.1 {bltB1(3)} 18.9 {bltB1(3)}
+ 19.1 {bltB1(4)} 19.9 {bltB1(4)}
+ 20.1 {bltB1(5)} 20.9 {bltB1(5)}
+ 21.1 {bltB1(6)} 21.9 {bltB1(6)}
+ 22.1 {bltB1(7)} 22.9 {bltB1(7)}
+ 23.1 {bltB1(8)} 23.9 {bltB1(8)}
+ 24.1 {bltB1(9)} 24.9 {bltB1(9)}
+ 25.1 {bltB1(10)} 25.9 {bltB1(10)}
+ 26.1 {bltB1(11)} 26.9 {bltB1(11)}
+ 27.1 {bltB1(12)} 27.9 {bltB1(12)}
+ 28.1 {bltB1(13)} 28.9 {bltB1(13)}
+ 29.1 {bltB1(14)} 29.9 {bltB1(14)}
+ 30.1 {bltB1(15)} 30.9 {bltB1(15)}
+ 31.1 {bltB1(16)} 31.9 {bltB1(16)}
+ 32.1 {bltB2(1)} 32.9 {bltB2(1)}
+ 33.1 {bltB2(2)} 33.9 {bltB2(2)}
+ 34.1 {bltB2(3)} 34.9 {bltB2(3)}
+ 35.1 {bltB2(4)} 35.9 {bltB2(4)}
+ 36.1 {bltB2(5)} 36.9 {bltB2(5)}
+ 37.1 {bltB2(6)} 37.9 {bltB2(6)}
+ 38.1 {bltB2(7)} 38.9 {bltB2(7)}
+ 39.1 {bltB2(8)} 39.9 {bltB2(8)}
+ 40.1 {bltB2(9)} 40.9 {bltB2(9)}
+ 41.1 {bltB2(10)} 41.9 {bltB2(10)}
+ 42.1 {bltB2(11)} 42.9 {bltB2(11)}
+ 43.1 {bltB2(12)} 43.9 {bltB2(12)}
+ 44.1 {bltB2(13)} 44.9 {bltB2(13)}
+ 45.1 {bltB2(14)} 45.9 {bltB2(14)}
+ 46.1 {bltB2(15)} 46.9 {bltB2(15)}
+ 47.1 {bltB2(16)} 47.9 {bltB2(16)}
+ 48.1 {bltB3(1)} 48.9 {bltB3(1)}
+ 49.1 {bltB3(2)} 49.9 {bltB3(2)}
+ 50.1 {bltB3(3)} 50.9 {bltB3(3)}
+ 51.1 {bltB3(4)} 51.9 {bltB3(4)}
+ 52.1 {bltB3(5)} 52.9 {bltB3(5)}
+ 53.1 {bltB3(6)} 53.9 {bltB3(6)}
+ 54.1 {bltB3(7)} 54.9 {bltB3(7)}
+ 55.1 {bltB3(8)} 55.9 {bltB3(8)}
+ 56.1 {bltB3(9)} 56.9 {bltB3(9)}
+ 57.1 {bltB3(10)} 57.9 {bltB3(10)}
+ 58.1 {bltB3(11)} 58.9 {bltB3(11)}
+ 59.1 {bltB3(12)} 59.9 {bltB3(12)}
+ 60.1 {bltB3(13)} 60.9 {bltB3(13)}
+ 61.1 {bltB3(14)} 61.9 {bltB3(14)}
+ 62.1 {bltB3(15)} 62.9 {bltB3(15)}
+ 63.1 {bltB3(16)} 63.9 {bltB3(16)}
+ 64.1 {bltB4(1)} 64.9 {bltB4(1)}
+ 65.1 {bltB4(2)} 65.9 {bltB4(2)}
+ 66.1 {bltB4(3)} 66.9 {bltB4(3)}
+ 67.1 {bltB4(4)} 67.9 {bltB4(4)}
+ 68.1 {bltB4(5)} 68.9 {bltB4(5)}
+ 69.1 {bltB4(6)} 69.9 {bltB4(6)}
+ 70.1 {bltB4(7)} 70.9 {bltB4(7)}
+ 71.1 {bltB4(8)} 71.9 {bltB4(8)}
+ 72.1 {bltB4(9)} 72.9 {bltB4(9)}
+ 73.1 {bltB4(10)} 73.9 {bltB4(10)}
+ 74.1 {bltB4(11)} 74.9 {bltB4(11)}
+ 75.1 {bltB4(12)} 75.9 {bltB4(12)}
+ 76.1 {bltB4(13)} 76.9 {bltB4(13)}
+ 77.1 {bltB4(14)} 77.9 {bltB4(14)}
+ 78.1 {bltB4(15)} 78.9 {bltB4(15)}
+ 79.1 {bltB4(16)} 79.9 {bltB4(16)}
.ends Cauer_IIR
********************************************************************************
********************************************************************************
*
*       ~~ FINITE IMPULSE RESPONSE ~~
*
********************************************************************************
********************************************************************************
*
* sigma=<0..inf>= factor for the parametric windows:
*                   Tukey             : <0..1>
*                   Lanczos           : <1:3>
*                   Welch             : <1..inf>
*                   Connes            : <1..inf>
*                   Cauchy            : <+0..inf>
*                   Poisson           : <0..inf>
*                   Hann-Poisson      : <0..inf>
*                   power of cosine   : <0..inf>
*                   gaussian (gen.)   : <+0..inf>
*                   hyperbolic cosine :<+0..inf>
*                 (the last one is also a function of {As})
* nT=<-1,0:inf> = 1. number of symbol periods for the pulse-shaping windows, it
*               is automatically determined if N>0, but needs to be specified if
*               N=0. Strictly positive integer.
*                 E.g.: for +/-6 symbols => nT=12. Integer, <-1,1:inf>;
*               = 2. adjustment to avoid zero valued mutipliers at the end of
*               the window (think "null Tap" as a mnemonic) for Hann,
*               Hann-Poisson, power of cosine, Blackman and Nuttall windows
*               (Bartlett is supposed to have them zero). Integer, <0,1>;
*               = 3. nT=0 => DC gain normalization. It only applies to LP/BS,
*               the pulse-shaping windows, differentiator and the half-band. If
*               nT=-1 => un-normalized output (starts from <1+/-delta>).
*                 Note: for pulse-shaping windows, having both unscaled response
*               (nT=-1) and nr. of symbols specified (nT>0) is only possible if
*               N>0 & nT=-1, so that {nT} is determined internally. (FIR) 
*               = 4. specifies whether odd (nT=1) or even (nT=0) sampling is
*               used for IDCT/IDST. Integer, <0,1>. (FIR_FS)
* Win=<0:29>    = windowing functions. The marked* ones are parametric and make
*               use of {sigma}, while the double-marked** ones are a function of
*               {As}:
*                  0  = rectangular
*                  1  = Bartlett
*                  2  = Bartlett-Hann
*                  3  = Blackman
*                  4  = Blackman-Harris, 3 terms
*                  5  = Blackman-Harris, 4 terms
*                  6  = Blackman-Nuttall
*                  7  = Bohman
*                  8  = Cauchy*
*                  9  = Connes*
*                 10  = exact Blackman
*                 11  = exponential**
*                 12  = flat top
*                 13  = gaussian (window)*
*                 14  = generic cosine
*                 15  = Hamming
*                 16  = Hann
*                 17  = Hann-Poisson*
*                 18  = hyperbolic cosine**
*                 19  = Kaiser**
*               Kaiser's Bessel function is truncated to 1+20 terms, 5 decimals
*               accurate for As=120dB.
*                 20  = Kaiser-Bessel
*                 21  = Lanczos*
*                 22  = Nuttall
*                 23  = Parzen
*                 24  = Poisson*
*                 25  = power of cosine*
*                 26  = spline transition*
*               (except FIR_FS, setting Win=27 results in rectangular window)
*                 27  = triangular
*                 28  = Tukey*
*                 29  = Welch*
*                 ##  = Dolph-Chebyshev** (separated in FIR2).
*                 ##  = Frequency sampling method (separated in FIR_FS).
*               The FIR_FS requires altering its subcircuit: search here for
*               ".subckt FIR_FS", then locate the "fspl(x)" function, and then
*               add the frequency domain response for the interval <0..f0/2>.
* Func=<0:6>    = the possible additional functions/combinations.
*                 0 = basic moving average
*               - normal filter behaviour, types I & II:
*                 1 = LP/HP/BP/BS for any of the windows above
*               - pulse-shaping:
*                 2 = Gaussian
*                 3 = raised cosine
*                 4 = (square) root raised cosine
*               The number of symbol periods is given by {nT}, while the
*               oversampling (OS) and the beta (beta) are calculated from
*               {BWp} and {BWs}:
*                 OS=round[f0/(BWs+BWp)]
*                 beta=(BWs-BWp)/(BWs+BWp)
*               Note: "OS" is rounded to circumvent some precision issues, so
*               non-integer values will be rounded to the nearest integer. If
*               unscaled magnitude is desired (nT=-1), {N} must be set so that
*               {nT} will be automatically calculated. E.g. if nr. of syms per
*               sec is 12 and OS=4, then N=12*4+1=49 and {nT} can be set to -1.
*               - type III & IV:
*                 5 = differentiator
*                 6 = Hilbert transformer
*               This allows for windowing with functions from Func=<2:6>.
*               (FIR,FIR2)
*               For FIR_FS, {Func} is only used to determine the type.
* sim [s]       = total .TRAN simulation time, for pins 0.2 and 0.3. E.g. if the
*               command is ".TRAN 25m" then sim=25m. (optional)
* SH=<0,1>      = disables/enables (forces) a real S&H behaviour. There are two
*               scenarios:
*                 1. In .TRAN, if decimation/interpolation is needed, {SH}
*                 must be enabled (exception z^-M filters); for normal behaviour
*                 (Fact=1), if the input is already sampled, {SH} may be left
*                 null.
*                 2. In .AC, {SH} must be set to zero.
* f0  [Hz]      = sampling frequency.
* fc  [Hz]      = center frequency.
* BWp [Hz]      = pass-band bandwidth.
* BWs [Hz]      = stop-band bandwidth.
* G=<-inf..inf> = gain, linear.
* As  [dB]      = stop-band attenuation, used only by the Kaiser, exponential,
*               hyperbolic cosine (FIR) and Dolph-Chebyshev (FIR2) windows.
* N=<0:257>     = 1. length of the filter. If N=0, it's automatically determined
*  or           as follows:
* N=<0:1025>      - for pulse shaping windows: N=nT*OS+1.
* (FIRx only)     - for FIR, FIRx: Kaiser's formula.
*                 - for FIR2: Saramaki's formula.
*               The type is automatically determined by {Func} and {N}:
*                   Func  |   N   | Type
*                 --------+-------+------
*                   1     | odd   | I
*                         | even  | II
*                 --------+-------+------
*                   2,3,4 | only type I valid
*                 --------+-------+------
*                   5,6   | odd   | III
*                         | even  | IV
*               = 2. number of samples for the moving-average, must be N>0. The
*               averaging period is given by the reciprocal, {f0}, specified as
*               N/f0, e.g. for a 10ms averaging period of 64 samples => N=64 and
*               f0=64*1/10ms=6400Hz.
*
* - Hidden:
*
* a[0:4]  = five terms general cosine window.
* tr  [s] = clock's rising time, needs SH=1; default 1m/f0 (opt.).
* td  [s] = clock delay, default null (opt.).
*
************************
*
*       FIR
*
************************
*
* Parameters: sigma, nT, Win, Func, SH, Norm, f0, fc, BWp, BWs, G, As, N
*   (optional: a0, a1, a2, a3, a4, sim, tr, td, ref)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
************************
.subckt FIR IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sigma=0.5 nT=0 a0=0.2 a1=0.4 a2=0.3 a3=53m a4=-3m
+ Win=1 Func=1 sim=1 SH=1 Norm=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 As=60 N=33
+ tr=1m/absf0 td=0 ref=0.5
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1) BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,(fp1+fp2)/2)
+ wtw1=2*pi*abs(BWs-BWp)/(1+u(fc))/absf0 Type=1+mod(M,2)+2*(Func>4)
+ wc1=pi*abs(4*fc-(BWs+BWp))/(1+u(fc))/absf0 wc2=if( fc==0, 0, 2*pi*(fc+(BWs+BWp)/4)/absf0 )
+ Order=ceil( if(As>=21, (As-7.95)/2.285, 5.79 )/wtw1 )
+ M=if( N>0, N-1, if( Func>1 & Func<5, nT*OS, Order ) )
+ case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp<BWs) )
*** special parameters and functions
.param KaiserBeta=if(As<50, 584m2*(max(21,As)-21)**0.4+78m86*(max(21,As)-21),110m2*(max(21,As)-8.7))
.func Bessel_I0(x) {(cosh(x)+2*(cosh(0.970941817426052*x)+cosh(0.8854560256532099*x)+cosh(0.7485107481711011*x)+
+ cosh(0.5680647467311558*x)+cosh(0.3546048870425356*x)+cosh(0.120536680255323*x)))/13}
.param OS=round(absf0/(BWp+BWs)) beta=(BWs-BWp)/(BWs+BWp)
+ alfa_ex=(0.1808-0.4275m*As)*As-3.516 alfa_ch=(0.1677-0.3251m*As)*As-3.149
+ impulse0=table(case,0,0,1,wc1/pi,2,1-wc1/pi,3,1-(wc2-wc1)/pi,4,(wc2-wc1)/pi)
*** topology functions and constants
.func mod(x,y) {x-int(x/y)*y}
.func Gh_out(x) {(mod(x,sqrtM)+1.2)*(x<=M)}
.func Gh_in_row(x) {if(x<sqrtM,667,if(x==M,floorM,mod(int(x/sqrtM),ceilM)))*(x<=M)}
.func Gh_in(x) {if(x==M,floorM,mod(int(x/sqrtM),ceilM))*(x<=M)}
.func Tz_IO(x,y) {x*(y<=floorM)}
.func Tx_IO(x,y) {x*(sqrtM==1|sqrtM>=y)}
.func Gx_out(x) {1.1*(sqrtM>=x)}
.func Gx_in(x,y) {x*(sqrtM>=y)}
.param sqrtM=ceil(M**0.5) absf0=abs(f0) floorM=int(M/sqrtM) ceilM=ceil(M/sqrtM) tz1=sqrtM/absf0 tz2=1/absf0
*** ideal impulse response
.func impulse(x) {if(x==M/2, impulse0, (-1)**case*(sin(wc2*(x-M/2))-sin(wc1*(x-M/2)))/(pi*(x-M/2)))*sqrtM}
*** windowing functions
.func rectangular(x) {1}
.func Bartlett(x) {2*min(x,M-x)/M}
.func BartlettHann(x) {0.62-0.48*abs(x/M-.5)+0.38*cos(2*pi*(x/M-.5))}
.func Blackman(x) {0.08*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-0.5*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.42}
.func BlackmanHarris3(x) {0.07922*cos((4*x*pi)/M)-0.49755*cos((2*x*pi)/M)+0.42323}
.func BlackmanHarris4(x) {-0.01168*cos((6*x*pi)/M)+0.14128*cos((4*x*pi)/M)-0.48829*cos((2*x*pi)/M)+0.35875}
.func BlackmanNuttall(x) {-0.0106411*cos((6*x*pi)/M)+0.1365995*cos((4*x*pi)/M)-0.4891775*cos((2*x*pi)/M)+0.3635819}
.func Bohman(x) {(1-abs(x-M/2)*2/M)*cos(2*pi*abs(x-M/2)/M)+sin(2*pi*abs(x-M/2)/M)/pi}
.func Cauchy(x) {1/(4*sigma**2*((x-M/2)/M)**2+1)}
.func Connes(x) {Welch(x)**2}
.func exactBlackman(x) {(1430*cos((4*x*pi)/M)-9240*cos((2*x*pi)/M)+7938)/18608}
.func exponential(x) {exp(alfa_ex*sqrt(1-(2*(x-M/2)/M)**2))/exp(alfa_ex)}
.func flatTop(x) {0.006947368*cos((8*x*pi)/M)-0.083578947*cos((6*x*pi)/M)+
+ 0.277263258*cos((4*x*pi)/M)-0.41663158*cos((2*x*pi)/M)+0.21557895}
.func gaussian(x) {exp(-2*( (x-M/2)/(sigma+1u)/M )**2)}
.func genericCos(x) {a4*cos((8*x*pi)/M)-a3*cos((6*x*pi)/M)+a2*cos((4*x*pi)/M)-a1*cos((2*x*pi)/M)+a0}
.func Hamming(x) {-0.46*cos((2*x*pi)/M)+0.54}
.func Hann(x) {-cos((2*(x+u(nT))*pi)/(M+2*u(nT)))/2+0.5}
.func HannPoisson(x) {Hann(x)*Poisson(x)}
.func hyperbolicCos(x) {(cosh(alfa_ch*sqrt(1-(2/M*(x-M/2))**2))/cosh(alfa_ch))**sigma}
.func Kaiser(x) {Bessel_I0(2*KaiserBeta/M*sqrt(x*(M-x)) )/Bessel_I0(KaiserBeta)}
.func KaiserBessel(x) {-1m*cos((6*x*pi)/M)+0.099*cos((4*x*pi)/M)-0.498*cos((2*x*pi)/M)+0.402}
.func Lanczos(x) {if(x==M/2, 1, if( x>M/2*(1-1/ceil(sigma)) &
+ x<M/2*(1+1/ceil(sigma)), sin(2*pi*sigma*(x-M/2)/M)/(2*pi*sigma*(x-M/2)/M), 0))}
.func Nuttall(x) {-0.012604*cos((6*(x+u(nT))*pi)/(M+2*u(nT)))+0.144232*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-
+ 0.487396*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.355768}
.func Parzen(x) {if( x<=(M-1)/4 | x>=(M-1)*.75, 16*(.5-abs(x-M/2)/M)**3,1-24*((x-M/2)/M)**2+48*(abs(x-M/2)/M)**3)}
.func Poisson(x) {exp(-2*sigma*abs(x-M/2)/M)}
.func powerOfCos(x) {Hann(x)**sigma}
.func spline(x) {if(x==M/2, 1, sin(wtw1*(x-M/2)/2/ceil(sigma))/(wtw1*(x-M/2)/2/ceil(sigma)) )**ceil(sigma)}
.func triangular(x) {1-2*abs(x-M/2)/(M+1+mod(M,2))}
.func Tukey(x) {if((x>=M/2*sigma & x<=M-M/2*sigma) | sigma==0, 1,.5+cos(2*pi/(sigma+1u)*(x/M-(x>M/2)+sgn(x-M/2)*sigma/2))/2)}
.func Welch(x) {1-4*((x-M/2)/M/(sigma+1u))**2}
*** pulse-shaping
.func raisedCos(x) {if(beta==0, impulse(x), if(x==M/2, 1, if(abs(x-(M+sgn(x-M/2+0.25)*OS/beta)/2)<1p,
+ beta/2*sin(pi/2/beta), sin(pi*(x-M/2)/OS)/(pi*(x-M/2)/OS)*cos(pi*beta*(x-M/2)/OS)/(1-4*(beta*(x-M/2)/OS)**2) )))}
.func sqrtRaisedCos(x) {if(beta==0, impulse(x), if( x==M/2, 1-beta+4*beta/pi,
+ if( abs(x-M/2-sgn(x-M/2+0.5)*OS/4/beta)<1p, beta/sqrt(2)*((1+2/pi)*sin(pi/4/beta)+(1-2/pi)*cos(pi/4/beta)),
+ (sin(pi*(x-M/2)/OS*(1-beta))+4*beta*(x-M/2)/OS*cos(pi*(x-M/2)/OS*(1+beta)))/(pi*(x-M/2)/OS*(1-(4*beta*(x-M/2)/OS)**2)) )))}
.func gaussianPulse(x) {sqrt(2*pi/ln(2))*beta/OS*exp(-2/ln(2)*(pi*(x-M/2)/OS*beta)**2)}
*** type III and IV choices
.func differentiator(x) {if(x==0^x==M/2^x==M, 0, wc1*cos((x-M/2)*wc1)/pi/(x-M/2)-sin(wc1*(x-M/2))/pi/(x-M/2)**2)}
.func Hilbert(x) {if(mod(M,2), 1/pi/(x-M/2), if(x==M/2, 0, (1-cos(pi*(x-M/2)))/pi/(x-M/2) ))}
*** weights
.func weights(x) {table(Win,0,rectangular(x),1,Bartlett(x),2,BartlettHann(x),
+ 3,Blackman(x),4,BlackmanHarris3(x),5,BlackmanHarris4(x),6,flatTop(x),
+ 7,Bohman(x),8,Cauchy(x),9,Connes(x),10,exactBlackman(x),11,exponential(x),
+ 12,flatTop(x),13,gaussian(x),14,genericCos(x),15,Hamming(x),16,Hann(x),
+ 17,HannPoisson(x),18,hyperbolicCos(x),19,Kaiser(x),20,KaiserBessel(x),
+ 21,Lanczos(x),22,Nuttall(x),23,Parzen(x),24,Poisson(x),25,powerOfCos(x),
+ 26,spline(x),27,triangular(x),28,Tukey(x),29,Welch(x))}
*** various choices/functions, in combination with w[n]
.func term(x) {table(Func,0,N**-u(N),1,impulse(x),2,gaussianPulse(x),
+ 3,raisedCos(x),4,sqrtRaisedCos(x),5,differentiator(x),6,Hilbert(x),7,1)}
*** coefficients, h[n]
.func hn(x) {if(x>M, 0, weights(x)*term(x))}
*** sum of terms for...
.param Sum=hn(0)+hn(1)+hn(2)+hn(3)+hn(4)+hn(5)+hn(6)+hn(7)+hn(8)+hn(9)+hn(10)+
+ hn(11)+hn(12)+hn(13)+hn(14)+hn(15)+hn(16)+hn(17)+hn(18)+hn(19)+hn(20)+
+ hn(21)+hn(22)+hn(23)+hn(24)+hn(25)+hn(26)+hn(27)+hn(28)+hn(29)+hn(30)+
+ hn(31)+hn(32)+hn(33)+hn(34)+hn(35)+hn(36)+hn(37)+hn(38)+hn(39)+hn(40)+
+ hn(41)+hn(42)+hn(43)+hn(44)+hn(45)+hn(46)+hn(47)+hn(48)+hn(49)+hn(50)+
+ hn(51)+hn(52)+hn(53)+hn(54)+hn(55)+hn(56)+hn(57)+hn(58)+hn(59)+hn(60)+
+ hn(61)+hn(62)+hn(63)+hn(64)+hn(65)+hn(66)+hn(67)+hn(68)+hn(69)+hn(70)+
+ hn(71)+hn(72)+hn(73)+hn(74)+hn(75)+hn(76)+hn(77)+hn(78)+hn(79)+hn(80)+
+ hn(81)+hn(82)+hn(83)+hn(84)+hn(85)+hn(86)+hn(87)+hn(88)+hn(89)+hn(90)+
+ hn(91)+hn(92)+hn(93)+hn(94)+hn(95)+hn(96)+hn(97)+hn(98)+hn(99)+hn(100)+
+ hn(101)+hn(102)+hn(103)+hn(104)+hn(105)+hn(106)+hn(107)+hn(108)+hn(109)+hn(110)+
+ hn(111)+hn(112)+hn(113)+hn(114)+hn(115)+hn(116)+hn(117)+hn(118)+hn(119)+hn(120)+
+ hn(121)+hn(122)+hn(123)+hn(124)+hn(125)+hn(126)+hn(127)+hn(128)+hn(129)+hn(130)+
+ hn(131)+hn(132)+hn(133)+hn(134)+hn(135)+hn(136)+hn(137)+hn(138)+hn(139)+hn(140)+
+ hn(141)+hn(142)+hn(143)+hn(144)+hn(145)+hn(146)+hn(147)+hn(148)+hn(149)+hn(150)+
+ hn(151)+hn(152)+hn(153)+hn(154)+hn(155)+hn(156)+hn(157)+hn(158)+hn(159)+hn(160)+
+ hn(161)+hn(162)+hn(163)+hn(164)+hn(165)+hn(166)+hn(167)+hn(168)+hn(169)+hn(170)+
+ hn(171)+hn(172)+hn(173)+hn(174)+hn(175)+hn(176)+hn(177)+hn(178)+hn(179)+hn(180)+
+ hn(181)+hn(182)+hn(183)+hn(184)+hn(185)+hn(186)+hn(187)+hn(188)+hn(189)+hn(190)+
+ hn(191)+hn(192)+hn(193)+hn(194)+hn(195)+hn(196)+hn(197)+hn(198)+hn(199)+hn(200)+
+ hn(201)+hn(202)+hn(203)+hn(204)+hn(205)+hn(206)+hn(207)+hn(208)+hn(209)+hn(210)+
+ hn(211)+hn(212)+hn(213)+hn(214)+hn(215)+hn(216)+hn(217)+hn(218)+hn(219)+hn(220)+
+ hn(221)+hn(222)+hn(223)+hn(224)+hn(225)+hn(226)+hn(227)+hn(228)+hn(229)+hn(230)+
+ hn(231)+hn(232)+hn(233)+hn(234)+hn(235)+hn(236)+hn(237)+hn(238)+hn(239)+hn(240)+
+ hn(241)+hn(242)+hn(243)+hn(244)+hn(245)+hn(246)+hn(247)+hn(248)+hn(249)+hn(250)+
+ hn(251)+hn(252)+hn(253)+hn(254)+hn(255)+hn(256)
*** ...gain normalization
.param Gain=if(Norm, table(Func,1,if(mod(case,2),Sum,sqrtM),2,1,3,Sum,4,Sum,5,2*pi*BWp/absf0,6,1), 1)
*** buffered input
Gin 0 999 in GROUND 2
Rin 999 0 1
Vbypass {inv(SH)*999} {inv(SH)*667}
*** S&H input
Ash {999*SH} 0 {0.4*SH} 0 0 0 {667*SH} 0 SAMPLEHOLD Rout=1 Vhigh=1G Vlow=-1G ref={ref}
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** intermediary stage
Rinter {floorM} 0 1
*** output stage...
Rout 0 1.1 1
Gexit GROUND out 1.1 0 {G/Gain/sqrtM**(Func==1&inv(Norm))}
Rexit out GROUND 1
*** row of delay lines
Tz1 667 0 1 0 Td={tz1} Z0=1
Tz2 {Tz_IO(1,2)} 0 {Tz_IO(2,2)} 0 Td={tz1} Z0=1
Tz3 {Tz_IO(2,3)} 0 {Tz_IO(3,3)} 0 Td={tz1} Z0=1
Tz4 {Tz_IO(3,4)} 0 {Tz_IO(4,4)} 0 Td={tz1} Z0=1
Tz5 {Tz_IO(4,5)} 0 {Tz_IO(5,5)} 0 Td={tz1} Z0=1
Tz6 {Tz_IO(5,6)} 0 {Tz_IO(6,6)} 0 Td={tz1} Z0=1
Tz7 {Tz_IO(6,7)} 0 {Tz_IO(7,7)} 0 Td={tz1} Z0=1
Tz8 {Tz_IO(7,8)} 0 {Tz_IO(8,8)} 0 Td={tz1} Z0=1
Tz9 {Tz_IO(8,9)} 0 {Tz_IO(9,9)} 0 Td={tz1} Z0=1
Tz10 {Tz_IO(9,10)} 0 {Tz_IO(10,10)} 0 Td={tz1} Z0=1
Tz11 {Tz_IO(10,11)} 0 {Tz_IO(11,11)} 0 Td={tz1} Z0=1
Tz12 {Tz_IO(11,12)} 0 {Tz_IO(12,12)} 0 Td={tz1} Z0=1
Tz13 {Tz_IO(12,13)} 0 {Tz_IO(13,13)} 0 Td={tz1} Z0=1
Tz14 {Tz_IO(13,14)} 0 {Tz_IO(14,14)} 0 Td={tz1} Z0=1
Tz15 {Tz_IO(14,15)} 0 {Tz_IO(15,15)} 0 Td={tz1} Z0=1
Tz16 {Tz_IO(15,16)} 0 {Tz_IO(16,16)} 0 Td={tz1} Z0=1
*** h[0:M], filling the array in sequential order, the rest - disabled
*** first one is always active
RGh 0 1.2 1
Gh_0 0 1.2 667 0 {hn(0)}
*** there can be maximum 16 multipliers/column with input node 667;
*** these take care of it
Gh_1 0 {Gh_out(1)} {Gh_in_row(1)} 0 {hn(1)}
Gh_2 0 {Gh_out(2)} {Gh_in_row(2)} 0 {hn(2)}
Gh_3 0 {Gh_out(3)} {Gh_in_row(3)} 0 {hn(3)}
Gh_4 0 {Gh_out(4)} {Gh_in_row(4)} 0 {hn(4)}
Gh_5 0 {Gh_out(5)} {Gh_in_row(5)} 0 {hn(5)}
Gh_6 0 {Gh_out(6)} {Gh_in_row(6)} 0 {hn(6)}
Gh_7 0 {Gh_out(7)} {Gh_in_row(7)} 0 {hn(7)}
Gh_8 0 {Gh_out(8)} {Gh_in_row(8)} 0 {hn(8)}
Gh_9 0 {Gh_out(9)} {Gh_in_row(9)} 0 {hn(9)}
Gh_10 0 {Gh_out(10)} {Gh_in_row(10)} 0 {hn(10)}
Gh_11 0 {Gh_out(11)} {Gh_in_row(11)} 0 {hn(11)}
Gh_12 0 {Gh_out(12)} {Gh_in_row(12)} 0 {hn(12)}
Gh_13 0 {Gh_out(13)} {Gh_in_row(13)} 0 {hn(13)}
Gh_14 0 {Gh_out(14)} {Gh_in_row(14)} 0 {hn(14)}
Gh_15 0 {Gh_out(15)} {Gh_in_row(15)} 0 {hn(15)}
Gh_16 0 {Gh_out(16)} {Gh_in_row(16)} 0 {hn(16)}
*** the rest of the array's 'coefficients'
Gh_17 0 {Gh_out(17)} {Gh_in(17)} 0 {hn(17)}
Gh_18 0 {Gh_out(18)} {Gh_in(18)} 0 {hn(18)}
Gh_19 0 {Gh_out(19)} {Gh_in(19)} 0 {hn(19)}
Gh_20 0 {Gh_out(20)} {Gh_in(20)} 0 {hn(20)}
Gh_21 0 {Gh_out(21)} {Gh_in(21)} 0 {hn(21)}
Gh_22 0 {Gh_out(22)} {Gh_in(22)} 0 {hn(22)}
Gh_23 0 {Gh_out(23)} {Gh_in(23)} 0 {hn(23)}
Gh_24 0 {Gh_out(24)} {Gh_in(24)} 0 {hn(24)}
Gh_25 0 {Gh_out(25)} {Gh_in(25)} 0 {hn(25)}
Gh_26 0 {Gh_out(26)} {Gh_in(26)} 0 {hn(26)}
Gh_27 0 {Gh_out(27)} {Gh_in(27)} 0 {hn(27)}
Gh_28 0 {Gh_out(28)} {Gh_in(28)} 0 {hn(28)}
Gh_29 0 {Gh_out(29)} {Gh_in(29)} 0 {hn(29)}
Gh_30 0 {Gh_out(30)} {Gh_in(30)} 0 {hn(30)}
Gh_31 0 {Gh_out(31)} {Gh_in(31)} 0 {hn(31)}
Gh_32 0 {Gh_out(32)} {Gh_in(32)} 0 {hn(32)}
Gh_33 0 {Gh_out(33)} {Gh_in(33)} 0 {hn(33)}
Gh_34 0 {Gh_out(34)} {Gh_in(34)} 0 {hn(34)}
Gh_35 0 {Gh_out(35)} {Gh_in(35)} 0 {hn(35)}
Gh_36 0 {Gh_out(36)} {Gh_in(36)} 0 {hn(36)}
Gh_37 0 {Gh_out(37)} {Gh_in(37)} 0 {hn(37)}
Gh_38 0 {Gh_out(38)} {Gh_in(38)} 0 {hn(38)}
Gh_39 0 {Gh_out(39)} {Gh_in(39)} 0 {hn(39)}
Gh_40 0 {Gh_out(40)} {Gh_in(40)} 0 {hn(40)}
Gh_41 0 {Gh_out(41)} {Gh_in(41)} 0 {hn(41)}
Gh_42 0 {Gh_out(42)} {Gh_in(42)} 0 {hn(42)}
Gh_43 0 {Gh_out(43)} {Gh_in(43)} 0 {hn(43)}
Gh_44 0 {Gh_out(44)} {Gh_in(44)} 0 {hn(44)}
Gh_45 0 {Gh_out(45)} {Gh_in(45)} 0 {hn(45)}
Gh_46 0 {Gh_out(46)} {Gh_in(46)} 0 {hn(46)}
Gh_47 0 {Gh_out(47)} {Gh_in(47)} 0 {hn(47)}
Gh_48 0 {Gh_out(48)} {Gh_in(48)} 0 {hn(48)}
Gh_49 0 {Gh_out(49)} {Gh_in(49)} 0 {hn(49)}
Gh_50 0 {Gh_out(50)} {Gh_in(50)} 0 {hn(50)}
Gh_51 0 {Gh_out(51)} {Gh_in(51)} 0 {hn(51)}
Gh_52 0 {Gh_out(52)} {Gh_in(52)} 0 {hn(52)}
Gh_53 0 {Gh_out(53)} {Gh_in(53)} 0 {hn(53)}
Gh_54 0 {Gh_out(54)} {Gh_in(54)} 0 {hn(54)}
Gh_55 0 {Gh_out(55)} {Gh_in(55)} 0 {hn(55)}
Gh_56 0 {Gh_out(56)} {Gh_in(56)} 0 {hn(56)}
Gh_57 0 {Gh_out(57)} {Gh_in(57)} 0 {hn(57)}
Gh_58 0 {Gh_out(58)} {Gh_in(58)} 0 {hn(58)}
Gh_59 0 {Gh_out(59)} {Gh_in(59)} 0 {hn(59)}
Gh_60 0 {Gh_out(60)} {Gh_in(60)} 0 {hn(60)}
Gh_61 0 {Gh_out(61)} {Gh_in(61)} 0 {hn(61)}
Gh_62 0 {Gh_out(62)} {Gh_in(62)} 0 {hn(62)}
Gh_63 0 {Gh_out(63)} {Gh_in(63)} 0 {hn(63)}
Gh_64 0 {Gh_out(64)} {Gh_in(64)} 0 {hn(64)}
Gh_65 0 {Gh_out(65)} {Gh_in(65)} 0 {hn(65)}
Gh_66 0 {Gh_out(66)} {Gh_in(66)} 0 {hn(66)}
Gh_67 0 {Gh_out(67)} {Gh_in(67)} 0 {hn(67)}
Gh_68 0 {Gh_out(68)} {Gh_in(68)} 0 {hn(68)}
Gh_69 0 {Gh_out(69)} {Gh_in(69)} 0 {hn(69)}
Gh_70 0 {Gh_out(70)} {Gh_in(70)} 0 {hn(70)}
Gh_71 0 {Gh_out(71)} {Gh_in(71)} 0 {hn(71)}
Gh_72 0 {Gh_out(72)} {Gh_in(72)} 0 {hn(72)}
Gh_73 0 {Gh_out(73)} {Gh_in(73)} 0 {hn(73)}
Gh_74 0 {Gh_out(74)} {Gh_in(74)} 0 {hn(74)}
Gh_75 0 {Gh_out(75)} {Gh_in(75)} 0 {hn(75)}
Gh_76 0 {Gh_out(76)} {Gh_in(76)} 0 {hn(76)}
Gh_77 0 {Gh_out(77)} {Gh_in(77)} 0 {hn(77)}
Gh_78 0 {Gh_out(78)} {Gh_in(78)} 0 {hn(78)}
Gh_79 0 {Gh_out(79)} {Gh_in(79)} 0 {hn(79)}
Gh_80 0 {Gh_out(80)} {Gh_in(80)} 0 {hn(80)}
Gh_81 0 {Gh_out(81)} {Gh_in(81)} 0 {hn(81)}
Gh_82 0 {Gh_out(82)} {Gh_in(82)} 0 {hn(82)}
Gh_83 0 {Gh_out(83)} {Gh_in(83)} 0 {hn(83)}
Gh_84 0 {Gh_out(84)} {Gh_in(84)} 0 {hn(84)}
Gh_85 0 {Gh_out(85)} {Gh_in(85)} 0 {hn(85)}
Gh_86 0 {Gh_out(86)} {Gh_in(86)} 0 {hn(86)}
Gh_87 0 {Gh_out(87)} {Gh_in(87)} 0 {hn(87)}
Gh_88 0 {Gh_out(88)} {Gh_in(88)} 0 {hn(88)}
Gh_89 0 {Gh_out(89)} {Gh_in(89)} 0 {hn(89)}
Gh_90 0 {Gh_out(90)} {Gh_in(90)} 0 {hn(90)}
Gh_91 0 {Gh_out(91)} {Gh_in(91)} 0 {hn(91)}
Gh_92 0 {Gh_out(92)} {Gh_in(92)} 0 {hn(92)}
Gh_93 0 {Gh_out(93)} {Gh_in(93)} 0 {hn(93)}
Gh_94 0 {Gh_out(94)} {Gh_in(94)} 0 {hn(94)}
Gh_95 0 {Gh_out(95)} {Gh_in(95)} 0 {hn(95)}
Gh_96 0 {Gh_out(96)} {Gh_in(96)} 0 {hn(96)}
Gh_97 0 {Gh_out(97)} {Gh_in(97)} 0 {hn(97)}
Gh_98 0 {Gh_out(98)} {Gh_in(98)} 0 {hn(98)}
Gh_99 0 {Gh_out(99)} {Gh_in(99)} 0 {hn(99)}
Gh_100 0 {Gh_out(100)} {Gh_in(100)} 0 {hn(100)}
Gh_101 0 {Gh_out(101)} {Gh_in(101)} 0 {hn(101)}
Gh_102 0 {Gh_out(102)} {Gh_in(102)} 0 {hn(102)}
Gh_103 0 {Gh_out(103)} {Gh_in(103)} 0 {hn(103)}
Gh_104 0 {Gh_out(104)} {Gh_in(104)} 0 {hn(104)}
Gh_105 0 {Gh_out(105)} {Gh_in(105)} 0 {hn(105)}
Gh_106 0 {Gh_out(106)} {Gh_in(106)} 0 {hn(106)}
Gh_107 0 {Gh_out(107)} {Gh_in(107)} 0 {hn(107)}
Gh_108 0 {Gh_out(108)} {Gh_in(108)} 0 {hn(108)}
Gh_109 0 {Gh_out(109)} {Gh_in(109)} 0 {hn(109)}
Gh_110 0 {Gh_out(110)} {Gh_in(110)} 0 {hn(110)}
Gh_111 0 {Gh_out(111)} {Gh_in(111)} 0 {hn(111)}
Gh_112 0 {Gh_out(112)} {Gh_in(112)} 0 {hn(112)}
Gh_113 0 {Gh_out(113)} {Gh_in(113)} 0 {hn(113)}
Gh_114 0 {Gh_out(114)} {Gh_in(114)} 0 {hn(114)}
Gh_115 0 {Gh_out(115)} {Gh_in(115)} 0 {hn(115)}
Gh_116 0 {Gh_out(116)} {Gh_in(116)} 0 {hn(116)}
Gh_117 0 {Gh_out(117)} {Gh_in(117)} 0 {hn(117)}
Gh_118 0 {Gh_out(118)} {Gh_in(118)} 0 {hn(118)}
Gh_119 0 {Gh_out(119)} {Gh_in(119)} 0 {hn(119)}
Gh_120 0 {Gh_out(120)} {Gh_in(120)} 0 {hn(120)}
Gh_121 0 {Gh_out(121)} {Gh_in(121)} 0 {hn(121)}
Gh_122 0 {Gh_out(122)} {Gh_in(122)} 0 {hn(122)}
Gh_123 0 {Gh_out(123)} {Gh_in(123)} 0 {hn(123)}
Gh_124 0 {Gh_out(124)} {Gh_in(124)} 0 {hn(124)}
Gh_125 0 {Gh_out(125)} {Gh_in(125)} 0 {hn(125)}
Gh_126 0 {Gh_out(126)} {Gh_in(126)} 0 {hn(126)}
Gh_127 0 {Gh_out(127)} {Gh_in(127)} 0 {hn(127)}
Gh_128 0 {Gh_out(128)} {Gh_in(128)} 0 {hn(128)}
Gh_129 0 {Gh_out(129)} {Gh_in(129)} 0 {hn(129)}
Gh_130 0 {Gh_out(130)} {Gh_in(130)} 0 {hn(130)}
Gh_131 0 {Gh_out(131)} {Gh_in(131)} 0 {hn(131)}
Gh_132 0 {Gh_out(132)} {Gh_in(132)} 0 {hn(132)}
Gh_133 0 {Gh_out(133)} {Gh_in(133)} 0 {hn(133)}
Gh_134 0 {Gh_out(134)} {Gh_in(134)} 0 {hn(134)}
Gh_135 0 {Gh_out(135)} {Gh_in(135)} 0 {hn(135)}
Gh_136 0 {Gh_out(136)} {Gh_in(136)} 0 {hn(136)}
Gh_137 0 {Gh_out(137)} {Gh_in(137)} 0 {hn(137)}
Gh_138 0 {Gh_out(138)} {Gh_in(138)} 0 {hn(138)}
Gh_139 0 {Gh_out(139)} {Gh_in(139)} 0 {hn(139)}
Gh_140 0 {Gh_out(140)} {Gh_in(140)} 0 {hn(140)}
Gh_141 0 {Gh_out(141)} {Gh_in(141)} 0 {hn(141)}
Gh_142 0 {Gh_out(142)} {Gh_in(142)} 0 {hn(142)}
Gh_143 0 {Gh_out(143)} {Gh_in(143)} 0 {hn(143)}
Gh_144 0 {Gh_out(144)} {Gh_in(144)} 0 {hn(144)}
Gh_145 0 {Gh_out(145)} {Gh_in(145)} 0 {hn(145)}
Gh_146 0 {Gh_out(146)} {Gh_in(146)} 0 {hn(146)}
Gh_147 0 {Gh_out(147)} {Gh_in(147)} 0 {hn(147)}
Gh_148 0 {Gh_out(148)} {Gh_in(148)} 0 {hn(148)}
Gh_149 0 {Gh_out(149)} {Gh_in(149)} 0 {hn(149)}
Gh_150 0 {Gh_out(150)} {Gh_in(150)} 0 {hn(150)}
Gh_151 0 {Gh_out(151)} {Gh_in(151)} 0 {hn(151)}
Gh_152 0 {Gh_out(152)} {Gh_in(152)} 0 {hn(152)}
Gh_153 0 {Gh_out(153)} {Gh_in(153)} 0 {hn(153)}
Gh_154 0 {Gh_out(154)} {Gh_in(154)} 0 {hn(154)}
Gh_155 0 {Gh_out(155)} {Gh_in(155)} 0 {hn(155)}
Gh_156 0 {Gh_out(156)} {Gh_in(156)} 0 {hn(156)}
Gh_157 0 {Gh_out(157)} {Gh_in(157)} 0 {hn(157)}
Gh_158 0 {Gh_out(158)} {Gh_in(158)} 0 {hn(158)}
Gh_159 0 {Gh_out(159)} {Gh_in(159)} 0 {hn(159)}
Gh_160 0 {Gh_out(160)} {Gh_in(160)} 0 {hn(160)}
Gh_161 0 {Gh_out(161)} {Gh_in(161)} 0 {hn(161)}
Gh_162 0 {Gh_out(162)} {Gh_in(162)} 0 {hn(162)}
Gh_163 0 {Gh_out(163)} {Gh_in(163)} 0 {hn(163)}
Gh_164 0 {Gh_out(164)} {Gh_in(164)} 0 {hn(164)}
Gh_165 0 {Gh_out(165)} {Gh_in(165)} 0 {hn(165)}
Gh_166 0 {Gh_out(166)} {Gh_in(166)} 0 {hn(166)}
Gh_167 0 {Gh_out(167)} {Gh_in(167)} 0 {hn(167)}
Gh_168 0 {Gh_out(168)} {Gh_in(168)} 0 {hn(168)}
Gh_169 0 {Gh_out(169)} {Gh_in(169)} 0 {hn(169)}
Gh_170 0 {Gh_out(170)} {Gh_in(170)} 0 {hn(170)}
Gh_171 0 {Gh_out(171)} {Gh_in(171)} 0 {hn(171)}
Gh_172 0 {Gh_out(172)} {Gh_in(172)} 0 {hn(172)}
Gh_173 0 {Gh_out(173)} {Gh_in(173)} 0 {hn(173)}
Gh_174 0 {Gh_out(174)} {Gh_in(174)} 0 {hn(174)}
Gh_175 0 {Gh_out(175)} {Gh_in(175)} 0 {hn(175)}
Gh_176 0 {Gh_out(176)} {Gh_in(176)} 0 {hn(176)}
Gh_177 0 {Gh_out(177)} {Gh_in(177)} 0 {hn(177)}
Gh_178 0 {Gh_out(178)} {Gh_in(178)} 0 {hn(178)}
Gh_179 0 {Gh_out(179)} {Gh_in(179)} 0 {hn(179)}
Gh_180 0 {Gh_out(180)} {Gh_in(180)} 0 {hn(180)}
Gh_181 0 {Gh_out(181)} {Gh_in(181)} 0 {hn(181)}
Gh_182 0 {Gh_out(182)} {Gh_in(182)} 0 {hn(182)}
Gh_183 0 {Gh_out(183)} {Gh_in(183)} 0 {hn(183)}
Gh_184 0 {Gh_out(184)} {Gh_in(184)} 0 {hn(184)}
Gh_185 0 {Gh_out(185)} {Gh_in(185)} 0 {hn(185)}
Gh_186 0 {Gh_out(186)} {Gh_in(186)} 0 {hn(186)}
Gh_187 0 {Gh_out(187)} {Gh_in(187)} 0 {hn(187)}
Gh_188 0 {Gh_out(188)} {Gh_in(188)} 0 {hn(188)}
Gh_189 0 {Gh_out(189)} {Gh_in(189)} 0 {hn(189)}
Gh_190 0 {Gh_out(190)} {Gh_in(190)} 0 {hn(190)}
Gh_191 0 {Gh_out(191)} {Gh_in(191)} 0 {hn(191)}
Gh_192 0 {Gh_out(192)} {Gh_in(192)} 0 {hn(192)}
Gh_193 0 {Gh_out(193)} {Gh_in(193)} 0 {hn(193)}
Gh_194 0 {Gh_out(194)} {Gh_in(194)} 0 {hn(194)}
Gh_195 0 {Gh_out(195)} {Gh_in(195)} 0 {hn(195)}
Gh_196 0 {Gh_out(196)} {Gh_in(196)} 0 {hn(196)}
Gh_197 0 {Gh_out(197)} {Gh_in(197)} 0 {hn(197)}
Gh_198 0 {Gh_out(198)} {Gh_in(198)} 0 {hn(198)}
Gh_199 0 {Gh_out(199)} {Gh_in(199)} 0 {hn(199)}
Gh_200 0 {Gh_out(200)} {Gh_in(200)} 0 {hn(200)}
Gh_201 0 {Gh_out(201)} {Gh_in(201)} 0 {hn(201)}
Gh_202 0 {Gh_out(202)} {Gh_in(202)} 0 {hn(202)}
Gh_203 0 {Gh_out(203)} {Gh_in(203)} 0 {hn(203)}
Gh_204 0 {Gh_out(204)} {Gh_in(204)} 0 {hn(204)}
Gh_205 0 {Gh_out(205)} {Gh_in(205)} 0 {hn(205)}
Gh_206 0 {Gh_out(206)} {Gh_in(206)} 0 {hn(206)}
Gh_207 0 {Gh_out(207)} {Gh_in(207)} 0 {hn(207)}
Gh_208 0 {Gh_out(208)} {Gh_in(208)} 0 {hn(208)}
Gh_209 0 {Gh_out(209)} {Gh_in(209)} 0 {hn(209)}
Gh_210 0 {Gh_out(210)} {Gh_in(210)} 0 {hn(210)}
Gh_211 0 {Gh_out(211)} {Gh_in(211)} 0 {hn(211)}
Gh_212 0 {Gh_out(212)} {Gh_in(212)} 0 {hn(212)}
Gh_213 0 {Gh_out(213)} {Gh_in(213)} 0 {hn(213)}
Gh_214 0 {Gh_out(214)} {Gh_in(214)} 0 {hn(214)}
Gh_215 0 {Gh_out(215)} {Gh_in(215)} 0 {hn(215)}
Gh_216 0 {Gh_out(216)} {Gh_in(216)} 0 {hn(216)}
Gh_217 0 {Gh_out(217)} {Gh_in(217)} 0 {hn(217)}
Gh_218 0 {Gh_out(218)} {Gh_in(218)} 0 {hn(218)}
Gh_219 0 {Gh_out(219)} {Gh_in(219)} 0 {hn(219)}
Gh_220 0 {Gh_out(220)} {Gh_in(220)} 0 {hn(220)}
Gh_221 0 {Gh_out(221)} {Gh_in(221)} 0 {hn(221)}
Gh_222 0 {Gh_out(222)} {Gh_in(222)} 0 {hn(222)}
Gh_223 0 {Gh_out(223)} {Gh_in(223)} 0 {hn(223)}
Gh_224 0 {Gh_out(224)} {Gh_in(224)} 0 {hn(224)}
Gh_225 0 {Gh_out(225)} {Gh_in(225)} 0 {hn(225)}
Gh_226 0 {Gh_out(226)} {Gh_in(226)} 0 {hn(226)}
Gh_227 0 {Gh_out(227)} {Gh_in(227)} 0 {hn(227)}
Gh_228 0 {Gh_out(228)} {Gh_in(228)} 0 {hn(228)}
Gh_229 0 {Gh_out(229)} {Gh_in(229)} 0 {hn(229)}
Gh_230 0 {Gh_out(230)} {Gh_in(230)} 0 {hn(230)}
Gh_231 0 {Gh_out(231)} {Gh_in(231)} 0 {hn(231)}
Gh_232 0 {Gh_out(232)} {Gh_in(232)} 0 {hn(232)}
Gh_233 0 {Gh_out(233)} {Gh_in(233)} 0 {hn(233)}
Gh_234 0 {Gh_out(234)} {Gh_in(234)} 0 {hn(234)}
Gh_235 0 {Gh_out(235)} {Gh_in(235)} 0 {hn(235)}
Gh_236 0 {Gh_out(236)} {Gh_in(236)} 0 {hn(236)}
Gh_237 0 {Gh_out(237)} {Gh_in(237)} 0 {hn(237)}
Gh_238 0 {Gh_out(238)} {Gh_in(238)} 0 {hn(238)}
Gh_239 0 {Gh_out(239)} {Gh_in(239)} 0 {hn(239)}
Gh_240 0 {Gh_out(240)} {Gh_in(240)} 0 {hn(240)}
Gh_241 0 {Gh_out(241)} {Gh_in(241)} 0 {hn(241)}
Gh_242 0 {Gh_out(242)} {Gh_in(242)} 0 {hn(242)}
Gh_243 0 {Gh_out(243)} {Gh_in(243)} 0 {hn(243)}
Gh_244 0 {Gh_out(244)} {Gh_in(244)} 0 {hn(244)}
Gh_245 0 {Gh_out(245)} {Gh_in(245)} 0 {hn(245)}
Gh_246 0 {Gh_out(246)} {Gh_in(246)} 0 {hn(246)}
Gh_247 0 {Gh_out(247)} {Gh_in(247)} 0 {hn(247)}
Gh_248 0 {Gh_out(248)} {Gh_in(248)} 0 {hn(248)}
Gh_249 0 {Gh_out(249)} {Gh_in(249)} 0 {hn(249)}
Gh_250 0 {Gh_out(250)} {Gh_in(250)} 0 {hn(250)}
Gh_251 0 {Gh_out(251)} {Gh_in(251)} 0 {hn(251)}
Gh_252 0 {Gh_out(252)} {Gh_in(252)} 0 {hn(252)}
Gh_253 0 {Gh_out(253)} {Gh_in(253)} 0 {hn(253)}
Gh_254 0 {Gh_out(254)} {Gh_in(254)} 0 {hn(254)}
Gh_255 0 {Gh_out(255)} {Gh_in(255)} 0 {hn(255)}
Gh_256 0 {Gh_out(256)} {Gh_in(256)} 0 {hn(256)}
*** column of delay lines
Tx2 2.2 0 0 2.3 Td={tz2} Z0=1
Tx3 {Tx_IO(3.2,3)} 0 {Tx_IO(3.3,3)} 0 Td={2*tz2} Z0=1
Tx4 {Tx_IO(4.2,4)} 0 0 {Tx_IO(4.3,4)} Td={3*tz2} Z0=1
Tx5 {Tx_IO(5.2,5)} 0 {Tx_IO(5.3,5)} 0 Td={4*tz2} Z0=1
Tx6 {Tx_IO(6.2,6)} 0 0 {Tx_IO(6.3,6)} Td={5*tz2} Z0=1
Tx7 {Tx_IO(7.2,7)} 0 {Tx_IO(7.3,7)} 0 Td={6*tz2} Z0=1
Tx8 {Tx_IO(8.2,8)} 0 0 {Tx_IO(8.3,8)} Td={7*tz2} Z0=1
Tx9 {Tx_IO(9.2,9)} 0 {Tx_IO(9.3,9)} 0 Td={8*tz2} Z0=1
Tx10 {Tx_IO(10.2,10)} 0 0 {Tx_IO(10.3,10)} Td={9*tz2} Z0=1
Tx11 {Tx_IO(11.2,11)} 0 {Tx_IO(11.3,11)} 0 Td={10*tz2} Z0=1
Tx12 {Tx_IO(12.2,12)} 0 0 {Tx_IO(12.3,12)} Td={11*tz2} Z0=1
Tx13 {Tx_IO(13.2,13)} 0 {Tx_IO(13.3,13)} 0 Td={12*tz2} Z0=1
Tx14 {Tx_IO(14.2,14)} 0 0 {Tx_IO(14.3,14)} Td={13*tz2} Z0=1
Tx15 {Tx_IO(15.2,15)} 0 {Tx_IO(15.3,15)} 0 Td={14*tz2} Z0=1
Tx16 {Tx_IO(16.2,16)} 0 0 {Tx_IO(16.3,16)} Td={15*tz2} Z0=1
*** load resistances for the tlines making the rows
RTx2 0 2.3 1
RTx3 0 {Tx_IO(3.3,3)} 1
RTx4 0 {Tx_IO(4.3,4)} 1
RTx5 0 {Tx_IO(5.3,5)} 1
RTx6 0 {Tx_IO(6.3,6)} 1
RTx7 0 {Tx_IO(7.3,7)} 1
RTx8 0 {Tx_IO(8.3,8)} 1
RTx9 0 {Tx_IO(9.3,9)} 1
RTx10 0 {Tx_IO(10.3,10)} 1
RTx11 0 {Tx_IO(11.3,11)} 1
RTx12 0 {Tx_IO(12.3,12)} 1
RTx13 0 {Tx_IO(13.3,13)} 1
RTx14 0 {Tx_IO(14.3,14)} 1
RTx15 0 {Tx_IO(15.3,15)} 1
RTx16 0 {Tx_IO(16.3,16)} 1
*** summers for the rows of delays
Gx1 0 1.1 1.2 2.3 1
Gx3 0 {Gx_out(3)} {Gx_in(3.3,3)} {Gx_in(4.3,4)} 1
Gx5 0 {Gx_out(5)} {Gx_in(5.3,5)} {Gx_in(6.3,6)} 1
Gx7 0 {Gx_out(7)} {Gx_in(7.3,7)} {Gx_in(8.3,8)} 1
Gx9 0 {Gx_out(9)} {Gx_in(9.3,9)} {Gx_in(10.3,10)} 1
Gx11 0 {Gx_out(11)} {Gx_in(11.3,11)} {Gx_in(12.3,12)} 1
Gx13 0 {Gx_out(13)} {Gx_in(13.3,13)} {Gx_in(14.3,14)} 1
Gx15 0 {Gx_out(15)} {Gx_in(15.3,15)} {Gx_in(16.3,16)} 1
*** testing area
VM 0.1 0 {M} AC {10**(M/20)} {M}
.param simM=M/sim hnGain=1/Gain/sqrtM**(Func==1&inv(Norm))
Bw 0.2 0 v=weights(round(time*simM))
Bcoef 0.3 0 v=hn(round(time*simM))*hnGain
.ends FIR
################################################################################
#
#       FIRx (Nmax=1025 and ltline instead of tline)
#
################################################################################
.subckt FIRx IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sigma=0.5 nT=0 a0=0.2 a1=0.4 a2=0.3 a3=53m a4=-3m
+ Win=1 Func=1 sim=1 SH=1 Norm=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 As=60 N=33
+ tr=1m/absf0 td=0 ref=0.5
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1) BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,(fp1+fp2)/2)
+ wtw1=2*pi*abs(BWs-BWp)/(1+u(fc))/absf0 Type=1+mod(M,2)+2*(Func>4)
+ wc1=pi*abs(4*fc-(BWs+BWp))/(1+u(fc))/absf0 wc2=if( fc==0, 0, 2*pi*(fc+(BWs+BWp)/4)/absf0 )
+ Order=ceil( if(As>=21, (As-7.95)/2.285, 5.79 )/wtw1 )
+ M=if( N>0, N-1, if( Func>1 & Func<5, nT*OS, Order ) )
+ case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp<BWs) )
*** special parameters and functions
.param KaiserBeta=if(As<50, 584m2*(max(21,As)-21)**0.4+78m86*(max(21,As)-21),110m2*(max(21,As)-8.7))
.func Bessel_I0(x) {(cosh(x)+2*(cosh(0.970941817426052*x)+cosh(0.8854560256532099*x)+cosh(0.7485107481711011*x)+
+ cosh(0.5680647467311558*x)+cosh(0.3546048870425356*x)+cosh(0.120536680255323*x)))/13}
.param OS=round(absf0/(BWp+BWs)) beta=(BWs-BWp)/(BWs+BWp)
+ alfa_ex=(0.1808-0.4275m*As)*As-3.516 alfa_ch=(0.1677-0.3251m*As)*As-3.149
+ impulse0=table(case,0,0,1,wc1/pi,2,1-wc1/pi,3,1-(wc2-wc1)/pi,4,(wc2-wc1)/pi)
*** topology functions and constants
.func mod(x,y) {x-int(x/y)*y}
.func Gh_out(x) {(mod(x,sqrtM)+1.2)*(x<=M)}
.func Gh_in_row(x) {if(x<sqrtM,667,if(x==M,floorM,mod(int(x/sqrtM),ceilM)))*(x<=M)}
.func Gh_in(x) {if(x==M,floorM,mod(int(x/sqrtM),ceilM))*(x<=M)}
.func Tz_IO(x,y) {x*(y<=floorM)}
.func Tx_IO(x,y) {x*(sqrtM==1|sqrtM>=y)}
.func Gx_out(x) {1.1*(sqrtM>=x)}
.func Gx_in(x,y) {x*(sqrtM>=y)}
.param sqrtM=ceil(M**0.5) absf0=abs(f0) floorM=int(M/sqrtM) ceilM=ceil(M/sqrtM) tz1=sqrtM/absf0 tz2=1/absf0
*** ideal impulse response
.func impulse(x) {if(x==M/2, impulse0, (-1)**case*(sin(wc2*(x-M/2))-sin(wc1*(x-M/2)))/(pi*(x-M/2)))*sqrtM}
*** windowing functions
.func rectangular(x) {1}
.func Bartlett(x) {2*min(x,M-x)/M}
.func BartlettHann(x) {0.62-0.48*abs(x/M-.5)+0.38*cos(2*pi*(x/M-.5))}
.func Blackman(x) {0.08*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-0.5*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.42}
.func BlackmanHarris3(x) {0.07922*cos((4*x*pi)/M)-0.49755*cos((2*x*pi)/M)+0.42323}
.func BlackmanHarris4(x) {-0.01168*cos((6*x*pi)/M)+0.14128*cos((4*x*pi)/M)-0.48829*cos((2*x*pi)/M)+0.35875}
.func BlackmanNuttall(x) {-0.0106411*cos((6*x*pi)/M)+0.1365995*cos((4*x*pi)/M)-0.4891775*cos((2*x*pi)/M)+0.3635819}
.func Bohman(x) {(1-abs(x-M/2)*2/M)*cos(2*pi*abs(x-M/2)/M)+sin(2*pi*abs(x-M/2)/M)/pi}
.func Cauchy(x) {1/(4*sigma**2*((x-M/2)/M)**2+1)}
.func Connes(x) {Welch(x)**2}
.func exactBlackman(x) {(1430*cos((4*x*pi)/M)-9240*cos((2*x*pi)/M)+7938)/18608}
.func exponential(x) {exp(alfa_ex*sqrt(1-(2*(x-M/2)/M)**2))/exp(alfa_ex)}
.func flatTop(x) {0.006947368*cos((8*x*pi)/M)-0.083578947*cos((6*x*pi)/M)+
+ 0.277263258*cos((4*x*pi)/M)-0.41663158*cos((2*x*pi)/M)+0.21557895}
.func gaussian(x) {exp(-2*( (x-M/2)/(sigma+1u)/M )**2)}
.func genericCos(x) {a4*cos((8*x*pi)/M)-a3*cos((6*x*pi)/M)+a2*cos((4*x*pi)/M)-a1*cos((2*x*pi)/M)+a0}
.func Hamming(x) {-0.46*cos((2*x*pi)/M)+0.54}
.func Hann(x) {-cos((2*(x+u(nT))*pi)/(M+2*u(nT)))/2+0.5}
.func HannPoisson(x) {Hann(x)*Poisson(x)}
.func hyperbolicCos(x) {(cosh(alfa_ch*sqrt(1-(2/M*(x-M/2))**2))/cosh(alfa_ch))**sigma}
.func Kaiser(x) {Bessel_I0(2*KaiserBeta/M*sqrt(x*(M-x)) )/Bessel_I0(KaiserBeta)}
.func KaiserBessel(x) {-1m*cos((6*x*pi)/M)+0.099*cos((4*x*pi)/M)-0.498*cos((2*x*pi)/M)+0.402}
.func Lanczos(x) {if(x==M/2, 1, if( x>M/2*(1-1/ceil(sigma)) &
+ x<M/2*(1+1/ceil(sigma)), sin(2*pi*sigma*(x-M/2)/M)/(2*pi*sigma*(x-M/2)/M), 0))}
.func Nuttall(x) {-0.012604*cos((6*(x+u(nT))*pi)/(M+2*u(nT)))+0.144232*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-
+ 0.487396*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.355768}
.func Parzen(x) {if( x<=(M-1)/4 | x>=(M-1)*.75, 16*(.5-abs(x-M/2)/M)**3,1-24*((x-M/2)/M)**2+48*(abs(x-M/2)/M)**3)}
.func Poisson(x) {exp(-2*sigma*abs(x-M/2)/M)}
.func powerOfCos(x) {Hann(x)**sigma}
.func spline(x) {if(x==M/2, 1, sin(wtw1*(x-M/2)/2/ceil(sigma))/(wtw1*(x-M/2)/2/ceil(sigma)) )**ceil(sigma)}
.func triangular(x) {1-2*abs(x-M/2)/(M+1+mod(M,2))}
.func Tukey(x) {if((x>=M/2*sigma & x<=M-M/2*sigma) | sigma==0, 1,.5+cos(2*pi/(sigma+1u)*(x/M-(x>M/2)+sgn(x-M/2)*sigma/2))/2)}
.func Welch(x) {1-4*((x-M/2)/M/(sigma+1u))**2}
*** pulse-shaping
.func raisedCos(x) {if(beta==0, impulse(x), if(x==M/2, 1, if(abs(x-(M+sgn(x-M/2+0.25)*OS/beta)/2)<1p,
+ beta/2*sin(pi/2/beta), sin(pi*(x-M/2)/OS)/(pi*(x-M/2)/OS)*cos(pi*beta*(x-M/2)/OS)/(1-4*(beta*(x-M/2)/OS)**2) )))}
.func sqrtRaisedCos(x) {if(beta==0, impulse(x), if( x==M/2, 1-beta+4*beta/pi,
+ if( abs(x-M/2-sgn(x-M/2+0.5)*OS/4/beta)<1p, beta/sqrt(2)*((1+2/pi)*sin(pi/4/beta)+(1-2/pi)*cos(pi/4/beta)),
+ (sin(pi*(x-M/2)/OS*(1-beta))+4*beta*(x-M/2)/OS*cos(pi*(x-M/2)/OS*(1+beta)))/(pi*(x-M/2)/OS*(1-(4*beta*(x-M/2)/OS)**2)) )))}
.func gaussianPulse(x) {sqrt(2*pi/ln(2))*beta/OS*exp(-2/ln(2)*(pi*(x-M/2)/OS*beta)**2)}
*** type III and IV choices
.func differentiator(x) {if(x==0^x==M/2^x==M, 0, wc1*cos((x-M/2)*wc1)/pi/(x-M/2)-sin(wc1*(x-M/2))/pi/(x-M/2)**2)}
.func Hilbert(x) {if(mod(M,2), 1/pi/(x-M/2), if(x==M/2, 0, (1-cos(pi*(x-M/2)))/pi/(x-M/2) ))}
*** weights
.func weights(x) {table(Win,0,rectangular(x),1,Bartlett(x),2,BartlettHann(x),
+ 3,Blackman(x),4,BlackmanHarris3(x),5,BlackmanHarris4(x),6,flatTop(x),
+ 7,Bohman(x),8,Cauchy(x),9,Connes(x),10,exactBlackman(x),11,exponential(x),
+ 12,flatTop(x),13,gaussian(x),14,genericCos(x),15,Hamming(x),16,Hann(x),
+ 17,HannPoisson(x),18,hyperbolicCos(x),19,Kaiser(x),20,KaiserBessel(x),
+ 21,Lanczos(x),22,Nuttall(x),23,Parzen(x),24,Poisson(x),25,powerOfCos(x),
+ 26,spline(x),27,triangular(x),28,Tukey(x),29,Welch(x))}
*** various choices/functions, in combination with w[n]
.func term(x) {table(Func,0,N**-u(N),1,Impulse(x),2,GaussianPulse(x),3,raisedCos(x),4,sqrtRaisedCos(x),5,differentiator(x),6,Hilbert(x))}
*** coefficients, h[n]
.func hn(x) {if( x>M, 0, weights(x)*term(x) )}
*** sum of terms for...
.param Sum=hn(0)+hn(1)+hn(2)+hn(3)+hn(4)+hn(5)+hn(6)+hn(7)+hn(8)+hn(9)+hn(10)+
+ hn(11)+hn(12)+hn(13)+hn(14)+hn(15)+hn(16)+hn(17)+hn(18)+hn(19)+hn(20)+
+ hn(21)+hn(22)+hn(23)+hn(24)+hn(25)+hn(26)+hn(27)+hn(28)+hn(29)+hn(30)+
+ hn(31)+hn(32)+hn(33)+hn(34)+hn(35)+hn(36)+hn(37)+hn(38)+hn(39)+hn(40)+
+ hn(41)+hn(42)+hn(43)+hn(44)+hn(45)+hn(46)+hn(47)+hn(48)+hn(49)+hn(50)+
+ hn(51)+hn(52)+hn(53)+hn(54)+hn(55)+hn(56)+hn(57)+hn(58)+hn(59)+hn(60)+
+ hn(61)+hn(62)+hn(63)+hn(64)+hn(65)+hn(66)+hn(67)+hn(68)+hn(69)+hn(70)+
+ hn(71)+hn(72)+hn(73)+hn(74)+hn(75)+hn(76)+hn(77)+hn(78)+hn(79)+hn(80)+
+ hn(81)+hn(82)+hn(83)+hn(84)+hn(85)+hn(86)+hn(87)+hn(88)+hn(89)+hn(90)+
+ hn(91)+hn(92)+hn(93)+hn(94)+hn(95)+hn(96)+hn(97)+hn(98)+hn(99)+hn(100)+
+ hn(101)+hn(102)+hn(103)+hn(104)+hn(105)+hn(106)+hn(107)+hn(108)+hn(109)+hn(110)+
+ hn(111)+hn(112)+hn(113)+hn(114)+hn(115)+hn(116)+hn(117)+hn(118)+hn(119)+hn(120)+
+ hn(121)+hn(122)+hn(123)+hn(124)+hn(125)+hn(126)+hn(127)+hn(128)+hn(129)+hn(130)+
+ hn(131)+hn(132)+hn(133)+hn(134)+hn(135)+hn(136)+hn(137)+hn(138)+hn(139)+hn(140)+
+ hn(141)+hn(142)+hn(143)+hn(144)+hn(145)+hn(146)+hn(147)+hn(148)+hn(149)+hn(150)+
+ hn(151)+hn(152)+hn(153)+hn(154)+hn(155)+hn(156)+hn(157)+hn(158)+hn(159)+hn(160)+
+ hn(161)+hn(162)+hn(163)+hn(164)+hn(165)+hn(166)+hn(167)+hn(168)+hn(169)+hn(170)+
+ hn(171)+hn(172)+hn(173)+hn(174)+hn(175)+hn(176)+hn(177)+hn(178)+hn(179)+hn(180)+
+ hn(181)+hn(182)+hn(183)+hn(184)+hn(185)+hn(186)+hn(187)+hn(188)+hn(189)+hn(190)+
+ hn(191)+hn(192)+hn(193)+hn(194)+hn(195)+hn(196)+hn(197)+hn(198)+hn(199)+hn(200)+
+ hn(201)+hn(202)+hn(203)+hn(204)+hn(205)+hn(206)+hn(207)+hn(208)+hn(209)+hn(210)+
+ hn(211)+hn(212)+hn(213)+hn(214)+hn(215)+hn(216)+hn(217)+hn(218)+hn(219)+hn(220)+
+ hn(221)+hn(222)+hn(223)+hn(224)+hn(225)+hn(226)+hn(227)+hn(228)+hn(229)+hn(230)+
+ hn(231)+hn(232)+hn(233)+hn(234)+hn(235)+hn(236)+hn(237)+hn(238)+hn(239)+hn(240)+
+ hn(241)+hn(242)+hn(243)+hn(244)+hn(245)+hn(246)+hn(247)+hn(248)+hn(249)+hn(250)+
+ hn(251)+hn(252)+hn(253)+hn(254)+hn(255)+hn(256)+hn(257)+hn(258)+hn(259)+hn(260)+
+ hn(261)+hn(262)+hn(263)+hn(264)+hn(265)+hn(266)+hn(267)+hn(268)+hn(269)+hn(270)+
+ hn(271)+hn(272)+hn(273)+hn(274)+hn(275)+hn(276)+hn(277)+hn(278)+hn(279)+hn(280)+
+ hn(281)+hn(282)+hn(283)+hn(284)+hn(285)+hn(286)+hn(287)+hn(288)+hn(289)+hn(290)+
+ hn(291)+hn(292)+hn(293)+hn(294)+hn(295)+hn(296)+hn(297)+hn(298)+hn(299)+hn(300)+
+ hn(301)+hn(302)+hn(303)+hn(304)+hn(305)+hn(306)+hn(307)+hn(308)+hn(309)+hn(310)+
+ hn(311)+hn(312)+hn(313)+hn(314)+hn(315)+hn(316)+hn(317)+hn(318)+hn(319)+hn(320)+
+ hn(321)+hn(322)+hn(323)+hn(324)+hn(325)+hn(326)+hn(327)+hn(328)+hn(329)+hn(330)+
+ hn(331)+hn(332)+hn(333)+hn(334)+hn(335)+hn(336)+hn(337)+hn(338)+hn(339)+hn(340)+
+ hn(341)+hn(342)+hn(343)+hn(344)+hn(345)+hn(346)+hn(347)+hn(348)+hn(349)+hn(350)+
+ hn(351)+hn(352)+hn(353)+hn(354)+hn(355)+hn(356)+hn(357)+hn(358)+hn(359)+hn(360)+
+ hn(361)+hn(362)+hn(363)+hn(364)+hn(365)+hn(366)+hn(367)+hn(368)+hn(369)+hn(370)+
+ hn(371)+hn(372)+hn(373)+hn(374)+hn(375)+hn(376)+hn(377)+hn(378)+hn(379)+hn(380)+
+ hn(381)+hn(382)+hn(383)+hn(384)+hn(385)+hn(386)+hn(387)+hn(388)+hn(389)+hn(390)+
+ hn(391)+hn(392)+hn(393)+hn(394)+hn(395)+hn(396)+hn(397)+hn(398)+hn(399)+hn(400)+
+ hn(401)+hn(402)+hn(403)+hn(404)+hn(405)+hn(406)+hn(407)+hn(408)+hn(409)+hn(410)+
+ hn(411)+hn(412)+hn(413)+hn(414)+hn(415)+hn(416)+hn(417)+hn(418)+hn(419)+hn(420)+
+ hn(421)+hn(422)+hn(423)+hn(424)+hn(425)+hn(426)+hn(427)+hn(428)+hn(429)+hn(430)+
+ hn(431)+hn(432)+hn(433)+hn(434)+hn(435)+hn(436)+hn(437)+hn(438)+hn(439)+hn(440)+
+ hn(441)+hn(442)+hn(443)+hn(444)+hn(445)+hn(446)+hn(447)+hn(448)+hn(449)+hn(450)+
+ hn(451)+hn(452)+hn(453)+hn(454)+hn(455)+hn(456)+hn(457)+hn(458)+hn(459)+hn(460)+
+ hn(461)+hn(462)+hn(463)+hn(464)+hn(465)+hn(466)+hn(467)+hn(468)+hn(469)+hn(470)+
+ hn(471)+hn(472)+hn(473)+hn(474)+hn(475)+hn(476)+hn(477)+hn(478)+hn(479)+hn(480)+
+ hn(481)+hn(482)+hn(483)+hn(484)+hn(485)+hn(486)+hn(487)+hn(488)+hn(489)+hn(490)+
+ hn(491)+hn(492)+hn(493)+hn(494)+hn(495)+hn(496)+hn(497)+hn(498)+hn(499)+hn(500)+
+ hn(501)+hn(502)+hn(503)+hn(504)+hn(505)+hn(506)+hn(507)+hn(508)+hn(509)+hn(510)+
+ hn(511)+hn(512)+hn(513)+hn(514)+hn(515)+hn(516)+hn(517)+hn(518)+hn(519)+hn(520)+
+ hn(521)+hn(522)+hn(523)+hn(524)+hn(525)+hn(526)+hn(527)+hn(528)+hn(529)+hn(530)+
+ hn(531)+hn(532)+hn(533)+hn(534)+hn(535)+hn(536)+hn(537)+hn(538)+hn(539)+hn(540)+
+ hn(541)+hn(542)+hn(543)+hn(544)+hn(545)+hn(546)+hn(547)+hn(548)+hn(549)+hn(550)+
+ hn(551)+hn(552)+hn(553)+hn(554)+hn(555)+hn(556)+hn(557)+hn(558)+hn(559)+hn(560)+
+ hn(561)+hn(562)+hn(563)+hn(564)+hn(565)+hn(566)+hn(567)+hn(568)+hn(569)+hn(570)+
+ hn(571)+hn(572)+hn(573)+hn(574)+hn(575)+hn(576)+hn(577)+hn(578)+hn(579)+hn(580)+
+ hn(581)+hn(582)+hn(583)+hn(584)+hn(585)+hn(586)+hn(587)+hn(588)+hn(589)+hn(590)+
+ hn(591)+hn(592)+hn(593)+hn(594)+hn(595)+hn(596)+hn(597)+hn(598)+hn(599)+hn(600)+
+ hn(601)+hn(602)+hn(603)+hn(604)+hn(605)+hn(606)+hn(607)+hn(608)+hn(609)+hn(610)+
+ hn(611)+hn(612)+hn(613)+hn(614)+hn(615)+hn(616)+hn(617)+hn(618)+hn(619)+hn(620)+
+ hn(621)+hn(622)+hn(623)+hn(624)+hn(625)+hn(626)+hn(627)+hn(628)+hn(629)+hn(630)+
+ hn(631)+hn(632)+hn(633)+hn(634)+hn(635)+hn(636)+hn(637)+hn(638)+hn(639)+hn(640)+
+ hn(641)+hn(642)+hn(643)+hn(644)+hn(645)+hn(646)+hn(647)+hn(648)+hn(649)+hn(650)+
+ hn(651)+hn(652)+hn(653)+hn(654)+hn(655)+hn(656)+hn(657)+hn(658)+hn(659)+hn(660)+
+ hn(661)+hn(662)+hn(663)+hn(664)+hn(665)+hn(666)+hn(667)+hn(668)+hn(669)+hn(670)+
+ hn(671)+hn(672)+hn(673)+hn(674)+hn(675)+hn(676)+hn(677)+hn(678)+hn(679)+hn(680)+
+ hn(681)+hn(682)+hn(683)+hn(684)+hn(685)+hn(686)+hn(687)+hn(688)+hn(689)+hn(690)+
+ hn(691)+hn(692)+hn(693)+hn(694)+hn(695)+hn(696)+hn(697)+hn(698)+hn(699)+hn(700)+
+ hn(701)+hn(702)+hn(703)+hn(704)+hn(705)+hn(706)+hn(707)+hn(708)+hn(709)+hn(710)+
+ hn(711)+hn(712)+hn(713)+hn(714)+hn(715)+hn(716)+hn(717)+hn(718)+hn(719)+hn(720)+
+ hn(721)+hn(722)+hn(723)+hn(724)+hn(725)+hn(726)+hn(727)+hn(728)+hn(729)+hn(730)+
+ hn(731)+hn(732)+hn(733)+hn(734)+hn(735)+hn(736)+hn(737)+hn(738)+hn(739)+hn(740)+
+ hn(741)+hn(742)+hn(743)+hn(744)+hn(745)+hn(746)+hn(747)+hn(748)+hn(749)+hn(750)+
+ hn(751)+hn(752)+hn(753)+hn(754)+hn(755)+hn(756)+hn(757)+hn(758)+hn(759)+hn(760)+
+ hn(761)+hn(762)+hn(763)+hn(764)+hn(765)+hn(766)+hn(767)+hn(768)+hn(769)+hn(770)+
+ hn(771)+hn(772)+hn(773)+hn(774)+hn(775)+hn(776)+hn(777)+hn(778)+hn(779)+hn(780)+
+ hn(781)+hn(782)+hn(783)+hn(784)+hn(785)+hn(786)+hn(787)+hn(788)+hn(789)+hn(790)+
+ hn(791)+hn(792)+hn(793)+hn(794)+hn(795)+hn(796)+hn(797)+hn(798)+hn(799)+hn(800)+
+ hn(801)+hn(802)+hn(803)+hn(804)+hn(805)+hn(806)+hn(807)+hn(808)+hn(809)+hn(810)+
+ hn(811)+hn(812)+hn(813)+hn(814)+hn(815)+hn(816)+hn(817)+hn(818)+hn(819)+hn(820)+
+ hn(821)+hn(822)+hn(823)+hn(824)+hn(825)+hn(826)+hn(827)+hn(828)+hn(829)+hn(830)+
+ hn(831)+hn(832)+hn(833)+hn(834)+hn(835)+hn(836)+hn(837)+hn(838)+hn(839)+hn(840)+
+ hn(841)+hn(842)+hn(843)+hn(844)+hn(845)+hn(846)+hn(847)+hn(848)+hn(849)+hn(850)+
+ hn(851)+hn(852)+hn(853)+hn(854)+hn(855)+hn(856)+hn(857)+hn(858)+hn(859)+hn(860)+
+ hn(861)+hn(862)+hn(863)+hn(864)+hn(865)+hn(866)+hn(867)+hn(868)+hn(869)+hn(870)+
+ hn(871)+hn(872)+hn(873)+hn(874)+hn(875)+hn(876)+hn(877)+hn(878)+hn(879)+hn(880)+
+ hn(881)+hn(882)+hn(883)+hn(884)+hn(885)+hn(886)+hn(887)+hn(888)+hn(889)+hn(890)+
+ hn(891)+hn(892)+hn(893)+hn(894)+hn(895)+hn(896)+hn(897)+hn(898)+hn(899)+hn(900)+
+ hn(901)+hn(902)+hn(903)+hn(904)+hn(905)+hn(906)+hn(907)+hn(908)+hn(909)+hn(910)+
+ hn(911)+hn(912)+hn(913)+hn(914)+hn(915)+hn(916)+hn(917)+hn(918)+hn(919)+hn(920)+
+ hn(921)+hn(922)+hn(923)+hn(924)+hn(925)+hn(926)+hn(927)+hn(928)+hn(929)+hn(930)+
+ hn(931)+hn(932)+hn(933)+hn(934)+hn(935)+hn(936)+hn(937)+hn(938)+hn(939)+hn(940)+
+ hn(941)+hn(942)+hn(943)+hn(944)+hn(945)+hn(946)+hn(947)+hn(948)+hn(949)+hn(950)+
+ hn(951)+hn(952)+hn(953)+hn(954)+hn(955)+hn(956)+hn(957)+hn(958)+hn(959)+hn(960)+
+ hn(961)+hn(962)+hn(963)+hn(964)+hn(965)+hn(966)+hn(967)+hn(968)+hn(969)+hn(970)+
+ hn(971)+hn(972)+hn(973)+hn(974)+hn(975)+hn(976)+hn(977)+hn(978)+hn(979)+hn(980)+
+ hn(981)+hn(982)+hn(983)+hn(984)+hn(985)+hn(986)+hn(987)+hn(988)+hn(989)+hn(990)+
+ hn(991)+hn(992)+hn(993)+hn(994)+hn(995)+hn(996)+hn(997)+hn(998)+hn(999)+hn(1000)+
+ hn(1001)+hn(1002)+hn(1003)+hn(1004)+hn(1005)+hn(1006)+hn(1007)+hn(1008)+hn(1009)+hn(1010)+
+ hn(1011)+hn(1012)+hn(1013)+hn(1014)+hn(1015)+hn(1016)+hn(1017)+hn(1018)+hn(1019)+hn(1020)+
+ hn(1021)+hn(1022)+hn(1023)+hn(1024)
*** ...gain normalization
.param Gain=if(Norm, table(Func,1,if(mod(case,2),Sum,sqrtM),2,1,3,Sum,4,Sum,5,2*pi*BWp/absf0,6,1), 1)
*** buffered input
Vbypass {inv(SH)*999} {inv(SH)*667}
Gin 0 999 in GROUND 2
Rin 999 0 1
*** S&H input
Ash {999*SH} 0 {0.4*SH} 0 0 0 {667*SH} 0 SAMPLEHOLD Rout=1 Vhigh=1G Vlow=-1G ref={ref}
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** intermediary stage
Rinter {floorM} 0 1
*** output stage
Rout 0 1.1 1
Gexit GROUND out 1.1 0 {G/Gain/sqrtM**(Func==1&inv(Norm))}
Rexit out GROUND 1
*** LTRA models
.model Zn-1 LTRA L={tz1} C={tz1} lininterp
.model Zm-1 LTRA L={1*tz2} C={1*tz2} lininterp
.model Zm-2 LTRA L={2*tz2} C={2*tz2} lininterp
.model Zm-3 LTRA L={3*tz2} C={3*tz2} lininterp
.model Zm-4 LTRA L={4*tz2} C={4*tz2} lininterp
.model Zm-5 LTRA L={5*tz2} C={5*tz2} lininterp
.model Zm-6 LTRA L={6*tz2} C={6*tz2} lininterp
.model Zm-7 LTRA L={7*tz2} C={7*tz2} lininterp
.model Zm-8 LTRA L={8*tz2} C={8*tz2} lininterp
.model Zm-9 LTRA L={9*tz2} C={9*tz2} lininterp
.model Zm-10 LTRA L={10*tz2} C={10*tz2} lininterp
.model Zm-11 LTRA L={11*tz2} C={11*tz2} lininterp
.model Zm-12 LTRA L={12*tz2} C={12*tz2} lininterp
.model Zm-13 LTRA L={13*tz2} C={13*tz2} lininterp
.model Zm-14 LTRA L={14*tz2} C={14*tz2} lininterp
.model Zm-15 LTRA L={15*tz2} C={15*tz2} lininterp
.model Zm-16 LTRA L={16*tz2} C={16*tz2} lininterp
.model Zm-17 LTRA L={17*tz2} C={17*tz2} lininterp
.model Zm-18 LTRA L={18*tz2} C={18*tz2} lininterp
.model Zm-19 LTRA L={19*tz2} C={19*tz2} lininterp
.model Zm-20 LTRA L={20*tz2} C={20*tz2} lininterp
.model Zm-21 LTRA L={21*tz2} C={21*tz2} lininterp
.model Zm-22 LTRA L={22*tz2} C={22*tz2} lininterp
.model Zm-23 LTRA L={23*tz2} C={23*tz2} lininterp
.model Zm-24 LTRA L={24*tz2} C={24*tz2} lininterp
.model Zm-25 LTRA L={25*tz2} C={25*tz2} lininterp
.model Zm-26 LTRA L={26*tz2} C={26*tz2} lininterp
.model Zm-27 LTRA L={27*tz2} C={27*tz2} lininterp
.model Zm-28 LTRA L={28*tz2} C={28*tz2} lininterp
.model Zm-29 LTRA L={29*tz2} C={29*tz2} lininterp
.model Zm-30 LTRA L={30*tz2} C={30*tz2} lininterp
.model Zm-31 LTRA L={31*tz2} C={31*tz2} lininterp
*** row of delay lines
Oz1 667 0 1 0 Zn-1
Oz2 {1*(2<=floorM)} 0 {2*(2<=floorM)} 0 Zn-1
Oz3 {2*(3<=floorM)} 0 {3*(3<=floorM)} 0 Zn-1
Oz4 {3*(4<=floorM)} 0 {4*(4<=floorM)} 0 Zn-1
Oz5 {4*(5<=floorM)} 0 {5*(5<=floorM)} 0 Zn-1
Oz6 {5*(6<=floorM)} 0 {6*(6<=floorM)} 0 Zn-1
Oz7 {6*(7<=floorM)} 0 {7*(7<=floorM)} 0 Zn-1
Oz8 {7*(8<=floorM)} 0 {8*(8<=floorM)} 0 Zn-1
Oz9 {8*(9<=floorM)} 0 {9*(9<=floorM)} 0 Zn-1
Oz10 {9*(10<=floorM)} 0 {10*(10<=floorM)} 0 Zn-1
Oz11 {10*(11<=floorM)} 0 {11*(11<=floorM)} 0 Zn-1
Oz12 {11*(12<=floorM)} 0 {12*(12<=floorM)} 0 Zn-1
Oz13 {12*(13<=floorM)} 0 {13*(13<=floorM)} 0 Zn-1
Oz14 {13*(14<=floorM)} 0 {14*(14<=floorM)} 0 Zn-1
Oz15 {14*(15<=floorM)} 0 {15*(15<=floorM)} 0 Zn-1
Oz16 {15*(16<=floorM)} 0 {16*(16<=floorM)} 0 Zn-1
Oz17 {16*(17<=floorM)} 0 {17*(17<=floorM)} 0 Zn-1
Oz18 {17*(18<=floorM)} 0 {18*(18<=floorM)} 0 Zn-1
Oz19 {18*(19<=floorM)} 0 {19*(19<=floorM)} 0 Zn-1
Oz20 {19*(20<=floorM)} 0 {20*(20<=floorM)} 0 Zn-1
Oz21 {20*(21<=floorM)} 0 {21*(21<=floorM)} 0 Zn-1
Oz22 {21*(22<=floorM)} 0 {22*(22<=floorM)} 0 Zn-1
Oz23 {22*(23<=floorM)} 0 {23*(23<=floorM)} 0 Zn-1
Oz24 {23*(24<=floorM)} 0 {24*(24<=floorM)} 0 Zn-1
Oz25 {24*(25<=floorM)} 0 {25*(25<=floorM)} 0 Zn-1
Oz26 {25*(26<=floorM)} 0 {26*(26<=floorM)} 0 Zn-1
Oz27 {26*(27<=floorM)} 0 {27*(27<=floorM)} 0 Zn-1
Oz28 {27*(28<=floorM)} 0 {28*(28<=floorM)} 0 Zn-1
Oz29 {28*(29<=floorM)} 0 {29*(29<=floorM)} 0 Zn-1
Oz30 {29*(30<=floorM)} 0 {30*(30<=floorM)} 0 Zn-1
Oz31 {30*(31<=floorM)} 0 {31*(31<=floorM)} 0 Zn-1
Oz32 {31*(32<=floorM)} 0 {32*(32<=floorM)} 0 Zn-1
*** h[0:M], filling the array in sequential order, the rest - disabled
*** first one is always active
RGh 0 1.2 1
Gh_0 0 1.2 667 0 {hn(0)}
*** there can be maximum 32 multipliers/column with input node 667;
*** these take care of it
Gh_1 0 {Gh_out(1)} {Gh_in_row(1)} 0 {hn(1)}
Gh_2 0 {Gh_out(2)} {Gh_in_row(2)} 0 {hn(2)}
Gh_3 0 {Gh_out(3)} {Gh_in_row(3)} 0 {hn(3)}
Gh_4 0 {Gh_out(4)} {Gh_in_row(4)} 0 {hn(4)}
Gh_5 0 {Gh_out(5)} {Gh_in_row(5)} 0 {hn(5)}
Gh_6 0 {Gh_out(6)} {Gh_in_row(6)} 0 {hn(6)}
Gh_7 0 {Gh_out(7)} {Gh_in_row(7)} 0 {hn(7)}
Gh_8 0 {Gh_out(8)} {Gh_in_row(8)} 0 {hn(8)}
Gh_9 0 {Gh_out(9)} {Gh_in_row(9)} 0 {hn(9)}
Gh_10 0 {Gh_out(10)} {Gh_in_row(10)} 0 {hn(10)}
Gh_11 0 {Gh_out(11)} {Gh_in_row(11)} 0 {hn(11)}
Gh_12 0 {Gh_out(12)} {Gh_in_row(12)} 0 {hn(12)}
Gh_13 0 {Gh_out(13)} {Gh_in_row(13)} 0 {hn(13)}
Gh_14 0 {Gh_out(14)} {Gh_in_row(14)} 0 {hn(14)}
Gh_15 0 {Gh_out(15)} {Gh_in_row(15)} 0 {hn(15)}
Gh_16 0 {Gh_out(16)} {Gh_in_row(16)} 0 {hn(16)}
Gh_17 0 {Gh_out(17)} {Gh_in_row(17)} 0 {hn(17)}
Gh_18 0 {Gh_out(18)} {Gh_in_row(18)} 0 {hn(18)}
Gh_19 0 {Gh_out(19)} {Gh_in_row(19)} 0 {hn(19)}
Gh_20 0 {Gh_out(20)} {Gh_in_row(20)} 0 {hn(20)}
Gh_21 0 {Gh_out(21)} {Gh_in_row(21)} 0 {hn(21)}
Gh_22 0 {Gh_out(22)} {Gh_in_row(22)} 0 {hn(22)}
Gh_23 0 {Gh_out(23)} {Gh_in_row(23)} 0 {hn(23)}
Gh_24 0 {Gh_out(24)} {Gh_in_row(24)} 0 {hn(24)}
Gh_25 0 {Gh_out(25)} {Gh_in_row(25)} 0 {hn(25)}
Gh_26 0 {Gh_out(26)} {Gh_in_row(26)} 0 {hn(26)}
Gh_27 0 {Gh_out(27)} {Gh_in_row(27)} 0 {hn(27)}
Gh_28 0 {Gh_out(28)} {Gh_in_row(28)} 0 {hn(28)}
Gh_29 0 {Gh_out(29)} {Gh_in_row(29)} 0 {hn(29)}
Gh_30 0 {Gh_out(30)} {Gh_in_row(30)} 0 {hn(30)}
Gh_31 0 {Gh_out(31)} {Gh_in_row(31)} 0 {hn(31)}
Gh_32 0 {Gh_out(32)} {Gh_in_row(32)} 0 {hn(32)}
*** the rest of the array's 'coefficients'
Gh_33 0 {Gh_out(33)} {Gh_in(33)} 0 {hn(33)}
Gh_34 0 {Gh_out(34)} {Gh_in(34)} 0 {hn(34)}
Gh_35 0 {Gh_out(35)} {Gh_in(35)} 0 {hn(35)}
Gh_36 0 {Gh_out(36)} {Gh_in(36)} 0 {hn(36)}
Gh_37 0 {Gh_out(37)} {Gh_in(37)} 0 {hn(37)}
Gh_38 0 {Gh_out(38)} {Gh_in(38)} 0 {hn(38)}
Gh_39 0 {Gh_out(39)} {Gh_in(39)} 0 {hn(39)}
Gh_40 0 {Gh_out(40)} {Gh_in(40)} 0 {hn(40)}
Gh_41 0 {Gh_out(41)} {Gh_in(41)} 0 {hn(41)}
Gh_42 0 {Gh_out(42)} {Gh_in(42)} 0 {hn(42)}
Gh_43 0 {Gh_out(43)} {Gh_in(43)} 0 {hn(43)}
Gh_44 0 {Gh_out(44)} {Gh_in(44)} 0 {hn(44)}
Gh_45 0 {Gh_out(45)} {Gh_in(45)} 0 {hn(45)}
Gh_46 0 {Gh_out(46)} {Gh_in(46)} 0 {hn(46)}
Gh_47 0 {Gh_out(47)} {Gh_in(47)} 0 {hn(47)}
Gh_48 0 {Gh_out(48)} {Gh_in(48)} 0 {hn(48)}
Gh_49 0 {Gh_out(49)} {Gh_in(49)} 0 {hn(49)}
Gh_50 0 {Gh_out(50)} {Gh_in(50)} 0 {hn(50)}
Gh_51 0 {Gh_out(51)} {Gh_in(51)} 0 {hn(51)}
Gh_52 0 {Gh_out(52)} {Gh_in(52)} 0 {hn(52)}
Gh_53 0 {Gh_out(53)} {Gh_in(53)} 0 {hn(53)}
Gh_54 0 {Gh_out(54)} {Gh_in(54)} 0 {hn(54)}
Gh_55 0 {Gh_out(55)} {Gh_in(55)} 0 {hn(55)}
Gh_56 0 {Gh_out(56)} {Gh_in(56)} 0 {hn(56)}
Gh_57 0 {Gh_out(57)} {Gh_in(57)} 0 {hn(57)}
Gh_58 0 {Gh_out(58)} {Gh_in(58)} 0 {hn(58)}
Gh_59 0 {Gh_out(59)} {Gh_in(59)} 0 {hn(59)}
Gh_60 0 {Gh_out(60)} {Gh_in(60)} 0 {hn(60)}
Gh_61 0 {Gh_out(61)} {Gh_in(61)} 0 {hn(61)}
Gh_62 0 {Gh_out(62)} {Gh_in(62)} 0 {hn(62)}
Gh_63 0 {Gh_out(63)} {Gh_in(63)} 0 {hn(63)}
Gh_64 0 {Gh_out(64)} {Gh_in(64)} 0 {hn(64)}
Gh_65 0 {Gh_out(65)} {Gh_in(65)} 0 {hn(65)}
Gh_66 0 {Gh_out(66)} {Gh_in(66)} 0 {hn(66)}
Gh_67 0 {Gh_out(67)} {Gh_in(67)} 0 {hn(67)}
Gh_68 0 {Gh_out(68)} {Gh_in(68)} 0 {hn(68)}
Gh_69 0 {Gh_out(69)} {Gh_in(69)} 0 {hn(69)}
Gh_70 0 {Gh_out(70)} {Gh_in(70)} 0 {hn(70)}
Gh_71 0 {Gh_out(71)} {Gh_in(71)} 0 {hn(71)}
Gh_72 0 {Gh_out(72)} {Gh_in(72)} 0 {hn(72)}
Gh_73 0 {Gh_out(73)} {Gh_in(73)} 0 {hn(73)}
Gh_74 0 {Gh_out(74)} {Gh_in(74)} 0 {hn(74)}
Gh_75 0 {Gh_out(75)} {Gh_in(75)} 0 {hn(75)}
Gh_76 0 {Gh_out(76)} {Gh_in(76)} 0 {hn(76)}
Gh_77 0 {Gh_out(77)} {Gh_in(77)} 0 {hn(77)}
Gh_78 0 {Gh_out(78)} {Gh_in(78)} 0 {hn(78)}
Gh_79 0 {Gh_out(79)} {Gh_in(79)} 0 {hn(79)}
Gh_80 0 {Gh_out(80)} {Gh_in(80)} 0 {hn(80)}
Gh_81 0 {Gh_out(81)} {Gh_in(81)} 0 {hn(81)}
Gh_82 0 {Gh_out(82)} {Gh_in(82)} 0 {hn(82)}
Gh_83 0 {Gh_out(83)} {Gh_in(83)} 0 {hn(83)}
Gh_84 0 {Gh_out(84)} {Gh_in(84)} 0 {hn(84)}
Gh_85 0 {Gh_out(85)} {Gh_in(85)} 0 {hn(85)}
Gh_86 0 {Gh_out(86)} {Gh_in(86)} 0 {hn(86)}
Gh_87 0 {Gh_out(87)} {Gh_in(87)} 0 {hn(87)}
Gh_88 0 {Gh_out(88)} {Gh_in(88)} 0 {hn(88)}
Gh_89 0 {Gh_out(89)} {Gh_in(89)} 0 {hn(89)}
Gh_90 0 {Gh_out(90)} {Gh_in(90)} 0 {hn(90)}
Gh_91 0 {Gh_out(91)} {Gh_in(91)} 0 {hn(91)}
Gh_92 0 {Gh_out(92)} {Gh_in(92)} 0 {hn(92)}
Gh_93 0 {Gh_out(93)} {Gh_in(93)} 0 {hn(93)}
Gh_94 0 {Gh_out(94)} {Gh_in(94)} 0 {hn(94)}
Gh_95 0 {Gh_out(95)} {Gh_in(95)} 0 {hn(95)}
Gh_96 0 {Gh_out(96)} {Gh_in(96)} 0 {hn(96)}
Gh_97 0 {Gh_out(97)} {Gh_in(97)} 0 {hn(97)}
Gh_98 0 {Gh_out(98)} {Gh_in(98)} 0 {hn(98)}
Gh_99 0 {Gh_out(99)} {Gh_in(99)} 0 {hn(99)}
Gh_100 0 {Gh_out(100)} {Gh_in(100)} 0 {hn(100)}
Gh_101 0 {Gh_out(101)} {Gh_in(101)} 0 {hn(101)}
Gh_102 0 {Gh_out(102)} {Gh_in(102)} 0 {hn(102)}
Gh_103 0 {Gh_out(103)} {Gh_in(103)} 0 {hn(103)}
Gh_104 0 {Gh_out(104)} {Gh_in(104)} 0 {hn(104)}
Gh_105 0 {Gh_out(105)} {Gh_in(105)} 0 {hn(105)}
Gh_106 0 {Gh_out(106)} {Gh_in(106)} 0 {hn(106)}
Gh_107 0 {Gh_out(107)} {Gh_in(107)} 0 {hn(107)}
Gh_108 0 {Gh_out(108)} {Gh_in(108)} 0 {hn(108)}
Gh_109 0 {Gh_out(109)} {Gh_in(109)} 0 {hn(109)}
Gh_110 0 {Gh_out(110)} {Gh_in(110)} 0 {hn(110)}
Gh_111 0 {Gh_out(111)} {Gh_in(111)} 0 {hn(111)}
Gh_112 0 {Gh_out(112)} {Gh_in(112)} 0 {hn(112)}
Gh_113 0 {Gh_out(113)} {Gh_in(113)} 0 {hn(113)}
Gh_114 0 {Gh_out(114)} {Gh_in(114)} 0 {hn(114)}
Gh_115 0 {Gh_out(115)} {Gh_in(115)} 0 {hn(115)}
Gh_116 0 {Gh_out(116)} {Gh_in(116)} 0 {hn(116)}
Gh_117 0 {Gh_out(117)} {Gh_in(117)} 0 {hn(117)}
Gh_118 0 {Gh_out(118)} {Gh_in(118)} 0 {hn(118)}
Gh_119 0 {Gh_out(119)} {Gh_in(119)} 0 {hn(119)}
Gh_120 0 {Gh_out(120)} {Gh_in(120)} 0 {hn(120)}
Gh_121 0 {Gh_out(121)} {Gh_in(121)} 0 {hn(121)}
Gh_122 0 {Gh_out(122)} {Gh_in(122)} 0 {hn(122)}
Gh_123 0 {Gh_out(123)} {Gh_in(123)} 0 {hn(123)}
Gh_124 0 {Gh_out(124)} {Gh_in(124)} 0 {hn(124)}
Gh_125 0 {Gh_out(125)} {Gh_in(125)} 0 {hn(125)}
Gh_126 0 {Gh_out(126)} {Gh_in(126)} 0 {hn(126)}
Gh_127 0 {Gh_out(127)} {Gh_in(127)} 0 {hn(127)}
Gh_128 0 {Gh_out(128)} {Gh_in(128)} 0 {hn(128)}
Gh_129 0 {Gh_out(129)} {Gh_in(129)} 0 {hn(129)}
Gh_130 0 {Gh_out(130)} {Gh_in(130)} 0 {hn(130)}
Gh_131 0 {Gh_out(131)} {Gh_in(131)} 0 {hn(131)}
Gh_132 0 {Gh_out(132)} {Gh_in(132)} 0 {hn(132)}
Gh_133 0 {Gh_out(133)} {Gh_in(133)} 0 {hn(133)}
Gh_134 0 {Gh_out(134)} {Gh_in(134)} 0 {hn(134)}
Gh_135 0 {Gh_out(135)} {Gh_in(135)} 0 {hn(135)}
Gh_136 0 {Gh_out(136)} {Gh_in(136)} 0 {hn(136)}
Gh_137 0 {Gh_out(137)} {Gh_in(137)} 0 {hn(137)}
Gh_138 0 {Gh_out(138)} {Gh_in(138)} 0 {hn(138)}
Gh_139 0 {Gh_out(139)} {Gh_in(139)} 0 {hn(139)}
Gh_140 0 {Gh_out(140)} {Gh_in(140)} 0 {hn(140)}
Gh_141 0 {Gh_out(141)} {Gh_in(141)} 0 {hn(141)}
Gh_142 0 {Gh_out(142)} {Gh_in(142)} 0 {hn(142)}
Gh_143 0 {Gh_out(143)} {Gh_in(143)} 0 {hn(143)}
Gh_144 0 {Gh_out(144)} {Gh_in(144)} 0 {hn(144)}
Gh_145 0 {Gh_out(145)} {Gh_in(145)} 0 {hn(145)}
Gh_146 0 {Gh_out(146)} {Gh_in(146)} 0 {hn(146)}
Gh_147 0 {Gh_out(147)} {Gh_in(147)} 0 {hn(147)}
Gh_148 0 {Gh_out(148)} {Gh_in(148)} 0 {hn(148)}
Gh_149 0 {Gh_out(149)} {Gh_in(149)} 0 {hn(149)}
Gh_150 0 {Gh_out(150)} {Gh_in(150)} 0 {hn(150)}
Gh_151 0 {Gh_out(151)} {Gh_in(151)} 0 {hn(151)}
Gh_152 0 {Gh_out(152)} {Gh_in(152)} 0 {hn(152)}
Gh_153 0 {Gh_out(153)} {Gh_in(153)} 0 {hn(153)}
Gh_154 0 {Gh_out(154)} {Gh_in(154)} 0 {hn(154)}
Gh_155 0 {Gh_out(155)} {Gh_in(155)} 0 {hn(155)}
Gh_156 0 {Gh_out(156)} {Gh_in(156)} 0 {hn(156)}
Gh_157 0 {Gh_out(157)} {Gh_in(157)} 0 {hn(157)}
Gh_158 0 {Gh_out(158)} {Gh_in(158)} 0 {hn(158)}
Gh_159 0 {Gh_out(159)} {Gh_in(159)} 0 {hn(159)}
Gh_160 0 {Gh_out(160)} {Gh_in(160)} 0 {hn(160)}
Gh_161 0 {Gh_out(161)} {Gh_in(161)} 0 {hn(161)}
Gh_162 0 {Gh_out(162)} {Gh_in(162)} 0 {hn(162)}
Gh_163 0 {Gh_out(163)} {Gh_in(163)} 0 {hn(163)}
Gh_164 0 {Gh_out(164)} {Gh_in(164)} 0 {hn(164)}
Gh_165 0 {Gh_out(165)} {Gh_in(165)} 0 {hn(165)}
Gh_166 0 {Gh_out(166)} {Gh_in(166)} 0 {hn(166)}
Gh_167 0 {Gh_out(167)} {Gh_in(167)} 0 {hn(167)}
Gh_168 0 {Gh_out(168)} {Gh_in(168)} 0 {hn(168)}
Gh_169 0 {Gh_out(169)} {Gh_in(169)} 0 {hn(169)}
Gh_170 0 {Gh_out(170)} {Gh_in(170)} 0 {hn(170)}
Gh_171 0 {Gh_out(171)} {Gh_in(171)} 0 {hn(171)}
Gh_172 0 {Gh_out(172)} {Gh_in(172)} 0 {hn(172)}
Gh_173 0 {Gh_out(173)} {Gh_in(173)} 0 {hn(173)}
Gh_174 0 {Gh_out(174)} {Gh_in(174)} 0 {hn(174)}
Gh_175 0 {Gh_out(175)} {Gh_in(175)} 0 {hn(175)}
Gh_176 0 {Gh_out(176)} {Gh_in(176)} 0 {hn(176)}
Gh_177 0 {Gh_out(177)} {Gh_in(177)} 0 {hn(177)}
Gh_178 0 {Gh_out(178)} {Gh_in(178)} 0 {hn(178)}
Gh_179 0 {Gh_out(179)} {Gh_in(179)} 0 {hn(179)}
Gh_180 0 {Gh_out(180)} {Gh_in(180)} 0 {hn(180)}
Gh_181 0 {Gh_out(181)} {Gh_in(181)} 0 {hn(181)}
Gh_182 0 {Gh_out(182)} {Gh_in(182)} 0 {hn(182)}
Gh_183 0 {Gh_out(183)} {Gh_in(183)} 0 {hn(183)}
Gh_184 0 {Gh_out(184)} {Gh_in(184)} 0 {hn(184)}
Gh_185 0 {Gh_out(185)} {Gh_in(185)} 0 {hn(185)}
Gh_186 0 {Gh_out(186)} {Gh_in(186)} 0 {hn(186)}
Gh_187 0 {Gh_out(187)} {Gh_in(187)} 0 {hn(187)}
Gh_188 0 {Gh_out(188)} {Gh_in(188)} 0 {hn(188)}
Gh_189 0 {Gh_out(189)} {Gh_in(189)} 0 {hn(189)}
Gh_190 0 {Gh_out(190)} {Gh_in(190)} 0 {hn(190)}
Gh_191 0 {Gh_out(191)} {Gh_in(191)} 0 {hn(191)}
Gh_192 0 {Gh_out(192)} {Gh_in(192)} 0 {hn(192)}
Gh_193 0 {Gh_out(193)} {Gh_in(193)} 0 {hn(193)}
Gh_194 0 {Gh_out(194)} {Gh_in(194)} 0 {hn(194)}
Gh_195 0 {Gh_out(195)} {Gh_in(195)} 0 {hn(195)}
Gh_196 0 {Gh_out(196)} {Gh_in(196)} 0 {hn(196)}
Gh_197 0 {Gh_out(197)} {Gh_in(197)} 0 {hn(197)}
Gh_198 0 {Gh_out(198)} {Gh_in(198)} 0 {hn(198)}
Gh_199 0 {Gh_out(199)} {Gh_in(199)} 0 {hn(199)}
Gh_200 0 {Gh_out(200)} {Gh_in(200)} 0 {hn(200)}
Gh_201 0 {Gh_out(201)} {Gh_in(201)} 0 {hn(201)}
Gh_202 0 {Gh_out(202)} {Gh_in(202)} 0 {hn(202)}
Gh_203 0 {Gh_out(203)} {Gh_in(203)} 0 {hn(203)}
Gh_204 0 {Gh_out(204)} {Gh_in(204)} 0 {hn(204)}
Gh_205 0 {Gh_out(205)} {Gh_in(205)} 0 {hn(205)}
Gh_206 0 {Gh_out(206)} {Gh_in(206)} 0 {hn(206)}
Gh_207 0 {Gh_out(207)} {Gh_in(207)} 0 {hn(207)}
Gh_208 0 {Gh_out(208)} {Gh_in(208)} 0 {hn(208)}
Gh_209 0 {Gh_out(209)} {Gh_in(209)} 0 {hn(209)}
Gh_210 0 {Gh_out(210)} {Gh_in(210)} 0 {hn(210)}
Gh_211 0 {Gh_out(211)} {Gh_in(211)} 0 {hn(211)}
Gh_212 0 {Gh_out(212)} {Gh_in(212)} 0 {hn(212)}
Gh_213 0 {Gh_out(213)} {Gh_in(213)} 0 {hn(213)}
Gh_214 0 {Gh_out(214)} {Gh_in(214)} 0 {hn(214)}
Gh_215 0 {Gh_out(215)} {Gh_in(215)} 0 {hn(215)}
Gh_216 0 {Gh_out(216)} {Gh_in(216)} 0 {hn(216)}
Gh_217 0 {Gh_out(217)} {Gh_in(217)} 0 {hn(217)}
Gh_218 0 {Gh_out(218)} {Gh_in(218)} 0 {hn(218)}
Gh_219 0 {Gh_out(219)} {Gh_in(219)} 0 {hn(219)}
Gh_220 0 {Gh_out(220)} {Gh_in(220)} 0 {hn(220)}
Gh_221 0 {Gh_out(221)} {Gh_in(221)} 0 {hn(221)}
Gh_222 0 {Gh_out(222)} {Gh_in(222)} 0 {hn(222)}
Gh_223 0 {Gh_out(223)} {Gh_in(223)} 0 {hn(223)}
Gh_224 0 {Gh_out(224)} {Gh_in(224)} 0 {hn(224)}
Gh_225 0 {Gh_out(225)} {Gh_in(225)} 0 {hn(225)}
Gh_226 0 {Gh_out(226)} {Gh_in(226)} 0 {hn(226)}
Gh_227 0 {Gh_out(227)} {Gh_in(227)} 0 {hn(227)}
Gh_228 0 {Gh_out(228)} {Gh_in(228)} 0 {hn(228)}
Gh_229 0 {Gh_out(229)} {Gh_in(229)} 0 {hn(229)}
Gh_230 0 {Gh_out(230)} {Gh_in(230)} 0 {hn(230)}
Gh_231 0 {Gh_out(231)} {Gh_in(231)} 0 {hn(231)}
Gh_232 0 {Gh_out(232)} {Gh_in(232)} 0 {hn(232)}
Gh_233 0 {Gh_out(233)} {Gh_in(233)} 0 {hn(233)}
Gh_234 0 {Gh_out(234)} {Gh_in(234)} 0 {hn(234)}
Gh_235 0 {Gh_out(235)} {Gh_in(235)} 0 {hn(235)}
Gh_236 0 {Gh_out(236)} {Gh_in(236)} 0 {hn(236)}
Gh_237 0 {Gh_out(237)} {Gh_in(237)} 0 {hn(237)}
Gh_238 0 {Gh_out(238)} {Gh_in(238)} 0 {hn(238)}
Gh_239 0 {Gh_out(239)} {Gh_in(239)} 0 {hn(239)}
Gh_240 0 {Gh_out(240)} {Gh_in(240)} 0 {hn(240)}
Gh_241 0 {Gh_out(241)} {Gh_in(241)} 0 {hn(241)}
Gh_242 0 {Gh_out(242)} {Gh_in(242)} 0 {hn(242)}
Gh_243 0 {Gh_out(243)} {Gh_in(243)} 0 {hn(243)}
Gh_244 0 {Gh_out(244)} {Gh_in(244)} 0 {hn(244)}
Gh_245 0 {Gh_out(245)} {Gh_in(245)} 0 {hn(245)}
Gh_246 0 {Gh_out(246)} {Gh_in(246)} 0 {hn(246)}
Gh_247 0 {Gh_out(247)} {Gh_in(247)} 0 {hn(247)}
Gh_248 0 {Gh_out(248)} {Gh_in(248)} 0 {hn(248)}
Gh_249 0 {Gh_out(249)} {Gh_in(249)} 0 {hn(249)}
Gh_250 0 {Gh_out(250)} {Gh_in(250)} 0 {hn(250)}
Gh_251 0 {Gh_out(251)} {Gh_in(251)} 0 {hn(251)}
Gh_252 0 {Gh_out(252)} {Gh_in(252)} 0 {hn(252)}
Gh_253 0 {Gh_out(253)} {Gh_in(253)} 0 {hn(253)}
Gh_254 0 {Gh_out(254)} {Gh_in(254)} 0 {hn(254)}
Gh_255 0 {Gh_out(255)} {Gh_in(255)} 0 {hn(255)}
Gh_256 0 {Gh_out(256)} {Gh_in(256)} 0 {hn(256)}
Gh_257 0 {Gh_out(257)} {Gh_in(257)} 0 {hn(257)}
Gh_258 0 {Gh_out(258)} {Gh_in(258)} 0 {hn(258)}
Gh_259 0 {Gh_out(259)} {Gh_in(259)} 0 {hn(259)}
Gh_260 0 {Gh_out(260)} {Gh_in(260)} 0 {hn(260)}
Gh_261 0 {Gh_out(261)} {Gh_in(261)} 0 {hn(261)}
Gh_262 0 {Gh_out(262)} {Gh_in(262)} 0 {hn(262)}
Gh_263 0 {Gh_out(263)} {Gh_in(263)} 0 {hn(263)}
Gh_264 0 {Gh_out(264)} {Gh_in(264)} 0 {hn(264)}
Gh_265 0 {Gh_out(265)} {Gh_in(265)} 0 {hn(265)}
Gh_266 0 {Gh_out(266)} {Gh_in(266)} 0 {hn(266)}
Gh_267 0 {Gh_out(267)} {Gh_in(267)} 0 {hn(267)}
Gh_268 0 {Gh_out(268)} {Gh_in(268)} 0 {hn(268)}
Gh_269 0 {Gh_out(269)} {Gh_in(269)} 0 {hn(269)}
Gh_270 0 {Gh_out(270)} {Gh_in(270)} 0 {hn(270)}
Gh_271 0 {Gh_out(271)} {Gh_in(271)} 0 {hn(271)}
Gh_272 0 {Gh_out(272)} {Gh_in(272)} 0 {hn(272)}
Gh_273 0 {Gh_out(273)} {Gh_in(273)} 0 {hn(273)}
Gh_274 0 {Gh_out(274)} {Gh_in(274)} 0 {hn(274)}
Gh_275 0 {Gh_out(275)} {Gh_in(275)} 0 {hn(275)}
Gh_276 0 {Gh_out(276)} {Gh_in(276)} 0 {hn(276)}
Gh_277 0 {Gh_out(277)} {Gh_in(277)} 0 {hn(277)}
Gh_278 0 {Gh_out(278)} {Gh_in(278)} 0 {hn(278)}
Gh_279 0 {Gh_out(279)} {Gh_in(279)} 0 {hn(279)}
Gh_280 0 {Gh_out(280)} {Gh_in(280)} 0 {hn(280)}
Gh_281 0 {Gh_out(281)} {Gh_in(281)} 0 {hn(281)}
Gh_282 0 {Gh_out(282)} {Gh_in(282)} 0 {hn(282)}
Gh_283 0 {Gh_out(283)} {Gh_in(283)} 0 {hn(283)}
Gh_284 0 {Gh_out(284)} {Gh_in(284)} 0 {hn(284)}
Gh_285 0 {Gh_out(285)} {Gh_in(285)} 0 {hn(285)}
Gh_286 0 {Gh_out(286)} {Gh_in(286)} 0 {hn(286)}
Gh_287 0 {Gh_out(287)} {Gh_in(287)} 0 {hn(287)}
Gh_288 0 {Gh_out(288)} {Gh_in(288)} 0 {hn(288)}
Gh_289 0 {Gh_out(289)} {Gh_in(289)} 0 {hn(289)}
Gh_290 0 {Gh_out(290)} {Gh_in(290)} 0 {hn(290)}
Gh_291 0 {Gh_out(291)} {Gh_in(291)} 0 {hn(291)}
Gh_292 0 {Gh_out(292)} {Gh_in(292)} 0 {hn(292)}
Gh_293 0 {Gh_out(293)} {Gh_in(293)} 0 {hn(293)}
Gh_294 0 {Gh_out(294)} {Gh_in(294)} 0 {hn(294)}
Gh_295 0 {Gh_out(295)} {Gh_in(295)} 0 {hn(295)}
Gh_296 0 {Gh_out(296)} {Gh_in(296)} 0 {hn(296)}
Gh_297 0 {Gh_out(297)} {Gh_in(297)} 0 {hn(297)}
Gh_298 0 {Gh_out(298)} {Gh_in(298)} 0 {hn(298)}
Gh_299 0 {Gh_out(299)} {Gh_in(299)} 0 {hn(299)}
Gh_300 0 {Gh_out(300)} {Gh_in(300)} 0 {hn(300)}
Gh_301 0 {Gh_out(301)} {Gh_in(301)} 0 {hn(301)}
Gh_302 0 {Gh_out(302)} {Gh_in(302)} 0 {hn(302)}
Gh_303 0 {Gh_out(303)} {Gh_in(303)} 0 {hn(303)}
Gh_304 0 {Gh_out(304)} {Gh_in(304)} 0 {hn(304)}
Gh_305 0 {Gh_out(305)} {Gh_in(305)} 0 {hn(305)}
Gh_306 0 {Gh_out(306)} {Gh_in(306)} 0 {hn(306)}
Gh_307 0 {Gh_out(307)} {Gh_in(307)} 0 {hn(307)}
Gh_308 0 {Gh_out(308)} {Gh_in(308)} 0 {hn(308)}
Gh_309 0 {Gh_out(309)} {Gh_in(309)} 0 {hn(309)}
Gh_310 0 {Gh_out(310)} {Gh_in(310)} 0 {hn(310)}
Gh_311 0 {Gh_out(311)} {Gh_in(311)} 0 {hn(311)}
Gh_312 0 {Gh_out(312)} {Gh_in(312)} 0 {hn(312)}
Gh_313 0 {Gh_out(313)} {Gh_in(313)} 0 {hn(313)}
Gh_314 0 {Gh_out(314)} {Gh_in(314)} 0 {hn(314)}
Gh_315 0 {Gh_out(315)} {Gh_in(315)} 0 {hn(315)}
Gh_316 0 {Gh_out(316)} {Gh_in(316)} 0 {hn(316)}
Gh_317 0 {Gh_out(317)} {Gh_in(317)} 0 {hn(317)}
Gh_318 0 {Gh_out(318)} {Gh_in(318)} 0 {hn(318)}
Gh_319 0 {Gh_out(319)} {Gh_in(319)} 0 {hn(319)}
Gh_320 0 {Gh_out(320)} {Gh_in(320)} 0 {hn(320)}
Gh_321 0 {Gh_out(321)} {Gh_in(321)} 0 {hn(321)}
Gh_322 0 {Gh_out(322)} {Gh_in(322)} 0 {hn(322)}
Gh_323 0 {Gh_out(323)} {Gh_in(323)} 0 {hn(323)}
Gh_324 0 {Gh_out(324)} {Gh_in(324)} 0 {hn(324)}
Gh_325 0 {Gh_out(325)} {Gh_in(325)} 0 {hn(325)}
Gh_326 0 {Gh_out(326)} {Gh_in(326)} 0 {hn(326)}
Gh_327 0 {Gh_out(327)} {Gh_in(327)} 0 {hn(327)}
Gh_328 0 {Gh_out(328)} {Gh_in(328)} 0 {hn(328)}
Gh_329 0 {Gh_out(329)} {Gh_in(329)} 0 {hn(329)}
Gh_330 0 {Gh_out(330)} {Gh_in(330)} 0 {hn(330)}
Gh_331 0 {Gh_out(331)} {Gh_in(331)} 0 {hn(331)}
Gh_332 0 {Gh_out(332)} {Gh_in(332)} 0 {hn(332)}
Gh_333 0 {Gh_out(333)} {Gh_in(333)} 0 {hn(333)}
Gh_334 0 {Gh_out(334)} {Gh_in(334)} 0 {hn(334)}
Gh_335 0 {Gh_out(335)} {Gh_in(335)} 0 {hn(335)}
Gh_336 0 {Gh_out(336)} {Gh_in(336)} 0 {hn(336)}
Gh_337 0 {Gh_out(337)} {Gh_in(337)} 0 {hn(337)}
Gh_338 0 {Gh_out(338)} {Gh_in(338)} 0 {hn(338)}
Gh_339 0 {Gh_out(339)} {Gh_in(339)} 0 {hn(339)}
Gh_340 0 {Gh_out(340)} {Gh_in(340)} 0 {hn(340)}
Gh_341 0 {Gh_out(341)} {Gh_in(341)} 0 {hn(341)}
Gh_342 0 {Gh_out(342)} {Gh_in(342)} 0 {hn(342)}
Gh_343 0 {Gh_out(343)} {Gh_in(343)} 0 {hn(343)}
Gh_344 0 {Gh_out(344)} {Gh_in(344)} 0 {hn(344)}
Gh_345 0 {Gh_out(345)} {Gh_in(345)} 0 {hn(345)}
Gh_346 0 {Gh_out(346)} {Gh_in(346)} 0 {hn(346)}
Gh_347 0 {Gh_out(347)} {Gh_in(347)} 0 {hn(347)}
Gh_348 0 {Gh_out(348)} {Gh_in(348)} 0 {hn(348)}
Gh_349 0 {Gh_out(349)} {Gh_in(349)} 0 {hn(349)}
Gh_350 0 {Gh_out(350)} {Gh_in(350)} 0 {hn(350)}
Gh_351 0 {Gh_out(351)} {Gh_in(351)} 0 {hn(351)}
Gh_352 0 {Gh_out(352)} {Gh_in(352)} 0 {hn(352)}
Gh_353 0 {Gh_out(353)} {Gh_in(353)} 0 {hn(353)}
Gh_354 0 {Gh_out(354)} {Gh_in(354)} 0 {hn(354)}
Gh_355 0 {Gh_out(355)} {Gh_in(355)} 0 {hn(355)}
Gh_356 0 {Gh_out(356)} {Gh_in(356)} 0 {hn(356)}
Gh_357 0 {Gh_out(357)} {Gh_in(357)} 0 {hn(357)}
Gh_358 0 {Gh_out(358)} {Gh_in(358)} 0 {hn(358)}
Gh_359 0 {Gh_out(359)} {Gh_in(359)} 0 {hn(359)}
Gh_360 0 {Gh_out(360)} {Gh_in(360)} 0 {hn(360)}
Gh_361 0 {Gh_out(361)} {Gh_in(361)} 0 {hn(361)}
Gh_362 0 {Gh_out(362)} {Gh_in(362)} 0 {hn(362)}
Gh_363 0 {Gh_out(363)} {Gh_in(363)} 0 {hn(363)}
Gh_364 0 {Gh_out(364)} {Gh_in(364)} 0 {hn(364)}
Gh_365 0 {Gh_out(365)} {Gh_in(365)} 0 {hn(365)}
Gh_366 0 {Gh_out(366)} {Gh_in(366)} 0 {hn(366)}
Gh_367 0 {Gh_out(367)} {Gh_in(367)} 0 {hn(367)}
Gh_368 0 {Gh_out(368)} {Gh_in(368)} 0 {hn(368)}
Gh_369 0 {Gh_out(369)} {Gh_in(369)} 0 {hn(369)}
Gh_370 0 {Gh_out(370)} {Gh_in(370)} 0 {hn(370)}
Gh_371 0 {Gh_out(371)} {Gh_in(371)} 0 {hn(371)}
Gh_372 0 {Gh_out(372)} {Gh_in(372)} 0 {hn(372)}
Gh_373 0 {Gh_out(373)} {Gh_in(373)} 0 {hn(373)}
Gh_374 0 {Gh_out(374)} {Gh_in(374)} 0 {hn(374)}
Gh_375 0 {Gh_out(375)} {Gh_in(375)} 0 {hn(375)}
Gh_376 0 {Gh_out(376)} {Gh_in(376)} 0 {hn(376)}
Gh_377 0 {Gh_out(377)} {Gh_in(377)} 0 {hn(377)}
Gh_378 0 {Gh_out(378)} {Gh_in(378)} 0 {hn(378)}
Gh_379 0 {Gh_out(379)} {Gh_in(379)} 0 {hn(379)}
Gh_380 0 {Gh_out(380)} {Gh_in(380)} 0 {hn(380)}
Gh_381 0 {Gh_out(381)} {Gh_in(381)} 0 {hn(381)}
Gh_382 0 {Gh_out(382)} {Gh_in(382)} 0 {hn(382)}
Gh_383 0 {Gh_out(383)} {Gh_in(383)} 0 {hn(383)}
Gh_384 0 {Gh_out(384)} {Gh_in(384)} 0 {hn(384)}
Gh_385 0 {Gh_out(385)} {Gh_in(385)} 0 {hn(385)}
Gh_386 0 {Gh_out(386)} {Gh_in(386)} 0 {hn(386)}
Gh_387 0 {Gh_out(387)} {Gh_in(387)} 0 {hn(387)}
Gh_388 0 {Gh_out(388)} {Gh_in(388)} 0 {hn(388)}
Gh_389 0 {Gh_out(389)} {Gh_in(389)} 0 {hn(389)}
Gh_390 0 {Gh_out(390)} {Gh_in(390)} 0 {hn(390)}
Gh_391 0 {Gh_out(391)} {Gh_in(391)} 0 {hn(391)}
Gh_392 0 {Gh_out(392)} {Gh_in(392)} 0 {hn(392)}
Gh_393 0 {Gh_out(393)} {Gh_in(393)} 0 {hn(393)}
Gh_394 0 {Gh_out(394)} {Gh_in(394)} 0 {hn(394)}
Gh_395 0 {Gh_out(395)} {Gh_in(395)} 0 {hn(395)}
Gh_396 0 {Gh_out(396)} {Gh_in(396)} 0 {hn(396)}
Gh_397 0 {Gh_out(397)} {Gh_in(397)} 0 {hn(397)}
Gh_398 0 {Gh_out(398)} {Gh_in(398)} 0 {hn(398)}
Gh_399 0 {Gh_out(399)} {Gh_in(399)} 0 {hn(399)}
Gh_400 0 {Gh_out(400)} {Gh_in(400)} 0 {hn(400)}
Gh_401 0 {Gh_out(401)} {Gh_in(401)} 0 {hn(401)}
Gh_402 0 {Gh_out(402)} {Gh_in(402)} 0 {hn(402)}
Gh_403 0 {Gh_out(403)} {Gh_in(403)} 0 {hn(403)}
Gh_404 0 {Gh_out(404)} {Gh_in(404)} 0 {hn(404)}
Gh_405 0 {Gh_out(405)} {Gh_in(405)} 0 {hn(405)}
Gh_406 0 {Gh_out(406)} {Gh_in(406)} 0 {hn(406)}
Gh_407 0 {Gh_out(407)} {Gh_in(407)} 0 {hn(407)}
Gh_408 0 {Gh_out(408)} {Gh_in(408)} 0 {hn(408)}
Gh_409 0 {Gh_out(409)} {Gh_in(409)} 0 {hn(409)}
Gh_410 0 {Gh_out(410)} {Gh_in(410)} 0 {hn(410)}
Gh_411 0 {Gh_out(411)} {Gh_in(411)} 0 {hn(411)}
Gh_412 0 {Gh_out(412)} {Gh_in(412)} 0 {hn(412)}
Gh_413 0 {Gh_out(413)} {Gh_in(413)} 0 {hn(413)}
Gh_414 0 {Gh_out(414)} {Gh_in(414)} 0 {hn(414)}
Gh_415 0 {Gh_out(415)} {Gh_in(415)} 0 {hn(415)}
Gh_416 0 {Gh_out(416)} {Gh_in(416)} 0 {hn(416)}
Gh_417 0 {Gh_out(417)} {Gh_in(417)} 0 {hn(417)}
Gh_418 0 {Gh_out(418)} {Gh_in(418)} 0 {hn(418)}
Gh_419 0 {Gh_out(419)} {Gh_in(419)} 0 {hn(419)}
Gh_420 0 {Gh_out(420)} {Gh_in(420)} 0 {hn(420)}
Gh_421 0 {Gh_out(421)} {Gh_in(421)} 0 {hn(421)}
Gh_422 0 {Gh_out(422)} {Gh_in(422)} 0 {hn(422)}
Gh_423 0 {Gh_out(423)} {Gh_in(423)} 0 {hn(423)}
Gh_424 0 {Gh_out(424)} {Gh_in(424)} 0 {hn(424)}
Gh_425 0 {Gh_out(425)} {Gh_in(425)} 0 {hn(425)}
Gh_426 0 {Gh_out(426)} {Gh_in(426)} 0 {hn(426)}
Gh_427 0 {Gh_out(427)} {Gh_in(427)} 0 {hn(427)}
Gh_428 0 {Gh_out(428)} {Gh_in(428)} 0 {hn(428)}
Gh_429 0 {Gh_out(429)} {Gh_in(429)} 0 {hn(429)}
Gh_430 0 {Gh_out(430)} {Gh_in(430)} 0 {hn(430)}
Gh_431 0 {Gh_out(431)} {Gh_in(431)} 0 {hn(431)}
Gh_432 0 {Gh_out(432)} {Gh_in(432)} 0 {hn(432)}
Gh_433 0 {Gh_out(433)} {Gh_in(433)} 0 {hn(433)}
Gh_434 0 {Gh_out(434)} {Gh_in(434)} 0 {hn(434)}
Gh_435 0 {Gh_out(435)} {Gh_in(435)} 0 {hn(435)}
Gh_436 0 {Gh_out(436)} {Gh_in(436)} 0 {hn(436)}
Gh_437 0 {Gh_out(437)} {Gh_in(437)} 0 {hn(437)}
Gh_438 0 {Gh_out(438)} {Gh_in(438)} 0 {hn(438)}
Gh_439 0 {Gh_out(439)} {Gh_in(439)} 0 {hn(439)}
Gh_440 0 {Gh_out(440)} {Gh_in(440)} 0 {hn(440)}
Gh_441 0 {Gh_out(441)} {Gh_in(441)} 0 {hn(441)}
Gh_442 0 {Gh_out(442)} {Gh_in(442)} 0 {hn(442)}
Gh_443 0 {Gh_out(443)} {Gh_in(443)} 0 {hn(443)}
Gh_444 0 {Gh_out(444)} {Gh_in(444)} 0 {hn(444)}
Gh_445 0 {Gh_out(445)} {Gh_in(445)} 0 {hn(445)}
Gh_446 0 {Gh_out(446)} {Gh_in(446)} 0 {hn(446)}
Gh_447 0 {Gh_out(447)} {Gh_in(447)} 0 {hn(447)}
Gh_448 0 {Gh_out(448)} {Gh_in(448)} 0 {hn(448)}
Gh_449 0 {Gh_out(449)} {Gh_in(449)} 0 {hn(449)}
Gh_450 0 {Gh_out(450)} {Gh_in(450)} 0 {hn(450)}
Gh_451 0 {Gh_out(451)} {Gh_in(451)} 0 {hn(451)}
Gh_452 0 {Gh_out(452)} {Gh_in(452)} 0 {hn(452)}
Gh_453 0 {Gh_out(453)} {Gh_in(453)} 0 {hn(453)}
Gh_454 0 {Gh_out(454)} {Gh_in(454)} 0 {hn(454)}
Gh_455 0 {Gh_out(455)} {Gh_in(455)} 0 {hn(455)}
Gh_456 0 {Gh_out(456)} {Gh_in(456)} 0 {hn(456)}
Gh_457 0 {Gh_out(457)} {Gh_in(457)} 0 {hn(457)}
Gh_458 0 {Gh_out(458)} {Gh_in(458)} 0 {hn(458)}
Gh_459 0 {Gh_out(459)} {Gh_in(459)} 0 {hn(459)}
Gh_460 0 {Gh_out(460)} {Gh_in(460)} 0 {hn(460)}
Gh_461 0 {Gh_out(461)} {Gh_in(461)} 0 {hn(461)}
Gh_462 0 {Gh_out(462)} {Gh_in(462)} 0 {hn(462)}
Gh_463 0 {Gh_out(463)} {Gh_in(463)} 0 {hn(463)}
Gh_464 0 {Gh_out(464)} {Gh_in(464)} 0 {hn(464)}
Gh_465 0 {Gh_out(465)} {Gh_in(465)} 0 {hn(465)}
Gh_466 0 {Gh_out(466)} {Gh_in(466)} 0 {hn(466)}
Gh_467 0 {Gh_out(467)} {Gh_in(467)} 0 {hn(467)}
Gh_468 0 {Gh_out(468)} {Gh_in(468)} 0 {hn(468)}
Gh_469 0 {Gh_out(469)} {Gh_in(469)} 0 {hn(469)}
Gh_470 0 {Gh_out(470)} {Gh_in(470)} 0 {hn(470)}
Gh_471 0 {Gh_out(471)} {Gh_in(471)} 0 {hn(471)}
Gh_472 0 {Gh_out(472)} {Gh_in(472)} 0 {hn(472)}
Gh_473 0 {Gh_out(473)} {Gh_in(473)} 0 {hn(473)}
Gh_474 0 {Gh_out(474)} {Gh_in(474)} 0 {hn(474)}
Gh_475 0 {Gh_out(475)} {Gh_in(475)} 0 {hn(475)}
Gh_476 0 {Gh_out(476)} {Gh_in(476)} 0 {hn(476)}
Gh_477 0 {Gh_out(477)} {Gh_in(477)} 0 {hn(477)}
Gh_478 0 {Gh_out(478)} {Gh_in(478)} 0 {hn(478)}
Gh_479 0 {Gh_out(479)} {Gh_in(479)} 0 {hn(479)}
Gh_480 0 {Gh_out(480)} {Gh_in(480)} 0 {hn(480)}
Gh_481 0 {Gh_out(481)} {Gh_in(481)} 0 {hn(481)}
Gh_482 0 {Gh_out(482)} {Gh_in(482)} 0 {hn(482)}
Gh_483 0 {Gh_out(483)} {Gh_in(483)} 0 {hn(483)}
Gh_484 0 {Gh_out(484)} {Gh_in(484)} 0 {hn(484)}
Gh_485 0 {Gh_out(485)} {Gh_in(485)} 0 {hn(485)}
Gh_486 0 {Gh_out(486)} {Gh_in(486)} 0 {hn(486)}
Gh_487 0 {Gh_out(487)} {Gh_in(487)} 0 {hn(487)}
Gh_488 0 {Gh_out(488)} {Gh_in(488)} 0 {hn(488)}
Gh_489 0 {Gh_out(489)} {Gh_in(489)} 0 {hn(489)}
Gh_490 0 {Gh_out(490)} {Gh_in(490)} 0 {hn(490)}
Gh_491 0 {Gh_out(491)} {Gh_in(491)} 0 {hn(491)}
Gh_492 0 {Gh_out(492)} {Gh_in(492)} 0 {hn(492)}
Gh_493 0 {Gh_out(493)} {Gh_in(493)} 0 {hn(493)}
Gh_494 0 {Gh_out(494)} {Gh_in(494)} 0 {hn(494)}
Gh_495 0 {Gh_out(495)} {Gh_in(495)} 0 {hn(495)}
Gh_496 0 {Gh_out(496)} {Gh_in(496)} 0 {hn(496)}
Gh_497 0 {Gh_out(497)} {Gh_in(497)} 0 {hn(497)}
Gh_498 0 {Gh_out(498)} {Gh_in(498)} 0 {hn(498)}
Gh_499 0 {Gh_out(499)} {Gh_in(499)} 0 {hn(499)}
Gh_500 0 {Gh_out(500)} {Gh_in(500)} 0 {hn(500)}
Gh_501 0 {Gh_out(501)} {Gh_in(501)} 0 {hn(501)}
Gh_502 0 {Gh_out(502)} {Gh_in(502)} 0 {hn(502)}
Gh_503 0 {Gh_out(503)} {Gh_in(503)} 0 {hn(503)}
Gh_504 0 {Gh_out(504)} {Gh_in(504)} 0 {hn(504)}
Gh_505 0 {Gh_out(505)} {Gh_in(505)} 0 {hn(505)}
Gh_506 0 {Gh_out(506)} {Gh_in(506)} 0 {hn(506)}
Gh_507 0 {Gh_out(507)} {Gh_in(507)} 0 {hn(507)}
Gh_508 0 {Gh_out(508)} {Gh_in(508)} 0 {hn(508)}
Gh_509 0 {Gh_out(509)} {Gh_in(509)} 0 {hn(509)}
Gh_510 0 {Gh_out(510)} {Gh_in(510)} 0 {hn(510)}
Gh_511 0 {Gh_out(511)} {Gh_in(511)} 0 {hn(511)}
Gh_512 0 {Gh_out(512)} {Gh_in(512)} 0 {hn(512)}
Gh_513 0 {Gh_out(513)} {Gh_in(513)} 0 {hn(513)}
Gh_514 0 {Gh_out(514)} {Gh_in(514)} 0 {hn(514)}
Gh_515 0 {Gh_out(515)} {Gh_in(515)} 0 {hn(515)}
Gh_516 0 {Gh_out(516)} {Gh_in(516)} 0 {hn(516)}
Gh_517 0 {Gh_out(517)} {Gh_in(517)} 0 {hn(517)}
Gh_518 0 {Gh_out(518)} {Gh_in(518)} 0 {hn(518)}
Gh_519 0 {Gh_out(519)} {Gh_in(519)} 0 {hn(519)}
Gh_520 0 {Gh_out(520)} {Gh_in(520)} 0 {hn(520)}
Gh_521 0 {Gh_out(521)} {Gh_in(521)} 0 {hn(521)}
Gh_522 0 {Gh_out(522)} {Gh_in(522)} 0 {hn(522)}
Gh_523 0 {Gh_out(523)} {Gh_in(523)} 0 {hn(523)}
Gh_524 0 {Gh_out(524)} {Gh_in(524)} 0 {hn(524)}
Gh_525 0 {Gh_out(525)} {Gh_in(525)} 0 {hn(525)}
Gh_526 0 {Gh_out(526)} {Gh_in(526)} 0 {hn(526)}
Gh_527 0 {Gh_out(527)} {Gh_in(527)} 0 {hn(527)}
Gh_528 0 {Gh_out(528)} {Gh_in(528)} 0 {hn(528)}
Gh_529 0 {Gh_out(529)} {Gh_in(529)} 0 {hn(529)}
Gh_530 0 {Gh_out(530)} {Gh_in(530)} 0 {hn(530)}
Gh_531 0 {Gh_out(531)} {Gh_in(531)} 0 {hn(531)}
Gh_532 0 {Gh_out(532)} {Gh_in(532)} 0 {hn(532)}
Gh_533 0 {Gh_out(533)} {Gh_in(533)} 0 {hn(533)}
Gh_534 0 {Gh_out(534)} {Gh_in(534)} 0 {hn(534)}
Gh_535 0 {Gh_out(535)} {Gh_in(535)} 0 {hn(535)}
Gh_536 0 {Gh_out(536)} {Gh_in(536)} 0 {hn(536)}
Gh_537 0 {Gh_out(537)} {Gh_in(537)} 0 {hn(537)}
Gh_538 0 {Gh_out(538)} {Gh_in(538)} 0 {hn(538)}
Gh_539 0 {Gh_out(539)} {Gh_in(539)} 0 {hn(539)}
Gh_540 0 {Gh_out(540)} {Gh_in(540)} 0 {hn(540)}
Gh_541 0 {Gh_out(541)} {Gh_in(541)} 0 {hn(541)}
Gh_542 0 {Gh_out(542)} {Gh_in(542)} 0 {hn(542)}
Gh_543 0 {Gh_out(543)} {Gh_in(543)} 0 {hn(543)}
Gh_544 0 {Gh_out(544)} {Gh_in(544)} 0 {hn(544)}
Gh_545 0 {Gh_out(545)} {Gh_in(545)} 0 {hn(545)}
Gh_546 0 {Gh_out(546)} {Gh_in(546)} 0 {hn(546)}
Gh_547 0 {Gh_out(547)} {Gh_in(547)} 0 {hn(547)}
Gh_548 0 {Gh_out(548)} {Gh_in(548)} 0 {hn(548)}
Gh_549 0 {Gh_out(549)} {Gh_in(549)} 0 {hn(549)}
Gh_550 0 {Gh_out(550)} {Gh_in(550)} 0 {hn(550)}
Gh_551 0 {Gh_out(551)} {Gh_in(551)} 0 {hn(551)}
Gh_552 0 {Gh_out(552)} {Gh_in(552)} 0 {hn(552)}
Gh_553 0 {Gh_out(553)} {Gh_in(553)} 0 {hn(553)}
Gh_554 0 {Gh_out(554)} {Gh_in(554)} 0 {hn(554)}
Gh_555 0 {Gh_out(555)} {Gh_in(555)} 0 {hn(555)}
Gh_556 0 {Gh_out(556)} {Gh_in(556)} 0 {hn(556)}
Gh_557 0 {Gh_out(557)} {Gh_in(557)} 0 {hn(557)}
Gh_558 0 {Gh_out(558)} {Gh_in(558)} 0 {hn(558)}
Gh_559 0 {Gh_out(559)} {Gh_in(559)} 0 {hn(559)}
Gh_560 0 {Gh_out(560)} {Gh_in(560)} 0 {hn(560)}
Gh_561 0 {Gh_out(561)} {Gh_in(561)} 0 {hn(561)}
Gh_562 0 {Gh_out(562)} {Gh_in(562)} 0 {hn(562)}
Gh_563 0 {Gh_out(563)} {Gh_in(563)} 0 {hn(563)}
Gh_564 0 {Gh_out(564)} {Gh_in(564)} 0 {hn(564)}
Gh_565 0 {Gh_out(565)} {Gh_in(565)} 0 {hn(565)}
Gh_566 0 {Gh_out(566)} {Gh_in(566)} 0 {hn(566)}
Gh_567 0 {Gh_out(567)} {Gh_in(567)} 0 {hn(567)}
Gh_568 0 {Gh_out(568)} {Gh_in(568)} 0 {hn(568)}
Gh_569 0 {Gh_out(569)} {Gh_in(569)} 0 {hn(569)}
Gh_570 0 {Gh_out(570)} {Gh_in(570)} 0 {hn(570)}
Gh_571 0 {Gh_out(571)} {Gh_in(571)} 0 {hn(571)}
Gh_572 0 {Gh_out(572)} {Gh_in(572)} 0 {hn(572)}
Gh_573 0 {Gh_out(573)} {Gh_in(573)} 0 {hn(573)}
Gh_574 0 {Gh_out(574)} {Gh_in(574)} 0 {hn(574)}
Gh_575 0 {Gh_out(575)} {Gh_in(575)} 0 {hn(575)}
Gh_576 0 {Gh_out(576)} {Gh_in(576)} 0 {hn(576)}
Gh_577 0 {Gh_out(577)} {Gh_in(577)} 0 {hn(577)}
Gh_578 0 {Gh_out(578)} {Gh_in(578)} 0 {hn(578)}
Gh_579 0 {Gh_out(579)} {Gh_in(579)} 0 {hn(579)}
Gh_580 0 {Gh_out(580)} {Gh_in(580)} 0 {hn(580)}
Gh_581 0 {Gh_out(581)} {Gh_in(581)} 0 {hn(581)}
Gh_582 0 {Gh_out(582)} {Gh_in(582)} 0 {hn(582)}
Gh_583 0 {Gh_out(583)} {Gh_in(583)} 0 {hn(583)}
Gh_584 0 {Gh_out(584)} {Gh_in(584)} 0 {hn(584)}
Gh_585 0 {Gh_out(585)} {Gh_in(585)} 0 {hn(585)}
Gh_586 0 {Gh_out(586)} {Gh_in(586)} 0 {hn(586)}
Gh_587 0 {Gh_out(587)} {Gh_in(587)} 0 {hn(587)}
Gh_588 0 {Gh_out(588)} {Gh_in(588)} 0 {hn(588)}
Gh_589 0 {Gh_out(589)} {Gh_in(589)} 0 {hn(589)}
Gh_590 0 {Gh_out(590)} {Gh_in(590)} 0 {hn(590)}
Gh_591 0 {Gh_out(591)} {Gh_in(591)} 0 {hn(591)}
Gh_592 0 {Gh_out(592)} {Gh_in(592)} 0 {hn(592)}
Gh_593 0 {Gh_out(593)} {Gh_in(593)} 0 {hn(593)}
Gh_594 0 {Gh_out(594)} {Gh_in(594)} 0 {hn(594)}
Gh_595 0 {Gh_out(595)} {Gh_in(595)} 0 {hn(595)}
Gh_596 0 {Gh_out(596)} {Gh_in(596)} 0 {hn(596)}
Gh_597 0 {Gh_out(597)} {Gh_in(597)} 0 {hn(597)}
Gh_598 0 {Gh_out(598)} {Gh_in(598)} 0 {hn(598)}
Gh_599 0 {Gh_out(599)} {Gh_in(599)} 0 {hn(599)}
Gh_600 0 {Gh_out(600)} {Gh_in(600)} 0 {hn(600)}
Gh_601 0 {Gh_out(601)} {Gh_in(601)} 0 {hn(601)}
Gh_602 0 {Gh_out(602)} {Gh_in(602)} 0 {hn(602)}
Gh_603 0 {Gh_out(603)} {Gh_in(603)} 0 {hn(603)}
Gh_604 0 {Gh_out(604)} {Gh_in(604)} 0 {hn(604)}
Gh_605 0 {Gh_out(605)} {Gh_in(605)} 0 {hn(605)}
Gh_606 0 {Gh_out(606)} {Gh_in(606)} 0 {hn(606)}
Gh_607 0 {Gh_out(607)} {Gh_in(607)} 0 {hn(607)}
Gh_608 0 {Gh_out(608)} {Gh_in(608)} 0 {hn(608)}
Gh_609 0 {Gh_out(609)} {Gh_in(609)} 0 {hn(609)}
Gh_610 0 {Gh_out(610)} {Gh_in(610)} 0 {hn(610)}
Gh_611 0 {Gh_out(611)} {Gh_in(611)} 0 {hn(611)}
Gh_612 0 {Gh_out(612)} {Gh_in(612)} 0 {hn(612)}
Gh_613 0 {Gh_out(613)} {Gh_in(613)} 0 {hn(613)}
Gh_614 0 {Gh_out(614)} {Gh_in(614)} 0 {hn(614)}
Gh_615 0 {Gh_out(615)} {Gh_in(615)} 0 {hn(615)}
Gh_616 0 {Gh_out(616)} {Gh_in(616)} 0 {hn(616)}
Gh_617 0 {Gh_out(617)} {Gh_in(617)} 0 {hn(617)}
Gh_618 0 {Gh_out(618)} {Gh_in(618)} 0 {hn(618)}
Gh_619 0 {Gh_out(619)} {Gh_in(619)} 0 {hn(619)}
Gh_620 0 {Gh_out(620)} {Gh_in(620)} 0 {hn(620)}
Gh_621 0 {Gh_out(621)} {Gh_in(621)} 0 {hn(621)}
Gh_622 0 {Gh_out(622)} {Gh_in(622)} 0 {hn(622)}
Gh_623 0 {Gh_out(623)} {Gh_in(623)} 0 {hn(623)}
Gh_624 0 {Gh_out(624)} {Gh_in(624)} 0 {hn(624)}
Gh_625 0 {Gh_out(625)} {Gh_in(625)} 0 {hn(625)}
Gh_626 0 {Gh_out(626)} {Gh_in(626)} 0 {hn(626)}
Gh_627 0 {Gh_out(627)} {Gh_in(627)} 0 {hn(627)}
Gh_628 0 {Gh_out(628)} {Gh_in(628)} 0 {hn(628)}
Gh_629 0 {Gh_out(629)} {Gh_in(629)} 0 {hn(629)}
Gh_630 0 {Gh_out(630)} {Gh_in(630)} 0 {hn(630)}
Gh_631 0 {Gh_out(631)} {Gh_in(631)} 0 {hn(631)}
Gh_632 0 {Gh_out(632)} {Gh_in(632)} 0 {hn(632)}
Gh_633 0 {Gh_out(633)} {Gh_in(633)} 0 {hn(633)}
Gh_634 0 {Gh_out(634)} {Gh_in(634)} 0 {hn(634)}
Gh_635 0 {Gh_out(635)} {Gh_in(635)} 0 {hn(635)}
Gh_636 0 {Gh_out(636)} {Gh_in(636)} 0 {hn(636)}
Gh_637 0 {Gh_out(637)} {Gh_in(637)} 0 {hn(637)}
Gh_638 0 {Gh_out(638)} {Gh_in(638)} 0 {hn(638)}
Gh_639 0 {Gh_out(639)} {Gh_in(639)} 0 {hn(639)}
Gh_640 0 {Gh_out(640)} {Gh_in(640)} 0 {hn(640)}
Gh_641 0 {Gh_out(641)} {Gh_in(641)} 0 {hn(641)}
Gh_642 0 {Gh_out(642)} {Gh_in(642)} 0 {hn(642)}
Gh_643 0 {Gh_out(643)} {Gh_in(643)} 0 {hn(643)}
Gh_644 0 {Gh_out(644)} {Gh_in(644)} 0 {hn(644)}
Gh_645 0 {Gh_out(645)} {Gh_in(645)} 0 {hn(645)}
Gh_646 0 {Gh_out(646)} {Gh_in(646)} 0 {hn(646)}
Gh_647 0 {Gh_out(647)} {Gh_in(647)} 0 {hn(647)}
Gh_648 0 {Gh_out(648)} {Gh_in(648)} 0 {hn(648)}
Gh_649 0 {Gh_out(649)} {Gh_in(649)} 0 {hn(649)}
Gh_650 0 {Gh_out(650)} {Gh_in(650)} 0 {hn(650)}
Gh_651 0 {Gh_out(651)} {Gh_in(651)} 0 {hn(651)}
Gh_652 0 {Gh_out(652)} {Gh_in(652)} 0 {hn(652)}
Gh_653 0 {Gh_out(653)} {Gh_in(653)} 0 {hn(653)}
Gh_654 0 {Gh_out(654)} {Gh_in(654)} 0 {hn(654)}
Gh_655 0 {Gh_out(655)} {Gh_in(655)} 0 {hn(655)}
Gh_656 0 {Gh_out(656)} {Gh_in(656)} 0 {hn(656)}
Gh_657 0 {Gh_out(657)} {Gh_in(657)} 0 {hn(657)}
Gh_658 0 {Gh_out(658)} {Gh_in(658)} 0 {hn(658)}
Gh_659 0 {Gh_out(659)} {Gh_in(659)} 0 {hn(659)}
Gh_660 0 {Gh_out(660)} {Gh_in(660)} 0 {hn(660)}
Gh_661 0 {Gh_out(661)} {Gh_in(661)} 0 {hn(661)}
Gh_662 0 {Gh_out(662)} {Gh_in(662)} 0 {hn(662)}
Gh_663 0 {Gh_out(663)} {Gh_in(663)} 0 {hn(663)}
Gh_664 0 {Gh_out(664)} {Gh_in(664)} 0 {hn(664)}
Gh_665 0 {Gh_out(665)} {Gh_in(665)} 0 {hn(665)}
Gh_666 0 {Gh_out(666)} {Gh_in(666)} 0 {hn(666)}
Gh_667 0 {Gh_out(667)} {Gh_in(667)} 0 {hn(667)}
Gh_668 0 {Gh_out(668)} {Gh_in(668)} 0 {hn(668)}
Gh_669 0 {Gh_out(669)} {Gh_in(669)} 0 {hn(669)}
Gh_670 0 {Gh_out(670)} {Gh_in(670)} 0 {hn(670)}
Gh_671 0 {Gh_out(671)} {Gh_in(671)} 0 {hn(671)}
Gh_672 0 {Gh_out(672)} {Gh_in(672)} 0 {hn(672)}
Gh_673 0 {Gh_out(673)} {Gh_in(673)} 0 {hn(673)}
Gh_674 0 {Gh_out(674)} {Gh_in(674)} 0 {hn(674)}
Gh_675 0 {Gh_out(675)} {Gh_in(675)} 0 {hn(675)}
Gh_676 0 {Gh_out(676)} {Gh_in(676)} 0 {hn(676)}
Gh_677 0 {Gh_out(677)} {Gh_in(677)} 0 {hn(677)}
Gh_678 0 {Gh_out(678)} {Gh_in(678)} 0 {hn(678)}
Gh_679 0 {Gh_out(679)} {Gh_in(679)} 0 {hn(679)}
Gh_680 0 {Gh_out(680)} {Gh_in(680)} 0 {hn(680)}
Gh_681 0 {Gh_out(681)} {Gh_in(681)} 0 {hn(681)}
Gh_682 0 {Gh_out(682)} {Gh_in(682)} 0 {hn(682)}
Gh_683 0 {Gh_out(683)} {Gh_in(683)} 0 {hn(683)}
Gh_684 0 {Gh_out(684)} {Gh_in(684)} 0 {hn(684)}
Gh_685 0 {Gh_out(685)} {Gh_in(685)} 0 {hn(685)}
Gh_686 0 {Gh_out(686)} {Gh_in(686)} 0 {hn(686)}
Gh_687 0 {Gh_out(687)} {Gh_in(687)} 0 {hn(687)}
Gh_688 0 {Gh_out(688)} {Gh_in(688)} 0 {hn(688)}
Gh_689 0 {Gh_out(689)} {Gh_in(689)} 0 {hn(689)}
Gh_690 0 {Gh_out(690)} {Gh_in(690)} 0 {hn(690)}
Gh_691 0 {Gh_out(691)} {Gh_in(691)} 0 {hn(691)}
Gh_692 0 {Gh_out(692)} {Gh_in(692)} 0 {hn(692)}
Gh_693 0 {Gh_out(693)} {Gh_in(693)} 0 {hn(693)}
Gh_694 0 {Gh_out(694)} {Gh_in(694)} 0 {hn(694)}
Gh_695 0 {Gh_out(695)} {Gh_in(695)} 0 {hn(695)}
Gh_696 0 {Gh_out(696)} {Gh_in(696)} 0 {hn(696)}
Gh_697 0 {Gh_out(697)} {Gh_in(697)} 0 {hn(697)}
Gh_698 0 {Gh_out(698)} {Gh_in(698)} 0 {hn(698)}
Gh_699 0 {Gh_out(699)} {Gh_in(699)} 0 {hn(699)}
Gh_700 0 {Gh_out(700)} {Gh_in(700)} 0 {hn(700)}
Gh_701 0 {Gh_out(701)} {Gh_in(701)} 0 {hn(701)}
Gh_702 0 {Gh_out(702)} {Gh_in(702)} 0 {hn(702)}
Gh_703 0 {Gh_out(703)} {Gh_in(703)} 0 {hn(703)}
Gh_704 0 {Gh_out(704)} {Gh_in(704)} 0 {hn(704)}
Gh_705 0 {Gh_out(705)} {Gh_in(705)} 0 {hn(705)}
Gh_706 0 {Gh_out(706)} {Gh_in(706)} 0 {hn(706)}
Gh_707 0 {Gh_out(707)} {Gh_in(707)} 0 {hn(707)}
Gh_708 0 {Gh_out(708)} {Gh_in(708)} 0 {hn(708)}
Gh_709 0 {Gh_out(709)} {Gh_in(709)} 0 {hn(709)}
Gh_710 0 {Gh_out(710)} {Gh_in(710)} 0 {hn(710)}
Gh_711 0 {Gh_out(711)} {Gh_in(711)} 0 {hn(711)}
Gh_712 0 {Gh_out(712)} {Gh_in(712)} 0 {hn(712)}
Gh_713 0 {Gh_out(713)} {Gh_in(713)} 0 {hn(713)}
Gh_714 0 {Gh_out(714)} {Gh_in(714)} 0 {hn(714)}
Gh_715 0 {Gh_out(715)} {Gh_in(715)} 0 {hn(715)}
Gh_716 0 {Gh_out(716)} {Gh_in(716)} 0 {hn(716)}
Gh_717 0 {Gh_out(717)} {Gh_in(717)} 0 {hn(717)}
Gh_718 0 {Gh_out(718)} {Gh_in(718)} 0 {hn(718)}
Gh_719 0 {Gh_out(719)} {Gh_in(719)} 0 {hn(719)}
Gh_720 0 {Gh_out(720)} {Gh_in(720)} 0 {hn(720)}
Gh_721 0 {Gh_out(721)} {Gh_in(721)} 0 {hn(721)}
Gh_722 0 {Gh_out(722)} {Gh_in(722)} 0 {hn(722)}
Gh_723 0 {Gh_out(723)} {Gh_in(723)} 0 {hn(723)}
Gh_724 0 {Gh_out(724)} {Gh_in(724)} 0 {hn(724)}
Gh_725 0 {Gh_out(725)} {Gh_in(725)} 0 {hn(725)}
Gh_726 0 {Gh_out(726)} {Gh_in(726)} 0 {hn(726)}
Gh_727 0 {Gh_out(727)} {Gh_in(727)} 0 {hn(727)}
Gh_728 0 {Gh_out(728)} {Gh_in(728)} 0 {hn(728)}
Gh_729 0 {Gh_out(729)} {Gh_in(729)} 0 {hn(729)}
Gh_730 0 {Gh_out(730)} {Gh_in(730)} 0 {hn(730)}
Gh_731 0 {Gh_out(731)} {Gh_in(731)} 0 {hn(731)}
Gh_732 0 {Gh_out(732)} {Gh_in(732)} 0 {hn(732)}
Gh_733 0 {Gh_out(733)} {Gh_in(733)} 0 {hn(733)}
Gh_734 0 {Gh_out(734)} {Gh_in(734)} 0 {hn(734)}
Gh_735 0 {Gh_out(735)} {Gh_in(735)} 0 {hn(735)}
Gh_736 0 {Gh_out(736)} {Gh_in(736)} 0 {hn(736)}
Gh_737 0 {Gh_out(737)} {Gh_in(737)} 0 {hn(737)}
Gh_738 0 {Gh_out(738)} {Gh_in(738)} 0 {hn(738)}
Gh_739 0 {Gh_out(739)} {Gh_in(739)} 0 {hn(739)}
Gh_740 0 {Gh_out(740)} {Gh_in(740)} 0 {hn(740)}
Gh_741 0 {Gh_out(741)} {Gh_in(741)} 0 {hn(741)}
Gh_742 0 {Gh_out(742)} {Gh_in(742)} 0 {hn(742)}
Gh_743 0 {Gh_out(743)} {Gh_in(743)} 0 {hn(743)}
Gh_744 0 {Gh_out(744)} {Gh_in(744)} 0 {hn(744)}
Gh_745 0 {Gh_out(745)} {Gh_in(745)} 0 {hn(745)}
Gh_746 0 {Gh_out(746)} {Gh_in(746)} 0 {hn(746)}
Gh_747 0 {Gh_out(747)} {Gh_in(747)} 0 {hn(747)}
Gh_748 0 {Gh_out(748)} {Gh_in(748)} 0 {hn(748)}
Gh_749 0 {Gh_out(749)} {Gh_in(749)} 0 {hn(749)}
Gh_750 0 {Gh_out(750)} {Gh_in(750)} 0 {hn(750)}
Gh_751 0 {Gh_out(751)} {Gh_in(751)} 0 {hn(751)}
Gh_752 0 {Gh_out(752)} {Gh_in(752)} 0 {hn(752)}
Gh_753 0 {Gh_out(753)} {Gh_in(753)} 0 {hn(753)}
Gh_754 0 {Gh_out(754)} {Gh_in(754)} 0 {hn(754)}
Gh_755 0 {Gh_out(755)} {Gh_in(755)} 0 {hn(755)}
Gh_756 0 {Gh_out(756)} {Gh_in(756)} 0 {hn(756)}
Gh_757 0 {Gh_out(757)} {Gh_in(757)} 0 {hn(757)}
Gh_758 0 {Gh_out(758)} {Gh_in(758)} 0 {hn(758)}
Gh_759 0 {Gh_out(759)} {Gh_in(759)} 0 {hn(759)}
Gh_760 0 {Gh_out(760)} {Gh_in(760)} 0 {hn(760)}
Gh_761 0 {Gh_out(761)} {Gh_in(761)} 0 {hn(761)}
Gh_762 0 {Gh_out(762)} {Gh_in(762)} 0 {hn(762)}
Gh_763 0 {Gh_out(763)} {Gh_in(763)} 0 {hn(763)}
Gh_764 0 {Gh_out(764)} {Gh_in(764)} 0 {hn(764)}
Gh_765 0 {Gh_out(765)} {Gh_in(765)} 0 {hn(765)}
Gh_766 0 {Gh_out(766)} {Gh_in(766)} 0 {hn(766)}
Gh_767 0 {Gh_out(767)} {Gh_in(767)} 0 {hn(767)}
Gh_768 0 {Gh_out(768)} {Gh_in(768)} 0 {hn(768)}
Gh_769 0 {Gh_out(769)} {Gh_in(769)} 0 {hn(769)}
Gh_770 0 {Gh_out(770)} {Gh_in(770)} 0 {hn(770)}
Gh_771 0 {Gh_out(771)} {Gh_in(771)} 0 {hn(771)}
Gh_772 0 {Gh_out(772)} {Gh_in(772)} 0 {hn(772)}
Gh_773 0 {Gh_out(773)} {Gh_in(773)} 0 {hn(773)}
Gh_774 0 {Gh_out(774)} {Gh_in(774)} 0 {hn(774)}
Gh_775 0 {Gh_out(775)} {Gh_in(775)} 0 {hn(775)}
Gh_776 0 {Gh_out(776)} {Gh_in(776)} 0 {hn(776)}
Gh_777 0 {Gh_out(777)} {Gh_in(777)} 0 {hn(777)}
Gh_778 0 {Gh_out(778)} {Gh_in(778)} 0 {hn(778)}
Gh_779 0 {Gh_out(779)} {Gh_in(779)} 0 {hn(779)}
Gh_780 0 {Gh_out(780)} {Gh_in(780)} 0 {hn(780)}
Gh_781 0 {Gh_out(781)} {Gh_in(781)} 0 {hn(781)}
Gh_782 0 {Gh_out(782)} {Gh_in(782)} 0 {hn(782)}
Gh_783 0 {Gh_out(783)} {Gh_in(783)} 0 {hn(783)}
Gh_784 0 {Gh_out(784)} {Gh_in(784)} 0 {hn(784)}
Gh_785 0 {Gh_out(785)} {Gh_in(785)} 0 {hn(785)}
Gh_786 0 {Gh_out(786)} {Gh_in(786)} 0 {hn(786)}
Gh_787 0 {Gh_out(787)} {Gh_in(787)} 0 {hn(787)}
Gh_788 0 {Gh_out(788)} {Gh_in(788)} 0 {hn(788)}
Gh_789 0 {Gh_out(789)} {Gh_in(789)} 0 {hn(789)}
Gh_790 0 {Gh_out(790)} {Gh_in(790)} 0 {hn(790)}
Gh_791 0 {Gh_out(791)} {Gh_in(791)} 0 {hn(791)}
Gh_792 0 {Gh_out(792)} {Gh_in(792)} 0 {hn(792)}
Gh_793 0 {Gh_out(793)} {Gh_in(793)} 0 {hn(793)}
Gh_794 0 {Gh_out(794)} {Gh_in(794)} 0 {hn(794)}
Gh_795 0 {Gh_out(795)} {Gh_in(795)} 0 {hn(795)}
Gh_796 0 {Gh_out(796)} {Gh_in(796)} 0 {hn(796)}
Gh_797 0 {Gh_out(797)} {Gh_in(797)} 0 {hn(797)}
Gh_798 0 {Gh_out(798)} {Gh_in(798)} 0 {hn(798)}
Gh_799 0 {Gh_out(799)} {Gh_in(799)} 0 {hn(799)}
Gh_800 0 {Gh_out(800)} {Gh_in(800)} 0 {hn(800)}
Gh_801 0 {Gh_out(801)} {Gh_in(801)} 0 {hn(801)}
Gh_802 0 {Gh_out(802)} {Gh_in(802)} 0 {hn(802)}
Gh_803 0 {Gh_out(803)} {Gh_in(803)} 0 {hn(803)}
Gh_804 0 {Gh_out(804)} {Gh_in(804)} 0 {hn(804)}
Gh_805 0 {Gh_out(805)} {Gh_in(805)} 0 {hn(805)}
Gh_806 0 {Gh_out(806)} {Gh_in(806)} 0 {hn(806)}
Gh_807 0 {Gh_out(807)} {Gh_in(807)} 0 {hn(807)}
Gh_808 0 {Gh_out(808)} {Gh_in(808)} 0 {hn(808)}
Gh_809 0 {Gh_out(809)} {Gh_in(809)} 0 {hn(809)}
Gh_810 0 {Gh_out(810)} {Gh_in(810)} 0 {hn(810)}
Gh_811 0 {Gh_out(811)} {Gh_in(811)} 0 {hn(811)}
Gh_812 0 {Gh_out(812)} {Gh_in(812)} 0 {hn(812)}
Gh_813 0 {Gh_out(813)} {Gh_in(813)} 0 {hn(813)}
Gh_814 0 {Gh_out(814)} {Gh_in(814)} 0 {hn(814)}
Gh_815 0 {Gh_out(815)} {Gh_in(815)} 0 {hn(815)}
Gh_816 0 {Gh_out(816)} {Gh_in(816)} 0 {hn(816)}
Gh_817 0 {Gh_out(817)} {Gh_in(817)} 0 {hn(817)}
Gh_818 0 {Gh_out(818)} {Gh_in(818)} 0 {hn(818)}
Gh_819 0 {Gh_out(819)} {Gh_in(819)} 0 {hn(819)}
Gh_820 0 {Gh_out(820)} {Gh_in(820)} 0 {hn(820)}
Gh_821 0 {Gh_out(821)} {Gh_in(821)} 0 {hn(821)}
Gh_822 0 {Gh_out(822)} {Gh_in(822)} 0 {hn(822)}
Gh_823 0 {Gh_out(823)} {Gh_in(823)} 0 {hn(823)}
Gh_824 0 {Gh_out(824)} {Gh_in(824)} 0 {hn(824)}
Gh_825 0 {Gh_out(825)} {Gh_in(825)} 0 {hn(825)}
Gh_826 0 {Gh_out(826)} {Gh_in(826)} 0 {hn(826)}
Gh_827 0 {Gh_out(827)} {Gh_in(827)} 0 {hn(827)}
Gh_828 0 {Gh_out(828)} {Gh_in(828)} 0 {hn(828)}
Gh_829 0 {Gh_out(829)} {Gh_in(829)} 0 {hn(829)}
Gh_830 0 {Gh_out(830)} {Gh_in(830)} 0 {hn(830)}
Gh_831 0 {Gh_out(831)} {Gh_in(831)} 0 {hn(831)}
Gh_832 0 {Gh_out(832)} {Gh_in(832)} 0 {hn(832)}
Gh_833 0 {Gh_out(833)} {Gh_in(833)} 0 {hn(833)}
Gh_834 0 {Gh_out(834)} {Gh_in(834)} 0 {hn(834)}
Gh_835 0 {Gh_out(835)} {Gh_in(835)} 0 {hn(835)}
Gh_836 0 {Gh_out(836)} {Gh_in(836)} 0 {hn(836)}
Gh_837 0 {Gh_out(837)} {Gh_in(837)} 0 {hn(837)}
Gh_838 0 {Gh_out(838)} {Gh_in(838)} 0 {hn(838)}
Gh_839 0 {Gh_out(839)} {Gh_in(839)} 0 {hn(839)}
Gh_840 0 {Gh_out(840)} {Gh_in(840)} 0 {hn(840)}
Gh_841 0 {Gh_out(841)} {Gh_in(841)} 0 {hn(841)}
Gh_842 0 {Gh_out(842)} {Gh_in(842)} 0 {hn(842)}
Gh_843 0 {Gh_out(843)} {Gh_in(843)} 0 {hn(843)}
Gh_844 0 {Gh_out(844)} {Gh_in(844)} 0 {hn(844)}
Gh_845 0 {Gh_out(845)} {Gh_in(845)} 0 {hn(845)}
Gh_846 0 {Gh_out(846)} {Gh_in(846)} 0 {hn(846)}
Gh_847 0 {Gh_out(847)} {Gh_in(847)} 0 {hn(847)}
Gh_848 0 {Gh_out(848)} {Gh_in(848)} 0 {hn(848)}
Gh_849 0 {Gh_out(849)} {Gh_in(849)} 0 {hn(849)}
Gh_850 0 {Gh_out(850)} {Gh_in(850)} 0 {hn(850)}
Gh_851 0 {Gh_out(851)} {Gh_in(851)} 0 {hn(851)}
Gh_852 0 {Gh_out(852)} {Gh_in(852)} 0 {hn(852)}
Gh_853 0 {Gh_out(853)} {Gh_in(853)} 0 {hn(853)}
Gh_854 0 {Gh_out(854)} {Gh_in(854)} 0 {hn(854)}
Gh_855 0 {Gh_out(855)} {Gh_in(855)} 0 {hn(855)}
Gh_856 0 {Gh_out(856)} {Gh_in(856)} 0 {hn(856)}
Gh_857 0 {Gh_out(857)} {Gh_in(857)} 0 {hn(857)}
Gh_858 0 {Gh_out(858)} {Gh_in(858)} 0 {hn(858)}
Gh_859 0 {Gh_out(859)} {Gh_in(859)} 0 {hn(859)}
Gh_860 0 {Gh_out(860)} {Gh_in(860)} 0 {hn(860)}
Gh_861 0 {Gh_out(861)} {Gh_in(861)} 0 {hn(861)}
Gh_862 0 {Gh_out(862)} {Gh_in(862)} 0 {hn(862)}
Gh_863 0 {Gh_out(863)} {Gh_in(863)} 0 {hn(863)}
Gh_864 0 {Gh_out(864)} {Gh_in(864)} 0 {hn(864)}
Gh_865 0 {Gh_out(865)} {Gh_in(865)} 0 {hn(865)}
Gh_866 0 {Gh_out(866)} {Gh_in(866)} 0 {hn(866)}
Gh_867 0 {Gh_out(867)} {Gh_in(867)} 0 {hn(867)}
Gh_868 0 {Gh_out(868)} {Gh_in(868)} 0 {hn(868)}
Gh_869 0 {Gh_out(869)} {Gh_in(869)} 0 {hn(869)}
Gh_870 0 {Gh_out(870)} {Gh_in(870)} 0 {hn(870)}
Gh_871 0 {Gh_out(871)} {Gh_in(871)} 0 {hn(871)}
Gh_872 0 {Gh_out(872)} {Gh_in(872)} 0 {hn(872)}
Gh_873 0 {Gh_out(873)} {Gh_in(873)} 0 {hn(873)}
Gh_874 0 {Gh_out(874)} {Gh_in(874)} 0 {hn(874)}
Gh_875 0 {Gh_out(875)} {Gh_in(875)} 0 {hn(875)}
Gh_876 0 {Gh_out(876)} {Gh_in(876)} 0 {hn(876)}
Gh_877 0 {Gh_out(877)} {Gh_in(877)} 0 {hn(877)}
Gh_878 0 {Gh_out(878)} {Gh_in(878)} 0 {hn(878)}
Gh_879 0 {Gh_out(879)} {Gh_in(879)} 0 {hn(879)}
Gh_880 0 {Gh_out(880)} {Gh_in(880)} 0 {hn(880)}
Gh_881 0 {Gh_out(881)} {Gh_in(881)} 0 {hn(881)}
Gh_882 0 {Gh_out(882)} {Gh_in(882)} 0 {hn(882)}
Gh_883 0 {Gh_out(883)} {Gh_in(883)} 0 {hn(883)}
Gh_884 0 {Gh_out(884)} {Gh_in(884)} 0 {hn(884)}
Gh_885 0 {Gh_out(885)} {Gh_in(885)} 0 {hn(885)}
Gh_886 0 {Gh_out(886)} {Gh_in(886)} 0 {hn(886)}
Gh_887 0 {Gh_out(887)} {Gh_in(887)} 0 {hn(887)}
Gh_888 0 {Gh_out(888)} {Gh_in(888)} 0 {hn(888)}
Gh_889 0 {Gh_out(889)} {Gh_in(889)} 0 {hn(889)}
Gh_890 0 {Gh_out(890)} {Gh_in(890)} 0 {hn(890)}
Gh_891 0 {Gh_out(891)} {Gh_in(891)} 0 {hn(891)}
Gh_892 0 {Gh_out(892)} {Gh_in(892)} 0 {hn(892)}
Gh_893 0 {Gh_out(893)} {Gh_in(893)} 0 {hn(893)}
Gh_894 0 {Gh_out(894)} {Gh_in(894)} 0 {hn(894)}
Gh_895 0 {Gh_out(895)} {Gh_in(895)} 0 {hn(895)}
Gh_896 0 {Gh_out(896)} {Gh_in(896)} 0 {hn(896)}
Gh_897 0 {Gh_out(897)} {Gh_in(897)} 0 {hn(897)}
Gh_898 0 {Gh_out(898)} {Gh_in(898)} 0 {hn(898)}
Gh_899 0 {Gh_out(899)} {Gh_in(899)} 0 {hn(899)}
Gh_900 0 {Gh_out(900)} {Gh_in(900)} 0 {hn(900)}
Gh_901 0 {Gh_out(901)} {Gh_in(901)} 0 {hn(901)}
Gh_902 0 {Gh_out(902)} {Gh_in(902)} 0 {hn(902)}
Gh_903 0 {Gh_out(903)} {Gh_in(903)} 0 {hn(903)}
Gh_904 0 {Gh_out(904)} {Gh_in(904)} 0 {hn(904)}
Gh_905 0 {Gh_out(905)} {Gh_in(905)} 0 {hn(905)}
Gh_906 0 {Gh_out(906)} {Gh_in(906)} 0 {hn(906)}
Gh_907 0 {Gh_out(907)} {Gh_in(907)} 0 {hn(907)}
Gh_908 0 {Gh_out(908)} {Gh_in(908)} 0 {hn(908)}
Gh_909 0 {Gh_out(909)} {Gh_in(909)} 0 {hn(909)}
Gh_910 0 {Gh_out(910)} {Gh_in(910)} 0 {hn(910)}
Gh_911 0 {Gh_out(911)} {Gh_in(911)} 0 {hn(911)}
Gh_912 0 {Gh_out(912)} {Gh_in(912)} 0 {hn(912)}
Gh_913 0 {Gh_out(913)} {Gh_in(913)} 0 {hn(913)}
Gh_914 0 {Gh_out(914)} {Gh_in(914)} 0 {hn(914)}
Gh_915 0 {Gh_out(915)} {Gh_in(915)} 0 {hn(915)}
Gh_916 0 {Gh_out(916)} {Gh_in(916)} 0 {hn(916)}
Gh_917 0 {Gh_out(917)} {Gh_in(917)} 0 {hn(917)}
Gh_918 0 {Gh_out(918)} {Gh_in(918)} 0 {hn(918)}
Gh_919 0 {Gh_out(919)} {Gh_in(919)} 0 {hn(919)}
Gh_920 0 {Gh_out(920)} {Gh_in(920)} 0 {hn(920)}
Gh_921 0 {Gh_out(921)} {Gh_in(921)} 0 {hn(921)}
Gh_922 0 {Gh_out(922)} {Gh_in(922)} 0 {hn(922)}
Gh_923 0 {Gh_out(923)} {Gh_in(923)} 0 {hn(923)}
Gh_924 0 {Gh_out(924)} {Gh_in(924)} 0 {hn(924)}
Gh_925 0 {Gh_out(925)} {Gh_in(925)} 0 {hn(925)}
Gh_926 0 {Gh_out(926)} {Gh_in(926)} 0 {hn(926)}
Gh_927 0 {Gh_out(927)} {Gh_in(927)} 0 {hn(927)}
Gh_928 0 {Gh_out(928)} {Gh_in(928)} 0 {hn(928)}
Gh_929 0 {Gh_out(929)} {Gh_in(929)} 0 {hn(929)}
Gh_930 0 {Gh_out(930)} {Gh_in(930)} 0 {hn(930)}
Gh_931 0 {Gh_out(931)} {Gh_in(931)} 0 {hn(931)}
Gh_932 0 {Gh_out(932)} {Gh_in(932)} 0 {hn(932)}
Gh_933 0 {Gh_out(933)} {Gh_in(933)} 0 {hn(933)}
Gh_934 0 {Gh_out(934)} {Gh_in(934)} 0 {hn(934)}
Gh_935 0 {Gh_out(935)} {Gh_in(935)} 0 {hn(935)}
Gh_936 0 {Gh_out(936)} {Gh_in(936)} 0 {hn(936)}
Gh_937 0 {Gh_out(937)} {Gh_in(937)} 0 {hn(937)}
Gh_938 0 {Gh_out(938)} {Gh_in(938)} 0 {hn(938)}
Gh_939 0 {Gh_out(939)} {Gh_in(939)} 0 {hn(939)}
Gh_940 0 {Gh_out(940)} {Gh_in(940)} 0 {hn(940)}
Gh_941 0 {Gh_out(941)} {Gh_in(941)} 0 {hn(941)}
Gh_942 0 {Gh_out(942)} {Gh_in(942)} 0 {hn(942)}
Gh_943 0 {Gh_out(943)} {Gh_in(943)} 0 {hn(943)}
Gh_944 0 {Gh_out(944)} {Gh_in(944)} 0 {hn(944)}
Gh_945 0 {Gh_out(945)} {Gh_in(945)} 0 {hn(945)}
Gh_946 0 {Gh_out(946)} {Gh_in(946)} 0 {hn(946)}
Gh_947 0 {Gh_out(947)} {Gh_in(947)} 0 {hn(947)}
Gh_948 0 {Gh_out(948)} {Gh_in(948)} 0 {hn(948)}
Gh_949 0 {Gh_out(949)} {Gh_in(949)} 0 {hn(949)}
Gh_950 0 {Gh_out(950)} {Gh_in(950)} 0 {hn(950)}
Gh_951 0 {Gh_out(951)} {Gh_in(951)} 0 {hn(951)}
Gh_952 0 {Gh_out(952)} {Gh_in(952)} 0 {hn(952)}
Gh_953 0 {Gh_out(953)} {Gh_in(953)} 0 {hn(953)}
Gh_954 0 {Gh_out(954)} {Gh_in(954)} 0 {hn(954)}
Gh_955 0 {Gh_out(955)} {Gh_in(955)} 0 {hn(955)}
Gh_956 0 {Gh_out(956)} {Gh_in(956)} 0 {hn(956)}
Gh_957 0 {Gh_out(957)} {Gh_in(957)} 0 {hn(957)}
Gh_958 0 {Gh_out(958)} {Gh_in(958)} 0 {hn(958)}
Gh_959 0 {Gh_out(959)} {Gh_in(959)} 0 {hn(959)}
Gh_960 0 {Gh_out(960)} {Gh_in(960)} 0 {hn(960)}
Gh_961 0 {Gh_out(961)} {Gh_in(961)} 0 {hn(961)}
Gh_962 0 {Gh_out(962)} {Gh_in(962)} 0 {hn(962)}
Gh_963 0 {Gh_out(963)} {Gh_in(963)} 0 {hn(963)}
Gh_964 0 {Gh_out(964)} {Gh_in(964)} 0 {hn(964)}
Gh_965 0 {Gh_out(965)} {Gh_in(965)} 0 {hn(965)}
Gh_966 0 {Gh_out(966)} {Gh_in(966)} 0 {hn(966)}
Gh_967 0 {Gh_out(967)} {Gh_in(967)} 0 {hn(967)}
Gh_968 0 {Gh_out(968)} {Gh_in(968)} 0 {hn(968)}
Gh_969 0 {Gh_out(969)} {Gh_in(969)} 0 {hn(969)}
Gh_970 0 {Gh_out(970)} {Gh_in(970)} 0 {hn(970)}
Gh_971 0 {Gh_out(971)} {Gh_in(971)} 0 {hn(971)}
Gh_972 0 {Gh_out(972)} {Gh_in(972)} 0 {hn(972)}
Gh_973 0 {Gh_out(973)} {Gh_in(973)} 0 {hn(973)}
Gh_974 0 {Gh_out(974)} {Gh_in(974)} 0 {hn(974)}
Gh_975 0 {Gh_out(975)} {Gh_in(975)} 0 {hn(975)}
Gh_976 0 {Gh_out(976)} {Gh_in(976)} 0 {hn(976)}
Gh_977 0 {Gh_out(977)} {Gh_in(977)} 0 {hn(977)}
Gh_978 0 {Gh_out(978)} {Gh_in(978)} 0 {hn(978)}
Gh_979 0 {Gh_out(979)} {Gh_in(979)} 0 {hn(979)}
Gh_980 0 {Gh_out(980)} {Gh_in(980)} 0 {hn(980)}
Gh_981 0 {Gh_out(981)} {Gh_in(981)} 0 {hn(981)}
Gh_982 0 {Gh_out(982)} {Gh_in(982)} 0 {hn(982)}
Gh_983 0 {Gh_out(983)} {Gh_in(983)} 0 {hn(983)}
Gh_984 0 {Gh_out(984)} {Gh_in(984)} 0 {hn(984)}
Gh_985 0 {Gh_out(985)} {Gh_in(985)} 0 {hn(985)}
Gh_986 0 {Gh_out(986)} {Gh_in(986)} 0 {hn(986)}
Gh_987 0 {Gh_out(987)} {Gh_in(987)} 0 {hn(987)}
Gh_988 0 {Gh_out(988)} {Gh_in(988)} 0 {hn(988)}
Gh_989 0 {Gh_out(989)} {Gh_in(989)} 0 {hn(989)}
Gh_990 0 {Gh_out(990)} {Gh_in(990)} 0 {hn(990)}
Gh_991 0 {Gh_out(991)} {Gh_in(991)} 0 {hn(991)}
Gh_992 0 {Gh_out(992)} {Gh_in(992)} 0 {hn(992)}
Gh_993 0 {Gh_out(993)} {Gh_in(993)} 0 {hn(993)}
Gh_994 0 {Gh_out(994)} {Gh_in(994)} 0 {hn(994)}
Gh_995 0 {Gh_out(995)} {Gh_in(995)} 0 {hn(995)}
Gh_996 0 {Gh_out(996)} {Gh_in(996)} 0 {hn(996)}
Gh_997 0 {Gh_out(997)} {Gh_in(997)} 0 {hn(997)}
Gh_998 0 {Gh_out(998)} {Gh_in(998)} 0 {hn(998)}
Gh_999 0 {Gh_out(999)} {Gh_in(999)} 0 {hn(999)}
Gh_1000 0 {Gh_out(1000)} {Gh_in(1000)} 0 {hn(1000)}
Gh_1001 0 {Gh_out(1001)} {Gh_in(1001)} 0 {hn(1001)}
Gh_1002 0 {Gh_out(1002)} {Gh_in(1002)} 0 {hn(1002)}
Gh_1003 0 {Gh_out(1003)} {Gh_in(1003)} 0 {hn(1003)}
Gh_1004 0 {Gh_out(1004)} {Gh_in(1004)} 0 {hn(1004)}
Gh_1005 0 {Gh_out(1005)} {Gh_in(1005)} 0 {hn(1005)}
Gh_1006 0 {Gh_out(1006)} {Gh_in(1006)} 0 {hn(1006)}
Gh_1007 0 {Gh_out(1007)} {Gh_in(1007)} 0 {hn(1007)}
Gh_1008 0 {Gh_out(1008)} {Gh_in(1008)} 0 {hn(1008)}
Gh_1009 0 {Gh_out(1009)} {Gh_in(1009)} 0 {hn(1009)}
Gh_1010 0 {Gh_out(1010)} {Gh_in(1010)} 0 {hn(1010)}
Gh_1011 0 {Gh_out(1011)} {Gh_in(1011)} 0 {hn(1011)}
Gh_1012 0 {Gh_out(1012)} {Gh_in(1012)} 0 {hn(1012)}
Gh_1013 0 {Gh_out(1013)} {Gh_in(1013)} 0 {hn(1013)}
Gh_1014 0 {Gh_out(1014)} {Gh_in(1014)} 0 {hn(1014)}
Gh_1015 0 {Gh_out(1015)} {Gh_in(1015)} 0 {hn(1015)}
Gh_1016 0 {Gh_out(1016)} {Gh_in(1016)} 0 {hn(1016)}
Gh_1017 0 {Gh_out(1017)} {Gh_in(1017)} 0 {hn(1017)}
Gh_1018 0 {Gh_out(1018)} {Gh_in(1018)} 0 {hn(1018)}
Gh_1019 0 {Gh_out(1019)} {Gh_in(1019)} 0 {hn(1019)}
Gh_1020 0 {Gh_out(1020)} {Gh_in(1020)} 0 {hn(1020)}
Gh_1021 0 {Gh_out(1021)} {Gh_in(1021)} 0 {hn(1021)}
Gh_1022 0 {Gh_out(1022)} {Gh_in(1022)} 0 {hn(1022)}
Gh_1023 0 {Gh_out(1023)} {Gh_in(1023)} 0 {hn(1023)}
Gh_1024 0 {Gh_out(1024)} {Gh_in(1024)} 0 {hn(1024)}
*** column of delay lines
Ox2 2.2 0 0 2.3 Zm-1
Ox3 {3.2*(sqrtM==1|sqrtM>=3)} 0 {3.3*(sqrtM==1|sqrtM>=3)} 0 Zm-2
Ox4 {4.2*(sqrtM==1|sqrtM>=4)} 0 0 {4.3*(sqrtM==1|sqrtM>=4)} Zm-3
Ox5 {5.2*(sqrtM==1|sqrtM>=5)} 0 {5.3*(sqrtM==1|sqrtM>=5)} 0 Zm-4
Ox6 {6.2*(sqrtM==1|sqrtM>=6)} 0 0 {6.3*(sqrtM==1|sqrtM>=6)} Zm-5
Ox7 {7.2*(sqrtM==1|sqrtM>=7)} 0 {7.3*(sqrtM==1|sqrtM>=7)} 0 Zm-6
Ox8 {8.2*(sqrtM==1|sqrtM>=8)} 0 0 {8.3*(sqrtM==1|sqrtM>=8)} Zm-7
Ox9 {9.2*(sqrtM==1|sqrtM>=9)} 0 {9.3*(sqrtM==1|sqrtM>=9)} 0 Zm-8
Ox10 {10.2*(sqrtM==1|sqrtM>=10)} 0 0 {10.3*(sqrtM==1|sqrtM>=10)} Zm-9
Ox11 {11.2*(sqrtM==1|sqrtM>=11)} 0 {11.3*(sqrtM==1|sqrtM>=11)} 0 Zm-10
Ox12 {12.2*(sqrtM==1|sqrtM>=12)} 0 0 {12.3*(sqrtM==1|sqrtM>=12)} Zm-11
Ox13 {13.2*(sqrtM==1|sqrtM>=13)} 0 {13.3*(sqrtM==1|sqrtM>=13)} 0 Zm-12
Ox14 {14.2*(sqrtM==1|sqrtM>=14)} 0 0 {14.3*(sqrtM==1|sqrtM>=14)} Zm-13
Ox15 {15.2*(sqrtM==1|sqrtM>=15)} 0 {15.3*(sqrtM==1|sqrtM>=15)} 0 Zm-14
Ox16 {16.2*(sqrtM==1|sqrtM>=16)} 0 0 {16.3*(sqrtM==1|sqrtM>=16)} Zm-15
Ox17 {17.2*(sqrtM==1|sqrtM>=17)} 0 {17.3*(sqrtM==1|sqrtM>=17)} 0 Zm-16
Ox18 {18.2*(sqrtM==1|sqrtM>=18)} 0 0 {18.3*(sqrtM==1|sqrtM>=18)} Zm-17
Ox19 {19.2*(sqrtM==1|sqrtM>=19)} 0 {19.3*(sqrtM==1|sqrtM>=19)} 0 Zm-18
Ox20 {20.2*(sqrtM==1|sqrtM>=20)} 0 0 {20.3*(sqrtM==1|sqrtM>=20)} Zm-19
Ox21 {21.2*(sqrtM==1|sqrtM>=21)} 0 {21.3*(sqrtM==1|sqrtM>=21)} 0 Zm-20
Ox22 {22.2*(sqrtM==1|sqrtM>=22)} 0 0 {22.3*(sqrtM==1|sqrtM>=22)} Zm-21
Ox23 {23.2*(sqrtM==1|sqrtM>=23)} 0 {23.3*(sqrtM==1|sqrtM>=23)} 0 Zm-22
Ox24 {24.2*(sqrtM==1|sqrtM>=24)} 0 0 {24.3*(sqrtM==1|sqrtM>=24)} Zm-23
Ox25 {25.2*(sqrtM==1|sqrtM>=25)} 0 {25.3*(sqrtM==1|sqrtM>=25)} 0 Zm-24
Ox26 {26.2*(sqrtM==1|sqrtM>=26)} 0 0 {26.3*(sqrtM==1|sqrtM>=26)} Zm-25
Ox27 {27.2*(sqrtM==1|sqrtM>=27)} 0 {27.3*(sqrtM==1|sqrtM>=27)} 0 Zm-26
Ox28 {28.2*(sqrtM==1|sqrtM>=28)} 0 0 {28.3*(sqrtM==1|sqrtM>=28)} Zm-27
Ox29 {29.2*(sqrtM==1|sqrtM>=29)} 0 {29.3*(sqrtM==1|sqrtM>=29)} 0 Zm-28
Ox30 {30.2*(sqrtM==1|sqrtM>=30)} 0 0 {30.3*(sqrtM==1|sqrtM>=30)} Zm-29
Ox31 {31.2*(sqrtM==1|sqrtM>=31)} 0 {31.3*(sqrtM==1|sqrtM>=31)} 0 Zm-30
Ox32 {32.2*(sqrtM==1|sqrtM>=32)} 0 0 {32.3*(sqrtM==1|sqrtM>=32)} Zm-31
*** load resistances for the tlines making the rows
RTx2 0 2.3 1
RTx3 0 {3.3*(sqrtM==1|sqrtM>=3)} 1
RTx4 0 {4.3*(sqrtM==1|sqrtM>=4)} 1
RTx5 0 {5.3*(sqrtM==1|sqrtM>=5)} 1
RTx6 0 {6.3*(sqrtM==1|sqrtM>=6)} 1
RTx7 0 {7.3*(sqrtM==1|sqrtM>=7)} 1
RTx8 0 {8.3*(sqrtM==1|sqrtM>=8)} 1
RTx9 0 {9.3*(sqrtM==1|sqrtM>=9)} 1
RTx10 0 {10.3*(sqrtM==1|sqrtM>=10)} 1
RTx11 0 {11.3*(sqrtM==1|sqrtM>=11)} 1
RTx12 0 {12.3*(sqrtM==1|sqrtM>=12)} 1
RTx13 0 {13.3*(sqrtM==1|sqrtM>=13)} 1
RTx14 0 {14.3*(sqrtM==1|sqrtM>=14)} 1
RTx15 0 {15.3*(sqrtM==1|sqrtM>=15)} 1
RTx16 0 {16.3*(sqrtM==1|sqrtM>=16)} 1
RTx17 0 {17.3*(sqrtM==1|sqrtM>=17)} 1
RTx18 0 {18.3*(sqrtM==1|sqrtM>=18)} 1
RTx19 0 {19.3*(sqrtM==1|sqrtM>=19)} 1
RTx20 0 {20.3*(sqrtM==1|sqrtM>=20)} 1
RTx21 0 {21.3*(sqrtM==1|sqrtM>=21)} 1
RTx22 0 {22.3*(sqrtM==1|sqrtM>=22)} 1
RTx23 0 {23.3*(sqrtM==1|sqrtM>=23)} 1
RTx24 0 {24.3*(sqrtM==1|sqrtM>=24)} 1
RTx25 0 {25.3*(sqrtM==1|sqrtM>=25)} 1
RTx26 0 {26.3*(sqrtM==1|sqrtM>=26)} 1
RTx27 0 {27.3*(sqrtM==1|sqrtM>=27)} 1
RTx28 0 {28.3*(sqrtM==1|sqrtM>=28)} 1
RTx29 0 {29.3*(sqrtM==1|sqrtM>=29)} 1
RTx30 0 {30.3*(sqrtM==1|sqrtM>=30)} 1
RTx31 0 {31.3*(sqrtM==1|sqrtM>=31)} 1
RTx32 0 {32.3*(sqrtM==1|sqrtM>=32)} 1
*** summers for the rows of delays
Gx1 0 1.1 1.2 2.3 1
Gx3 0 {Gx_out(3)} {Gx_in(3.3,3)} {Gx_in(4.3,4)} 1
Gx5 0 {Gx_out(5)} {Gx_in(5.3,5)} {Gx_in(6.3,6)} 1
Gx7 0 {Gx_out(7)} {Gx_in(7.3,7)} {Gx_in(8.3,8)} 1
Gx9 0 {Gx_out(9)} {Gx_in(9.3,9)} {Gx_in(10.3,10)} 1
Gx11 0 {Gx_out(11)} {Gx_in(11.3,11)} {Gx_in(12.3,12)} 1
Gx13 0 {Gx_out(13)} {Gx_in(13.3,13)} {Gx_in(14.3,14)} 1
Gx15 0 {Gx_out(15)} {Gx_in(15.3,15)} {Gx_in(16.3,16)} 1
Gx17 0 {Gx_out(17)} {Gx_in(17.3,17)} {Gx_in(18.3,18)} 1
Gx19 0 {Gx_out(19)} {Gx_in(19.3,19)} {Gx_in(20.3,20)} 1
Gx21 0 {Gx_out(21)} {Gx_in(21.3,21)} {Gx_in(22.3,22)} 1
Gx23 0 {Gx_out(23)} {Gx_in(23.3,23)} {Gx_in(24.3,24)} 1
Gx25 0 {Gx_out(25)} {Gx_in(25.3,25)} {Gx_in(26.3,26)} 1
Gx27 0 {Gx_out(27)} {Gx_in(27.3,27)} {Gx_in(28.3,28)} 1
Gx29 0 {Gx_out(29)} {Gx_in(29.3,29)} {Gx_in(30.3,30)} 1
Gx31 0 {Gx_out(31)} {Gx_in(31.3,31)} {Gx_in(32.3,32)} 1
*** testing area
VM 0.1 0 {M} AC {10**(M/20)} {M}
.param simM=M/sim hnGain=1/Gain/sqrtM**(Func==1&inv(Norm))
Bw 0.2 0 v=weights(round(time*simM))
Bcoef 0.3 0 v=hn(round(time*simM))*hnGain
.ends FIRx
****************************************
*
*       FIR2 - heavier formulas
*
****************************************
*
* Parameters: nT, Func, SH, Fact, f0, fc, BWp, BWs, G, As, N
*   (optional: sim, tr, td, ref)
* Supports: LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
* [NOTES]
*
* - The gain is normalized only for the differentiator: 0dB@BWp.
* - Gaussian pulse-shaping (Func=2) is not available.
* - It's a fork of FIR having the computational-heavy formulas with all the
* possible combinations of {Func}. For now, Dolph-Chebyshev.
*
****************************************
.subckt FIR2 IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sigma=0.5 nT=0
+ Func=1 sim=1 SH=1 Norm=1
+ f0=5k fp1=500 fs1=400 fp2=2k fs2=2.5k
+ G=1 As=60 N=33
+ tr=1m/absf0 td=0 ref=0.5
*** preliminary calculations
.param BWp=if(fp2==0,fp1,fp2-fp1) BWs=if(fp2==0,fs1,fs2-fs1) fc=if(fp2==0,0,(fp1+fp2)/2)
+ wtw1=2*pi*abs(BWs-BWp)/(1+u(fc))/absf0 Type=1+mod(M,2)+2*(Func>4)
+ wc1=2*pi*abs(fc-(BWs+BWp)/(2+2*u(fc)))/absf0 wc2=u(fc)*2*pi*(fc+(BWs+BWp)/4)/absf0
+ Order=ceil(if(As>=21, (As-7.95)/2.285, 5.79)/wtw1) M=if(N>0, N-1, if(Func>1 & Func<5, nT*OS, Order))
+ case=if(fc==0, inv(BWp==BWs)+(BWp>BWs), 3+(BWp<BWs))
*** special parameters and functions
.param OS=round(absf0/(BWs+BWp)) beta=(BWs-BWp)/(BWs+BWp)
+ impulse0=table(case,0,0,1,wc1/pi,2,1-wc1/pi,3,1-(wc2-wc1)/pi,4,(wc2-wc1)/pi)
.func mod(x,y) {x-int(x/y)*y}
.func Gh_out(x) {(mod(x,sqrtM)+1.2)*(x<=M)}
.func Gh_in_row(x) {if(x<sqrtM,667,if(x==M,floorM,mod(int(x/sqrtM),ceilM)))*(x<=M)}
.func Gh_in(x) {if(x==M,floorM,mod(int(x/sqrtM),ceilM))*(x<=M)}
.func Tz_IO(x,y) {x*(y<=floorM)}
.func Tx_IO(x,y) {x*(sqrtM==1|sqrtM>=y)}
.func Gx_out(x) {1.1*(sqrtM>=x)}
.func Gx_in(x,y) {x*(sqrtM>=y)}
.param sqrtM=ceil(M**0.5) absf0=abs(f0) floorM=int(M/sqrtM) ceilM=ceil(M/sqrtM) tz1=sqrtM/absf0 tz2=1/absf0
*** ideal impulse response
.func Impulse(x) {if(x==M/2, impulse0, (-1)**case*(sin(wc2*(x-M/2))-sin(wc1*(x-M/2)))/(pi*(x-M/2)))*sqrtM}
*** type III and IV choices
.func differentiator(x) {if(x==0^x==M/2^x==M, 0, wc1*cos((x-M/2)*wc1)/pi/(x-M/2)-sin(wc1*(x-M/2))/pi/(x-M/2)**2)}
.func Hilbert(x) {if(mod(M,2), 1/pi/(x-M/2), if(x==M/2, 0, (1-cos(pi*(x-M/2)))/pi/(x-M/2)))}
*** pulse-shaping
.func raisedCos(x) {if(beta==0, impulse(x), if(x==M/2, 1, if(abs(x-(M+sgn(x-M/2+0.25)*OS/beta)/2)<1p,
+ beta/2*sin(pi/2/beta), sin(pi*(x-M/2)/OS)/(pi*(x-M/2)/OS)*
+ cos(pi*beta*(x-M/2)/OS)/(1-4*(beta*(x-M/2)/OS)**2) )))}
.func sqrtRaisedCos(x) {if(beta==0, impulse(x), if( x==M/2, 1-beta+4*beta/pi,
+ if( abs(x-M/2-sgn(x-M/2+0.5)*OS/4/beta)<1p,
+ beta/sqrt(2)*((1+2/pi)*sin(pi/4/beta)+(1-2/pi)*cos(pi/4/beta)),
+ (sin(pi*(x-M/2)/OS*(1-beta))+4*beta*(x-M/2)/OS*cos(pi*(x-M/2)/OS*(1+beta)))/
+ (pi*(x-M/2)/OS*(1-(4*beta*(x-M/2)/OS)**2)) )))}
*** Dolph-Chebyshev window
.func Tm(x) {if(abs(x)<=1, cos(M*acos(x)), cosh(M*acosh(x)))}
.func Cm(x,y) {if( x>M/2, 0, Tm(cosh(acosh(10**(As/20))/M)*cos(x*pi/(M+1)))*cos(2*x*pi*(y-M/2)/(M+1)) )}
.func SumC(x) {Cm(1,x)+Cm(2,x)+Cm(3,x)+Cm(4,x)+Cm(5,x)+Cm(6,x)+Cm(7,x)+Cm(8,x)+Cm(9,x)+Cm(10,x)+
+ Cm(11,x)+Cm(12,x)+Cm(13,x)+Cm(14,x)+Cm(15,x)+Cm(16,x)+Cm(17,x)+Cm(18,x)+Cm(19,x)+Cm(20,x)+
+ Cm(21,x)+Cm(22,x)+Cm(23,x)+Cm(24,x)+Cm(25,x)+Cm(26,x)+Cm(27,x)+Cm(28,x)+Cm(29,x)+Cm(30,x)+
+ Cm(31,x)+Cm(32,x)+Cm(33,x)+Cm(34,x)+Cm(35,x)+Cm(36,x)+Cm(37,x)+Cm(38,x)+Cm(39,x)+Cm(40,x)+
+ Cm(41,x)+Cm(42,x)+Cm(43,x)+Cm(44,x)+Cm(45,x)+Cm(46,x)+Cm(47,x)+Cm(48,x)+Cm(49,x)+Cm(50,x)+
+ Cm(51,x)+Cm(52,x)+Cm(53,x)+Cm(54,x)+Cm(55,x)+Cm(56,x)+Cm(57,x)+Cm(58,x)+Cm(59,x)+Cm(60,x)+
+ Cm(61,x)+Cm(62,x)+Cm(63,x)+Cm(64,x)+Cm(65,x)+Cm(66,x)+Cm(67,x)+Cm(68,x)+Cm(69,x)+Cm(70,x)+
+ Cm(71,x)+Cm(72,x)+Cm(73,x)+Cm(74,x)+Cm(75,x)+Cm(76,x)+Cm(77,x)+Cm(78,x)+Cm(79,x)+Cm(80,x)+
+ Cm(81,x)+Cm(82,x)+Cm(83,x)+Cm(84,x)+Cm(85,x)+Cm(86,x)+Cm(87,x)+Cm(88,x)+Cm(89,x)+Cm(90,x)+
+ Cm(91,x)+Cm(92,x)+Cm(93,x)+Cm(94,x)+Cm(95,x)+Cm(96,x)+Cm(97,x)+Cm(98,x)+Cm(99,x)+Cm(100,x)+
+ Cm(101,x)+Cm(102,x)+Cm(103,x)+Cm(104,x)+Cm(105,x)+Cm(106,x)+Cm(107,x)+Cm(108,x)+Cm(109,x)+Cm(110,x)+
+ Cm(111,x)+Cm(112,x)+Cm(113,x)+Cm(114,x)+Cm(115,x)+Cm(116,x)+Cm(117,x)+Cm(118,x)+Cm(119,x)+Cm(120,x)+
+ Cm(121,x)+Cm(122,x)+Cm(123,x)+Cm(124,x)+Cm(125,x)+Cm(126,x)+Cm(127,x)+Cm(128,x)}
.func cheb(x) {2/(M+1)*( 0.5+10**(-As/20)*SumC(x) )}
*** various choices/functions, in combination with the window
.func term(x) {table(Func,2,Impulse(x),3,raisedCos(x),4,sqrtRaisedCos(x), 5,differentiator(x),6,Hilbert(x))}
*** coefficients, h[n]
.func hn(x) {if( x>M, 0, cheb(x)*term(x) )}
*** gain normalization
.param Gain=(2*pi*BWp/absf0)**(Func==5)*cheb(M/2)
*** buffer input
Vbypass {inv(SH)*999} {inv(SH)*667}
Gin 0 999 in GROUND 2
Rin 999 0 1
*** S&H input
Ash {999*SH} 0 {0.4*SH} 0 0 0 {667*SH} 0 SAMPLEHOLD Rout=1 Vhigh=1G Vlow=-1G ref={ref}
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** intermediary stage
Rinter {floorM} 0 1
*** output stage
Rout 0 1.1 1
Gexit GROUND out 1.1 0 {G/Gain/sqrtM**(Func==1)}
Rexit out GROUND 1
*** row of delay lines
Tz1 667 0 1 0 Td={tz1} Z0=1
Tz2 {1*(2<=floorM)} 0 {2*(2<=floorM)} 0 Td={tz1} Z0=1
Tz3 {2*(3<=floorM)} 0 {3*(3<=floorM)} 0 Td={tz1} Z0=1
Tz4 {3*(4<=floorM)} 0 {4*(4<=floorM)} 0 Td={tz1} Z0=1
Tz5 {4*(5<=floorM)} 0 {5*(5<=floorM)} 0 Td={tz1} Z0=1
Tz6 {5*(6<=floorM)} 0 {6*(6<=floorM)} 0 Td={tz1} Z0=1
Tz7 {6*(7<=floorM)} 0 {7*(7<=floorM)} 0 Td={tz1} Z0=1
Tz8 {7*(8<=floorM)} 0 {8*(8<=floorM)} 0 Td={tz1} Z0=1
Tz9 {8*(9<=floorM)} 0 {9*(9<=floorM)} 0 Td={tz1} Z0=1
Tz10 {9*(10<=floorM)} 0 {10*(10<=floorM)} 0 Td={tz1} Z0=1
Tz11 {10*(11<=floorM)} 0 {11*(11<=floorM)} 0 Td={tz1} Z0=1
Tz12 {11*(12<=floorM)} 0 {12*(12<=floorM)} 0 Td={tz1} Z0=1
Tz13 {12*(13<=floorM)} 0 {13*(13<=floorM)} 0 Td={tz1} Z0=1
Tz14 {13*(14<=floorM)} 0 {14*(14<=floorM)} 0 Td={tz1} Z0=1
Tz15 {14*(15<=floorM)} 0 {15*(15<=floorM)} 0 Td={tz1} Z0=1
Tz16 {15*(16<=floorM)} 0 {16*(16<=floorM)} 0 Td={tz1} Z0=1
*** h[n], all in sequential order, active until {M}, the rest - disabled
*** first one is always active
RGh 0 1.2 1
Gh_0 0 1.2 667 0 {hn(0)}
*** there can be maximum 32 multipliers/column with input node 667;
*** these take care of it
Gh_1 0 {Gh_out(1)} {Gh_in_row(1)} 0 {hn(1)}
Gh_2 0 {Gh_out(2)} {Gh_in_row(2)} 0 {hn(2)}
Gh_3 0 {Gh_out(3)} {Gh_in_row(3)} 0 {hn(3)}
Gh_4 0 {Gh_out(4)} {Gh_in_row(4)} 0 {hn(4)}
Gh_5 0 {Gh_out(5)} {Gh_in_row(5)} 0 {hn(5)}
Gh_6 0 {Gh_out(6)} {Gh_in_row(6)} 0 {hn(6)}
Gh_7 0 {Gh_out(7)} {Gh_in_row(7)} 0 {hn(7)}
Gh_8 0 {Gh_out(8)} {Gh_in_row(8)} 0 {hn(8)}
Gh_9 0 {Gh_out(9)} {Gh_in_row(9)} 0 {hn(9)}
Gh_10 0 {Gh_out(10)} {Gh_in_row(10)} 0 {hn(10)}
Gh_11 0 {Gh_out(11)} {Gh_in_row(11)} 0 {hn(11)}
Gh_12 0 {Gh_out(12)} {Gh_in_row(12)} 0 {hn(12)}
Gh_13 0 {Gh_out(13)} {Gh_in_row(13)} 0 {hn(13)}
Gh_14 0 {Gh_out(14)} {Gh_in_row(14)} 0 {hn(14)}
Gh_15 0 {Gh_out(15)} {Gh_in_row(15)} 0 {hn(15)}
Gh_16 0 {Gh_out(16)} {Gh_in_row(16)} 0 {hn(16)}
*** the rest of the array's 'coefficients'
Gh_17 0 {Gh_out(17)} {Gh_in(17)} 0 {hn(17)}
Gh_18 0 {Gh_out(18)} {Gh_in(18)} 0 {hn(18)}
Gh_19 0 {Gh_out(19)} {Gh_in(19)} 0 {hn(19)}
Gh_20 0 {Gh_out(20)} {Gh_in(20)} 0 {hn(20)}
Gh_21 0 {Gh_out(21)} {Gh_in(21)} 0 {hn(21)}
Gh_22 0 {Gh_out(22)} {Gh_in(22)} 0 {hn(22)}
Gh_23 0 {Gh_out(23)} {Gh_in(23)} 0 {hn(23)}
Gh_24 0 {Gh_out(24)} {Gh_in(24)} 0 {hn(24)}
Gh_25 0 {Gh_out(25)} {Gh_in(25)} 0 {hn(25)}
Gh_26 0 {Gh_out(26)} {Gh_in(26)} 0 {hn(26)}
Gh_27 0 {Gh_out(27)} {Gh_in(27)} 0 {hn(27)}
Gh_28 0 {Gh_out(28)} {Gh_in(28)} 0 {hn(28)}
Gh_29 0 {Gh_out(29)} {Gh_in(29)} 0 {hn(29)}
Gh_30 0 {Gh_out(30)} {Gh_in(30)} 0 {hn(30)}
Gh_31 0 {Gh_out(31)} {Gh_in(31)} 0 {hn(31)}
Gh_32 0 {Gh_out(32)} {Gh_in(32)} 0 {hn(32)}
Gh_33 0 {Gh_out(33)} {Gh_in(33)} 0 {hn(33)}
Gh_34 0 {Gh_out(34)} {Gh_in(34)} 0 {hn(34)}
Gh_35 0 {Gh_out(35)} {Gh_in(35)} 0 {hn(35)}
Gh_36 0 {Gh_out(36)} {Gh_in(36)} 0 {hn(36)}
Gh_37 0 {Gh_out(37)} {Gh_in(37)} 0 {hn(37)}
Gh_38 0 {Gh_out(38)} {Gh_in(38)} 0 {hn(38)}
Gh_39 0 {Gh_out(39)} {Gh_in(39)} 0 {hn(39)}
Gh_40 0 {Gh_out(40)} {Gh_in(40)} 0 {hn(40)}
Gh_41 0 {Gh_out(41)} {Gh_in(41)} 0 {hn(41)}
Gh_42 0 {Gh_out(42)} {Gh_in(42)} 0 {hn(42)}
Gh_43 0 {Gh_out(43)} {Gh_in(43)} 0 {hn(43)}
Gh_44 0 {Gh_out(44)} {Gh_in(44)} 0 {hn(44)}
Gh_45 0 {Gh_out(45)} {Gh_in(45)} 0 {hn(45)}
Gh_46 0 {Gh_out(46)} {Gh_in(46)} 0 {hn(46)}
Gh_47 0 {Gh_out(47)} {Gh_in(47)} 0 {hn(47)}
Gh_48 0 {Gh_out(48)} {Gh_in(48)} 0 {hn(48)}
Gh_49 0 {Gh_out(49)} {Gh_in(49)} 0 {hn(49)}
Gh_50 0 {Gh_out(50)} {Gh_in(50)} 0 {hn(50)}
Gh_51 0 {Gh_out(51)} {Gh_in(51)} 0 {hn(51)}
Gh_52 0 {Gh_out(52)} {Gh_in(52)} 0 {hn(52)}
Gh_53 0 {Gh_out(53)} {Gh_in(53)} 0 {hn(53)}
Gh_54 0 {Gh_out(54)} {Gh_in(54)} 0 {hn(54)}
Gh_55 0 {Gh_out(55)} {Gh_in(55)} 0 {hn(55)}
Gh_56 0 {Gh_out(56)} {Gh_in(56)} 0 {hn(56)}
Gh_57 0 {Gh_out(57)} {Gh_in(57)} 0 {hn(57)}
Gh_58 0 {Gh_out(58)} {Gh_in(58)} 0 {hn(58)}
Gh_59 0 {Gh_out(59)} {Gh_in(59)} 0 {hn(59)}
Gh_60 0 {Gh_out(60)} {Gh_in(60)} 0 {hn(60)}
Gh_61 0 {Gh_out(61)} {Gh_in(61)} 0 {hn(61)}
Gh_62 0 {Gh_out(62)} {Gh_in(62)} 0 {hn(62)}
Gh_63 0 {Gh_out(63)} {Gh_in(63)} 0 {hn(63)}
Gh_64 0 {Gh_out(64)} {Gh_in(64)} 0 {hn(64)}
Gh_65 0 {Gh_out(65)} {Gh_in(65)} 0 {hn(65)}
Gh_66 0 {Gh_out(66)} {Gh_in(66)} 0 {hn(66)}
Gh_67 0 {Gh_out(67)} {Gh_in(67)} 0 {hn(67)}
Gh_68 0 {Gh_out(68)} {Gh_in(68)} 0 {hn(68)}
Gh_69 0 {Gh_out(69)} {Gh_in(69)} 0 {hn(69)}
Gh_70 0 {Gh_out(70)} {Gh_in(70)} 0 {hn(70)}
Gh_71 0 {Gh_out(71)} {Gh_in(71)} 0 {hn(71)}
Gh_72 0 {Gh_out(72)} {Gh_in(72)} 0 {hn(72)}
Gh_73 0 {Gh_out(73)} {Gh_in(73)} 0 {hn(73)}
Gh_74 0 {Gh_out(74)} {Gh_in(74)} 0 {hn(74)}
Gh_75 0 {Gh_out(75)} {Gh_in(75)} 0 {hn(75)}
Gh_76 0 {Gh_out(76)} {Gh_in(76)} 0 {hn(76)}
Gh_77 0 {Gh_out(77)} {Gh_in(77)} 0 {hn(77)}
Gh_78 0 {Gh_out(78)} {Gh_in(78)} 0 {hn(78)}
Gh_79 0 {Gh_out(79)} {Gh_in(79)} 0 {hn(79)}
Gh_80 0 {Gh_out(80)} {Gh_in(80)} 0 {hn(80)}
Gh_81 0 {Gh_out(81)} {Gh_in(81)} 0 {hn(81)}
Gh_82 0 {Gh_out(82)} {Gh_in(82)} 0 {hn(82)}
Gh_83 0 {Gh_out(83)} {Gh_in(83)} 0 {hn(83)}
Gh_84 0 {Gh_out(84)} {Gh_in(84)} 0 {hn(84)}
Gh_85 0 {Gh_out(85)} {Gh_in(85)} 0 {hn(85)}
Gh_86 0 {Gh_out(86)} {Gh_in(86)} 0 {hn(86)}
Gh_87 0 {Gh_out(87)} {Gh_in(87)} 0 {hn(87)}
Gh_88 0 {Gh_out(88)} {Gh_in(88)} 0 {hn(88)}
Gh_89 0 {Gh_out(89)} {Gh_in(89)} 0 {hn(89)}
Gh_90 0 {Gh_out(90)} {Gh_in(90)} 0 {hn(90)}
Gh_91 0 {Gh_out(91)} {Gh_in(91)} 0 {hn(91)}
Gh_92 0 {Gh_out(92)} {Gh_in(92)} 0 {hn(92)}
Gh_93 0 {Gh_out(93)} {Gh_in(93)} 0 {hn(93)}
Gh_94 0 {Gh_out(94)} {Gh_in(94)} 0 {hn(94)}
Gh_95 0 {Gh_out(95)} {Gh_in(95)} 0 {hn(95)}
Gh_96 0 {Gh_out(96)} {Gh_in(96)} 0 {hn(96)}
Gh_97 0 {Gh_out(97)} {Gh_in(97)} 0 {hn(97)}
Gh_98 0 {Gh_out(98)} {Gh_in(98)} 0 {hn(98)}
Gh_99 0 {Gh_out(99)} {Gh_in(99)} 0 {hn(99)}
Gh_100 0 {Gh_out(100)} {Gh_in(100)} 0 {hn(100)}
Gh_101 0 {Gh_out(101)} {Gh_in(101)} 0 {hn(101)}
Gh_102 0 {Gh_out(102)} {Gh_in(102)} 0 {hn(102)}
Gh_103 0 {Gh_out(103)} {Gh_in(103)} 0 {hn(103)}
Gh_104 0 {Gh_out(104)} {Gh_in(104)} 0 {hn(104)}
Gh_105 0 {Gh_out(105)} {Gh_in(105)} 0 {hn(105)}
Gh_106 0 {Gh_out(106)} {Gh_in(106)} 0 {hn(106)}
Gh_107 0 {Gh_out(107)} {Gh_in(107)} 0 {hn(107)}
Gh_108 0 {Gh_out(108)} {Gh_in(108)} 0 {hn(108)}
Gh_109 0 {Gh_out(109)} {Gh_in(109)} 0 {hn(109)}
Gh_110 0 {Gh_out(110)} {Gh_in(110)} 0 {hn(110)}
Gh_111 0 {Gh_out(111)} {Gh_in(111)} 0 {hn(111)}
Gh_112 0 {Gh_out(112)} {Gh_in(112)} 0 {hn(112)}
Gh_113 0 {Gh_out(113)} {Gh_in(113)} 0 {hn(113)}
Gh_114 0 {Gh_out(114)} {Gh_in(114)} 0 {hn(114)}
Gh_115 0 {Gh_out(115)} {Gh_in(115)} 0 {hn(115)}
Gh_116 0 {Gh_out(116)} {Gh_in(116)} 0 {hn(116)}
Gh_117 0 {Gh_out(117)} {Gh_in(117)} 0 {hn(117)}
Gh_118 0 {Gh_out(118)} {Gh_in(118)} 0 {hn(118)}
Gh_119 0 {Gh_out(119)} {Gh_in(119)} 0 {hn(119)}
Gh_120 0 {Gh_out(120)} {Gh_in(120)} 0 {hn(120)}
Gh_121 0 {Gh_out(121)} {Gh_in(121)} 0 {hn(121)}
Gh_122 0 {Gh_out(122)} {Gh_in(122)} 0 {hn(122)}
Gh_123 0 {Gh_out(123)} {Gh_in(123)} 0 {hn(123)}
Gh_124 0 {Gh_out(124)} {Gh_in(124)} 0 {hn(124)}
Gh_125 0 {Gh_out(125)} {Gh_in(125)} 0 {hn(125)}
Gh_126 0 {Gh_out(126)} {Gh_in(126)} 0 {hn(126)}
Gh_127 0 {Gh_out(127)} {Gh_in(127)} 0 {hn(127)}
Gh_128 0 {Gh_out(128)} {Gh_in(128)} 0 {hn(128)}
Gh_129 0 {Gh_out(129)} {Gh_in(129)} 0 {hn(129)}
Gh_130 0 {Gh_out(130)} {Gh_in(130)} 0 {hn(130)}
Gh_131 0 {Gh_out(131)} {Gh_in(131)} 0 {hn(131)}
Gh_132 0 {Gh_out(132)} {Gh_in(132)} 0 {hn(132)}
Gh_133 0 {Gh_out(133)} {Gh_in(133)} 0 {hn(133)}
Gh_134 0 {Gh_out(134)} {Gh_in(134)} 0 {hn(134)}
Gh_135 0 {Gh_out(135)} {Gh_in(135)} 0 {hn(135)}
Gh_136 0 {Gh_out(136)} {Gh_in(136)} 0 {hn(136)}
Gh_137 0 {Gh_out(137)} {Gh_in(137)} 0 {hn(137)}
Gh_138 0 {Gh_out(138)} {Gh_in(138)} 0 {hn(138)}
Gh_139 0 {Gh_out(139)} {Gh_in(139)} 0 {hn(139)}
Gh_140 0 {Gh_out(140)} {Gh_in(140)} 0 {hn(140)}
Gh_141 0 {Gh_out(141)} {Gh_in(141)} 0 {hn(141)}
Gh_142 0 {Gh_out(142)} {Gh_in(142)} 0 {hn(142)}
Gh_143 0 {Gh_out(143)} {Gh_in(143)} 0 {hn(143)}
Gh_144 0 {Gh_out(144)} {Gh_in(144)} 0 {hn(144)}
Gh_145 0 {Gh_out(145)} {Gh_in(145)} 0 {hn(145)}
Gh_146 0 {Gh_out(146)} {Gh_in(146)} 0 {hn(146)}
Gh_147 0 {Gh_out(147)} {Gh_in(147)} 0 {hn(147)}
Gh_148 0 {Gh_out(148)} {Gh_in(148)} 0 {hn(148)}
Gh_149 0 {Gh_out(149)} {Gh_in(149)} 0 {hn(149)}
Gh_150 0 {Gh_out(150)} {Gh_in(150)} 0 {hn(150)}
Gh_151 0 {Gh_out(151)} {Gh_in(151)} 0 {hn(151)}
Gh_152 0 {Gh_out(152)} {Gh_in(152)} 0 {hn(152)}
Gh_153 0 {Gh_out(153)} {Gh_in(153)} 0 {hn(153)}
Gh_154 0 {Gh_out(154)} {Gh_in(154)} 0 {hn(154)}
Gh_155 0 {Gh_out(155)} {Gh_in(155)} 0 {hn(155)}
Gh_156 0 {Gh_out(156)} {Gh_in(156)} 0 {hn(156)}
Gh_157 0 {Gh_out(157)} {Gh_in(157)} 0 {hn(157)}
Gh_158 0 {Gh_out(158)} {Gh_in(158)} 0 {hn(158)}
Gh_159 0 {Gh_out(159)} {Gh_in(159)} 0 {hn(159)}
Gh_160 0 {Gh_out(160)} {Gh_in(160)} 0 {hn(160)}
Gh_161 0 {Gh_out(161)} {Gh_in(161)} 0 {hn(161)}
Gh_162 0 {Gh_out(162)} {Gh_in(162)} 0 {hn(162)}
Gh_163 0 {Gh_out(163)} {Gh_in(163)} 0 {hn(163)}
Gh_164 0 {Gh_out(164)} {Gh_in(164)} 0 {hn(164)}
Gh_165 0 {Gh_out(165)} {Gh_in(165)} 0 {hn(165)}
Gh_166 0 {Gh_out(166)} {Gh_in(166)} 0 {hn(166)}
Gh_167 0 {Gh_out(167)} {Gh_in(167)} 0 {hn(167)}
Gh_168 0 {Gh_out(168)} {Gh_in(168)} 0 {hn(168)}
Gh_169 0 {Gh_out(169)} {Gh_in(169)} 0 {hn(169)}
Gh_170 0 {Gh_out(170)} {Gh_in(170)} 0 {hn(170)}
Gh_171 0 {Gh_out(171)} {Gh_in(171)} 0 {hn(171)}
Gh_172 0 {Gh_out(172)} {Gh_in(172)} 0 {hn(172)}
Gh_173 0 {Gh_out(173)} {Gh_in(173)} 0 {hn(173)}
Gh_174 0 {Gh_out(174)} {Gh_in(174)} 0 {hn(174)}
Gh_175 0 {Gh_out(175)} {Gh_in(175)} 0 {hn(175)}
Gh_176 0 {Gh_out(176)} {Gh_in(176)} 0 {hn(176)}
Gh_177 0 {Gh_out(177)} {Gh_in(177)} 0 {hn(177)}
Gh_178 0 {Gh_out(178)} {Gh_in(178)} 0 {hn(178)}
Gh_179 0 {Gh_out(179)} {Gh_in(179)} 0 {hn(179)}
Gh_180 0 {Gh_out(180)} {Gh_in(180)} 0 {hn(180)}
Gh_181 0 {Gh_out(181)} {Gh_in(181)} 0 {hn(181)}
Gh_182 0 {Gh_out(182)} {Gh_in(182)} 0 {hn(182)}
Gh_183 0 {Gh_out(183)} {Gh_in(183)} 0 {hn(183)}
Gh_184 0 {Gh_out(184)} {Gh_in(184)} 0 {hn(184)}
Gh_185 0 {Gh_out(185)} {Gh_in(185)} 0 {hn(185)}
Gh_186 0 {Gh_out(186)} {Gh_in(186)} 0 {hn(186)}
Gh_187 0 {Gh_out(187)} {Gh_in(187)} 0 {hn(187)}
Gh_188 0 {Gh_out(188)} {Gh_in(188)} 0 {hn(188)}
Gh_189 0 {Gh_out(189)} {Gh_in(189)} 0 {hn(189)}
Gh_190 0 {Gh_out(190)} {Gh_in(190)} 0 {hn(190)}
Gh_191 0 {Gh_out(191)} {Gh_in(191)} 0 {hn(191)}
Gh_192 0 {Gh_out(192)} {Gh_in(192)} 0 {hn(192)}
Gh_193 0 {Gh_out(193)} {Gh_in(193)} 0 {hn(193)}
Gh_194 0 {Gh_out(194)} {Gh_in(194)} 0 {hn(194)}
Gh_195 0 {Gh_out(195)} {Gh_in(195)} 0 {hn(195)}
Gh_196 0 {Gh_out(196)} {Gh_in(196)} 0 {hn(196)}
Gh_197 0 {Gh_out(197)} {Gh_in(197)} 0 {hn(197)}
Gh_198 0 {Gh_out(198)} {Gh_in(198)} 0 {hn(198)}
Gh_199 0 {Gh_out(199)} {Gh_in(199)} 0 {hn(199)}
Gh_200 0 {Gh_out(200)} {Gh_in(200)} 0 {hn(200)}
Gh_201 0 {Gh_out(201)} {Gh_in(201)} 0 {hn(201)}
Gh_202 0 {Gh_out(202)} {Gh_in(202)} 0 {hn(202)}
Gh_203 0 {Gh_out(203)} {Gh_in(203)} 0 {hn(203)}
Gh_204 0 {Gh_out(204)} {Gh_in(204)} 0 {hn(204)}
Gh_205 0 {Gh_out(205)} {Gh_in(205)} 0 {hn(205)}
Gh_206 0 {Gh_out(206)} {Gh_in(206)} 0 {hn(206)}
Gh_207 0 {Gh_out(207)} {Gh_in(207)} 0 {hn(207)}
Gh_208 0 {Gh_out(208)} {Gh_in(208)} 0 {hn(208)}
Gh_209 0 {Gh_out(209)} {Gh_in(209)} 0 {hn(209)}
Gh_210 0 {Gh_out(210)} {Gh_in(210)} 0 {hn(210)}
Gh_211 0 {Gh_out(211)} {Gh_in(211)} 0 {hn(211)}
Gh_212 0 {Gh_out(212)} {Gh_in(212)} 0 {hn(212)}
Gh_213 0 {Gh_out(213)} {Gh_in(213)} 0 {hn(213)}
Gh_214 0 {Gh_out(214)} {Gh_in(214)} 0 {hn(214)}
Gh_215 0 {Gh_out(215)} {Gh_in(215)} 0 {hn(215)}
Gh_216 0 {Gh_out(216)} {Gh_in(216)} 0 {hn(216)}
Gh_217 0 {Gh_out(217)} {Gh_in(217)} 0 {hn(217)}
Gh_218 0 {Gh_out(218)} {Gh_in(218)} 0 {hn(218)}
Gh_219 0 {Gh_out(219)} {Gh_in(219)} 0 {hn(219)}
Gh_220 0 {Gh_out(220)} {Gh_in(220)} 0 {hn(220)}
Gh_221 0 {Gh_out(221)} {Gh_in(221)} 0 {hn(221)}
Gh_222 0 {Gh_out(222)} {Gh_in(222)} 0 {hn(222)}
Gh_223 0 {Gh_out(223)} {Gh_in(223)} 0 {hn(223)}
Gh_224 0 {Gh_out(224)} {Gh_in(224)} 0 {hn(224)}
Gh_225 0 {Gh_out(225)} {Gh_in(225)} 0 {hn(225)}
Gh_226 0 {Gh_out(226)} {Gh_in(226)} 0 {hn(226)}
Gh_227 0 {Gh_out(227)} {Gh_in(227)} 0 {hn(227)}
Gh_228 0 {Gh_out(228)} {Gh_in(228)} 0 {hn(228)}
Gh_229 0 {Gh_out(229)} {Gh_in(229)} 0 {hn(229)}
Gh_230 0 {Gh_out(230)} {Gh_in(230)} 0 {hn(230)}
Gh_231 0 {Gh_out(231)} {Gh_in(231)} 0 {hn(231)}
Gh_232 0 {Gh_out(232)} {Gh_in(232)} 0 {hn(232)}
Gh_233 0 {Gh_out(233)} {Gh_in(233)} 0 {hn(233)}
Gh_234 0 {Gh_out(234)} {Gh_in(234)} 0 {hn(234)}
Gh_235 0 {Gh_out(235)} {Gh_in(235)} 0 {hn(235)}
Gh_236 0 {Gh_out(236)} {Gh_in(236)} 0 {hn(236)}
Gh_237 0 {Gh_out(237)} {Gh_in(237)} 0 {hn(237)}
Gh_238 0 {Gh_out(238)} {Gh_in(238)} 0 {hn(238)}
Gh_239 0 {Gh_out(239)} {Gh_in(239)} 0 {hn(239)}
Gh_240 0 {Gh_out(240)} {Gh_in(240)} 0 {hn(240)}
Gh_241 0 {Gh_out(241)} {Gh_in(241)} 0 {hn(241)}
Gh_242 0 {Gh_out(242)} {Gh_in(242)} 0 {hn(242)}
Gh_243 0 {Gh_out(243)} {Gh_in(243)} 0 {hn(243)}
Gh_244 0 {Gh_out(244)} {Gh_in(244)} 0 {hn(244)}
Gh_245 0 {Gh_out(245)} {Gh_in(245)} 0 {hn(245)}
Gh_246 0 {Gh_out(246)} {Gh_in(246)} 0 {hn(246)}
Gh_247 0 {Gh_out(247)} {Gh_in(247)} 0 {hn(247)}
Gh_248 0 {Gh_out(248)} {Gh_in(248)} 0 {hn(248)}
Gh_249 0 {Gh_out(249)} {Gh_in(249)} 0 {hn(249)}
Gh_250 0 {Gh_out(250)} {Gh_in(250)} 0 {hn(250)}
Gh_251 0 {Gh_out(251)} {Gh_in(251)} 0 {hn(251)}
Gh_252 0 {Gh_out(252)} {Gh_in(252)} 0 {hn(252)}
Gh_253 0 {Gh_out(253)} {Gh_in(253)} 0 {hn(253)}
Gh_254 0 {Gh_out(254)} {Gh_in(254)} 0 {hn(254)}
Gh_255 0 {Gh_out(255)} {Gh_in(255)} 0 {hn(255)}
Gh_256 0 {Gh_out(256)} {Gh_in(256)} 0 {hn(256)}
*** column of delay lines
Tx2 2.2 0 0 2.3 Td={tz2} Z0=1
Tx3 {Tx_IO(3.2,3)} 0 {Tx_IO(3.3,3)} 0 Td={2*tz2} Z0=1
Tx4 {Tx_IO(4.2,4)} 0 0 {Tx_IO(4.3,4)} Td={3*tz2} Z0=1
Tx5 {Tx_IO(5.2,5)} 0 {Tx_IO(5.3,5)} 0 Td={4*tz2} Z0=1
Tx6 {Tx_IO(6.2,6)} 0 0 {Tx_IO(6.3,6)} Td={5*tz2} Z0=1
Tx7 {Tx_IO(7.2,7)} 0 {Tx_IO(7.3,7)} 0 Td={6*tz2} Z0=1
Tx8 {Tx_IO(8.2,8)} 0 0 {Tx_IO(8.3,8)} Td={7*tz2} Z0=1
Tx9 {Tx_IO(9.2,9)} 0 {Tx_IO(9.3,9)} 0 Td={8*tz2} Z0=1
Tx10 {Tx_IO(10.2,10)} 0 0 {Tx_IO(10.3,10)} Td={9*tz2} Z0=1
Tx11 {Tx_IO(11.2,11)} 0 {Tx_IO(11.3,11)} 0 Td={10*tz2} Z0=1
Tx12 {Tx_IO(12.2,12)} 0 0 {Tx_IO(12.3,12)} Td={11*tz2} Z0=1
Tx13 {Tx_IO(13.2,13)} 0 {Tx_IO(13.3,13)} 0 Td={12*tz2} Z0=1
Tx14 {Tx_IO(14.2,14)} 0 0 {Tx_IO(14.3,14)} Td={13*tz2} Z0=1
Tx15 {Tx_IO(15.2,15)} 0 {Tx_IO(15.3,15)} 0 Td={14*tz2} Z0=1
Tx16 {Tx_IO(16.2,16)} 0 0 {Tx_IO(16.3,16)} Td={15*tz2} Z0=1
*** load resistances for the tlines making the rows
RTx2 0 2.3 1
RTx3 0 {Tx_IO(3.3,3)} 1
RTx4 0 {Tx_IO(4.3,4)} 1
RTx5 0 {Tx_IO(5.3,5)} 1
RTx6 0 {Tx_IO(6.3,6)} 1
RTx7 0 {Tx_IO(7.3,7)} 1
RTx8 0 {Tx_IO(8.3,8)} 1
RTx9 0 {Tx_IO(9.3,9)} 1
RTx10 0 {Tx_IO(10.3,10)} 1
RTx11 0 {Tx_IO(11.3,11)} 1
RTx12 0 {Tx_IO(12.3,12)} 1
RTx13 0 {Tx_IO(13.3,13)} 1
RTx14 0 {Tx_IO(14.3,14)} 1
RTx15 0 {Tx_IO(15.3,15)} 1
RTx16 0 {Tx_IO(16.3,16)} 1
*** summers for the rows of delays
Gx1 0 1.1 1.2 2.3 1
Gx3 0 {Gx_out(3)} {Gx_in(3.3,3)} {Gx_in(4.3,4)} 1
Gx5 0 {Gx_out(5)} {Gx_in(5.3,5)} {Gx_in(6.3,6)} 1
Gx7 0 {Gx_out(7)} {Gx_in(7.3,7)} {Gx_in(8.3,8)} 1
Gx9 0 {Gx_out(9)} {Gx_in(9.3,9)} {Gx_in(10.3,10)} 1
Gx11 0 {Gx_out(11)} {Gx_in(11.3,11)} {Gx_in(12.3,12)} 1
Gx13 0 {Gx_out(13)} {Gx_in(13.3,13)} {Gx_in(14.3,14)} 1
Gx15 0 {Gx_out(15)} {Gx_in(15.3,15)} {Gx_in(16.3,16)} 1
*** testing area
VM 0.1 0 {M} AC {10**(M/20)} {M}
.param chebM2=1/cheb(M/2) simM=M/sim hnGain=1/Gain/sqrtM**(Func==1&inv(Norm))
Bw 0.2 0 v=cheb(round(time*simM))*chebM2
Bcoef 0.3 0 v=hn(round(time*simM))*hnGain
.ends FIR2
************************************************
*
*     FIR_FS - frequency sampling method
*
************************************************
*
* Parameters: sigma, nT, Win, Func, SH, f0, As, N
*   (optional: a0, a1, a2, a3, a4, sim, test, tr, td, ref)
* Supports: AP/LP/HP/BP/BS
* Pins used: IN, OUT, GROUND
*   (optional: 0.1, 0.2, 0.3, 0.4)
*
* [NOTES]
*
* - Using this requires altering this subcircuit: search for "fspl(x)" and add
* the desired frequency domain response as a function compatible with LTspice.
* It needs to be of the form:
*	.func fspl(x) {...}
* defined over <0..pi>, with x=<0:(N-3)/2>+nT (odd/even sampling).
* - The length must be a positive definite integer.
* - The windowing functions are the same as in FIR, but {Func} is only used to
* set the type of the filter (compatibility with FIR and FIR2), follow the table
* in the description for {N}, in [PARAMETERS].
*
************************************************
.subckt FIR_FS IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sigma=0.5 nT=0 a0=0.2 a1=0.4 a2=0.35 a3=53m a4=-3m
+ Win=1 sim=1 SH=1
+ f0=2k
+ As=60 N=33
+ tr=1m/absf0 td=0 ref=0.5
*##############################################################
* Write here the custom frequency domain response
* as a mathematical function. It needs to be of the form:
* .func fspl(x) {...}
* defined until Nyquist, where x=<0:(N-3)/2>+nT.
*##############################################################
* Some random examples:
*** a smooth tanh() transition width:
;.param wc=M/4 wt=M/8
;.func fspl(x) {if(x<wc-wt/2,1,if(x>wc+wt/2,0,0.5-tanh(2*pi*(x-wc)/wt)/2/tanh(pi)))}
;.func fspl(x) {0.5-tanh(2*pi*(x-wc)/wt)/2}
*** "Linear phase" Butterworth:
;.func fspl(x) {1/sqrt(1+(x*8/M)**(2*8))}
*** A more practical inverse sinc LP with parameters for frequency and power:
.param freq=0.37 fsinc=0.25 power=8
.func fspl(x) {if(x==0,1,if(x<M/2*freq,(pi*x*2/M*fsinc/sin(pi*x*2/M*fsinc))**power,0))}
*** Pulse-shaping raised cosine:
;.param beta=0.25 OS=4
;.func fspl(x) {if(x<M/2/OS*(1-beta),1,if(x>M/2/OS*(1+beta),0,.5-sin(pi/2/beta/M*2*OS*(x-M/2/OS))/2))}
*** Multiband filter (use high order):
;.func fspl(x) {if((x>M/20&x<M/15)^(x>M/10&x<M/7)^(x>M/5&x<M/4),1,0)}
*** Differentiator until pi/4, integrator until pi/2:
;.func fspl(x) {table(x,0,0,M/8,1,M/4,0)}
*** ChebI
;.param Ord=8 wc=M/6 r=1
;.func Cheb(x) {if(x<=1,cos(Ord*acos(x)),cosh(Ord*acosh(x)))}
;.func fspl(x) {1/sqrt(1+(10**(r/10)-1)*Cheb(x/wc)**2)}
;.func fspl(x) {abs(Cheb(wc/(x+1)))/sqrt(1e4-1)/sqrt(1+Cheb(wc/(x+1))**2/(1e4-1))}
;.func fspl(x) {table(x,0,0,M/20,1,M*9/20,1,M/2,0)*0+(x<M/4)*1 }
*** Ziggurat, used for sonar detection in ancient pyramids:
;.func fspl(x) {(x>M*3/8&x<M*5/8)+(x>M/4&x<M*3/4)+(x>M/8&x<M*7/8)+1}
*##############################################################
*** preliminary calculations
.param Type=1+mod(M,2)+2*(Func>4) M=N-1
*** special parameters and functions
.param KaiserBeta=if(As<50, 584m2*(max(21,As)-21)**0.4+78m86*(max(21,As)-21), 110m2*(max(21,As)-8.7))
.func Bessel_I0(x) {(cosh(x)+2*(cosh(0.970941817426052*x)+cosh(0.8854560256532099*x)+cosh(0.7485107481711011*x)+
+ cosh(0.5680647467311558*x)+cosh(0.3546048870425356*x)+cosh(0.120536680255323*x)))/13}
.param alfa_ex=(0.1808-0.4275m*As)*As-3.516 alfa_ch=(0.1677-0.3251m*As)*As-3.149
*** topology functions and constants
.func mod(x,y) {x-int(x/y)*y}
.func Gh_out(x) {(mod(x,sqrtM)+1.2)*(x<=M)}
.func Gh_in_row(x) {if(x<sqrtM,667,if(x==M,floorM,mod(int(x/sqrtM),ceilM)))*(x<=M)}
.func Gh_in(x) {if(x==M,floorM,mod(int(x/sqrtM),ceilM))*(x<=M)}
.func Tz_IO(x,y) {x*(y<=floorM)}
.func Tx_IO(x,y) {x*(sqrtM==1|sqrtM>=y)}
.func Gx_out(x) {1.1*(sqrtM>=x)}
.func Gx_in(x,y) {x*(sqrtM>=y)}
.param sqrtM=ceil(M**0.5) absf0=abs(f0) floorM=int(M/sqrtM) ceilM=ceil(M/sqrtM)
+ tz1=sqrtM/absf0 tz2=1/absf0
*** windowing functions
.func rectangular(x) {1}
.func Bartlett(x) {2*min(x,M-x)/M}
.func BartlettHann(x) {0.62-0.48*abs(x/M-.5)+0.38*cos(2*pi*(x/M-.5))}
.func Blackman(x) {0.08*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-0.5*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.42}
.func BlackmanHarris3(x) {0.07922*cos((4*x*pi)/M)-0.49755*cos((2*x*pi)/M)+0.42323}
.func BlackmanHarris4(x) {-0.01168*cos((6*x*pi)/M)+0.14128*cos((4*x*pi)/M)-0.48829*cos((2*x*pi)/M)+0.35875}
.func BlackmanNuttall(x) {-0.0106411*cos((6*x*pi)/M)+0.1365995*cos((4*x*pi)/M)-0.4891775*cos((2*x*pi)/M)+0.3635819}
.func Bohman(x) {(1-abs(x-M/2)*2/M)*cos(2*pi*abs(x-M/2)/M)+sin(2*pi*abs(x-M/2)/M)/pi}
.func Cauchy(x) {1/(4*sigma**2*((x-M/2)/M)**2+1)}
.func Connes(x) {Welch(x)**2}
.func exactBlackman(x) {(1430*cos((4*x*pi)/M)-9240*cos((2*x*pi)/M)+7938)/18608}
.func exponential(x) {exp(alfa_ex*sqrt(1-(2*(x-M/2)/M)**2))/exp(alfa_ex)}
.func flatTop(x) {0.006947368*cos((8*x*pi)/M)-0.083578947*cos((6*x*pi)/M)+
+ 0.277263258*cos((4*x*pi)/M)-0.41663158*cos((2*x*pi)/M)+0.21557895}
.func gaussian(x) {exp(-2*( (x-M/2)/(sigma+1u)/M )**2)}
.func genericCos(x) {a4*cos((8*x*pi)/M)-a3*cos((6*x*pi)/M)+a2*cos((4*x*pi)/M)-a1*cos((2*x*pi)/M)+a0}
.func Hamming(x) {-0.46*cos((2*x*pi)/M)+0.54}
.func Hann(x) {-cos((2*(x+u(nT))*pi)/(M+2*u(nT)))/2+0.5}
.func HannPoisson(x) {Hann(x)*Poisson(x)}
.func hyperbolicCos(x) {(cosh(alfa_ch*sqrt(1-(2/M*(x-M/2))**2))/cosh(alfa_ch))**sigma}
.func Kaiser(x) {Bessel_I0(2*KaiserBeta/M*sqrt(x*(M-x)) )/Bessel_I0(KaiserBeta)}
.func KaiserBessel(x) {-1m*cos((6*x*pi)/M)+0.099*cos((4*x*pi)/M)-0.498*cos((2*x*pi)/M)+0.402}
.func Lanczos(x) {if(x==M/2, 1, if( x>M/2*(1-1/ceil(sigma)) &
+ x<M/2*(1+1/ceil(sigma)), sin(2*pi*sigma*(x-M/2)/M)/(2*pi*sigma*(x-M/2)/M), 0))}
.func Nuttall(x) {-0.012604*cos((6*(x+u(nT))*pi)/(M+2*u(nT)))+0.144232*cos((4*(x+u(nT))*pi)/(M+2*u(nT)))-
+ 0.487396*cos((2*(x+u(nT))*pi)/(M+2*u(nT)))+0.355768}
.func Parzen(x) {if( x<=(M-1)/4 | x>=(M-1)*.75, 16*(.5-abs(x-M/2)/M)**3,1-24*((x-M/2)/M)**2+48*(abs(x-M/2)/M)**3)}
.func Poisson(x) {exp(-2*sigma*abs(x-M/2)/M)}
.func powerOfCos(x) {Hann(x)**sigma}
.func triangular(x) {1-2*abs(x-M/2)/(M+1+mod(M,2))}
.func Tukey(x) {if((x>=M/2*sigma & x<=M-M/2*sigma) | sigma==0, 1,.5+cos(2*pi/(sigma+1u)*(x/M-(x>M/2)+sgn(x-M/2)*sigma/2))/2)}
.func Welch(x) {1-4*((x-M/2)/M/(sigma+1u))**2}
*** inverse discrete cosine transform
.func IDCT(x,y) {fspl(x)*cos(2*pi*(x+inv(nT)/2)*(y-M/2)/N)}
.func IDST(x,y) {fspl(x)*sin(2*pi*(x+inv(nT)/2)*(M/2-y)/N)}
.func CosSin(x,y) {if( x>M/2-inv(nT),0,if( Type<3,IDCT(x,y),IDST(x,y) ))}
*** coefficients as the sum of IDCT/IDST terms
.func freqSpl(x) {2/N*(table(Type,2,fspl(0),3,0,4,fspl(N/2)*
+ sin(pi*(M/2-x)))/2*nT+(fspl(M/2)*cos(pi*(x-M/2))/2*(Type==1)+CosSin(0,x))*
+ inv(nT)+CosSin(1,x)+CosSin(2,x)+CosSin(3,x)+CosSin(4,x)+
+ CosSin(5,x)+CosSin(6,x)+CosSin(7,x)+CosSin(8,x)+CosSin(9,x)+
+ CosSin(10,x)+CosSin(11,x)+CosSin(12,x)+CosSin(13,x)+CosSin(14,x)+
+ CosSin(15,x)+CosSin(16,x)+CosSin(17,x)+CosSin(18,x)+CosSin(19,x)+
+ CosSin(20,x)+CosSin(21,x)+CosSin(22,x)+CosSin(23,x)+CosSin(24,x)+
+ CosSin(25,x)+CosSin(26,x)+CosSin(27,x)+CosSin(28,x)+CosSin(29,x)+
+ CosSin(30,x)+CosSin(31,x)+CosSin(32,x)+CosSin(33,x)+CosSin(34,x)+
+ CosSin(35,x)+CosSin(36,x)+CosSin(37,x)+CosSin(38,x)+CosSin(39,x)+
+ CosSin(40,x)+CosSin(41,x)+CosSin(42,x)+CosSin(43,x)+CosSin(44,x)+
+ CosSin(45,x)+CosSin(46,x)+CosSin(47,x)+CosSin(48,x)+CosSin(49,x)+
+ CosSin(50,x)+CosSin(51,x)+CosSin(52,x)+CosSin(53,x)+CosSin(54,x)+
+ CosSin(55,x)+CosSin(56,x)+CosSin(57,x)+CosSin(58,x)+CosSin(59,x)+
+ CosSin(60,x)+CosSin(61,x)+CosSin(62,x)+CosSin(63,x)+CosSin(64,x)+
+ CosSin(65,x)+CosSin(66,x)+CosSin(67,x)+CosSin(68,x)+CosSin(69,x)+
+ CosSin(70,x)+CosSin(71,x)+CosSin(72,x)+CosSin(73,x)+CosSin(74,x)+
+ CosSin(75,x)+CosSin(76,x)+CosSin(77,x)+CosSin(78,x)+CosSin(79,x)+
+ CosSin(80,x)+CosSin(81,x)+CosSin(82,x)+CosSin(83,x)+CosSin(84,x)+
+ CosSin(85,x)+CosSin(86,x)+CosSin(87,x)+CosSin(88,x)+CosSin(89,x)+
+ CosSin(90,x)+CosSin(91,x)+CosSin(92,x)+CosSin(93,x)+CosSin(94,x)+
+ CosSin(95,x)+CosSin(96,x)+CosSin(97,x)+CosSin(98,x)+CosSin(99,x)+
+ CosSin(100,x)+CosSin(101,x)+CosSin(102,x)+CosSin(103,x)+CosSin(104,x)+
+ CosSin(105,x)+CosSin(106,x)+CosSin(107,x)+CosSin(108,x)+CosSin(109,x)+
+ CosSin(110,x)+CosSin(111,x)+CosSin(112,x)+CosSin(113,x)+CosSin(114,x)+
+ CosSin(115,x)+CosSin(116,x)+CosSin(117,x)+CosSin(118,x)+CosSin(119,x)+
+ CosSin(120,x)+CosSin(121,x)+CosSin(122,x)+CosSin(123,x)+CosSin(124,x)+
+ CosSin(125,x)+CosSin(126,x)+CosSin(127,x))}
*** weights
.func weights(x) {table(Win,0,rectangular(x),1,Bartlett(x),2,BartlettHann(x),
+ 3,Blackman(x),4,BlackmanHarris3(x),5,BlackmanHarris4(x),6,flatTop(x),
+ 7,Bohman(x),8,Cauchy(x),9,Connes(x),10,exactBlackman(x),11,exponential(x),
+ 12,flatTop(x),13,gaussian(x),14,genericCos(x),15,Hamming(x),16,Hann(x),
+ 17,HannPoisson(x),18,hyperbolicCos(x),19,Kaiser(x),20,KaiserBessel(x),
+ 21,Lanczos(x),22,Nuttall(x),23,Parzen(x),24,Poisson(x),25,powerOfCos(x),
+ 26,rectangular(x),27,triangular(x),28,Tukey(x),29,Welch(x))}
.func hn(x) {freqSpl(x)*weights(x)}
*** Input buffer
Gin 0 999 in GROUND {1+SH}
*** S&H input
Vbypass {999*inv(SH)} {667*inv(SH)}
Rin {SH*999} 0 1
Ash {SH*999} 0 {SH*0.4} 0 0 0 {SH*667} 0 SAMPLEHOLD Rout=1 Vhigh=1G Vlow=-1G ref={ref}
Vsh {SH*u(f0)*0.4} 0 pulse 0 1 {td} {tr} 0 0 {1/absf0}
*** input, amplifying stage
Rinter {floorM} 0 1
*** output stage
Rout 0 1.1 1
Gexit GROUND out 1.1 0 1
Rexit GROUND out 1
*** row of delay lines
Tz1 667 0 1 0 Td={tz1} Z0=1
Tz2 {1*(2<=floorM)} 0 {2*(2<=floorM)} 0 Td={tz1} Z0=1
Tz3 {2*(3<=floorM)} 0 {3*(3<=floorM)} 0 Td={tz1} Z0=1
Tz4 {3*(4<=floorM)} 0 {4*(4<=floorM)} 0 Td={tz1} Z0=1
Tz5 {4*(5<=floorM)} 0 {5*(5<=floorM)} 0 Td={tz1} Z0=1
Tz6 {5*(6<=floorM)} 0 {6*(6<=floorM)} 0 Td={tz1} Z0=1
Tz7 {6*(7<=floorM)} 0 {7*(7<=floorM)} 0 Td={tz1} Z0=1
Tz8 {7*(8<=floorM)} 0 {8*(8<=floorM)} 0 Td={tz1} Z0=1
Tz9 {8*(9<=floorM)} 0 {9*(9<=floorM)} 0 Td={tz1} Z0=1
Tz10 {9*(10<=floorM)} 0 {10*(10<=floorM)} 0 Td={tz1} Z0=1
Tz11 {10*(11<=floorM)} 0 {11*(11<=floorM)} 0 Td={tz1} Z0=1
Tz12 {11*(12<=floorM)} 0 {12*(12<=floorM)} 0 Td={tz1} Z0=1
Tz13 {12*(13<=floorM)} 0 {13*(13<=floorM)} 0 Td={tz1} Z0=1
Tz14 {13*(14<=floorM)} 0 {14*(14<=floorM)} 0 Td={tz1} Z0=1
Tz15 {14*(15<=floorM)} 0 {15*(15<=floorM)} 0 Td={tz1} Z0=1
Tz16 {15*(16<=floorM)} 0 {16*(16<=floorM)} 0 Td={tz1} Z0=1
*** column of delay lines
Tx2 2.2 0 0 2.3 Td={tz2} Z0=1
Tx3 {3.2*(sqrtM>=3)} 0 {3.3*(sqrtM>=3)} 0 Td={2*tz2} Z0=1
Tx4 {4.2*(sqrtM>=4)} 0 0 {4.3*(sqrtM>=4)} Td={3*tz2} Z0=1
Tx5 {5.2*(sqrtM>=5)} 0 {5.3*(sqrtM>=5)} 0 Td={4*tz2} Z0=1
Tx6 {6.2*(sqrtM>=6)} 0 0 {6.3*(sqrtM>=6)} Td={5*tz2} Z0=1
Tx7 {7.2*(sqrtM>=7)} 0 {7.3*(sqrtM>=7)} 0 Td={6*tz2} Z0=1
Tx8 {8.2*(sqrtM>=8)} 0 0 {8.3*(sqrtM>=8)} Td={7*tz2} Z0=1
Tx9 {9.2*(sqrtM>=9)} 0 {9.3*(sqrtM>=9)} 0 Td={8*tz2} Z0=1
Tx10 {10.2*(sqrtM>=10)} 0 0 {10.3*(sqrtM>=10)} Td={9*tz2} Z0=1
Tx11 {11.2*(sqrtM>=11)} 0 {11.3*(sqrtM>=11)} 0 Td={10*tz2} Z0=1
Tx12 {12.2*(sqrtM>=12)} 0 0 {12.3*(sqrtM>=12)} Td={11*tz2} Z0=1
Tx13 {13.2*(sqrtM>=13)} 0 {13.3*(sqrtM>=13)} 0 Td={12*tz2} Z0=1
Tx14 {14.2*(sqrtM>=14)} 0 0 {14.3*(sqrtM>=14)} Td={13*tz2} Z0=1
Tx15 {15.2*(sqrtM>=15)} 0 {15.3*(sqrtM>=15)} 0 Td={14*tz2} Z0=1
Tx16 {16.2*(sqrtM>=16)} 0 0 {16.3*(sqrtM>=16)} Td={15*tz2} Z0=1
*** load resistances for the tlines making the rows
RTx2 0 2.3 1
RTx3 0 {3.3*(sqrtM>=3)} 1
RTx4 0 {4.3*(sqrtM>=4)} 1
RTx5 0 {5.3*(sqrtM>=5)} 1
RTx6 0 {6.3*(sqrtM>=6)} 1
RTx7 0 {7.3*(sqrtM>=7)} 1
RTx8 0 {8.3*(sqrtM>=8)} 1
RTx9 0 {9.3*(sqrtM>=9)} 1
RTx10 0 {10.3*(sqrtM>=10)} 1
RTx11 0 {11.3*(sqrtM>=11)} 1
RTx12 0 {12.3*(sqrtM>=12)} 1
RTx13 0 {13.3*(sqrtM>=13)} 1
RTx14 0 {14.3*(sqrtM>=14)} 1
RTx15 0 {15.3*(sqrtM>=15)} 1
RTx16 0 {16.3*(sqrtM>=16)} 1
*** summers for the rows of delays
Gx1 0 1.1 1.2 2.3 1
Gx3 0 {1.1*(sqrtM>=3)} {3.3*(sqrtM>=3)} {4.3*(sqrtM>=4)} 1
Gx5 0 {1.1*(sqrtM>=5)} {5.3*(sqrtM>=5)} {6.3*(sqrtM>=6)} 1
Gx7 0 {1.1*(sqrtM>=7)} {7.3*(sqrtM>=7)} {8.3*(sqrtM>=8)} 1
Gx9 0 {1.1*(sqrtM>=9)} {9.3*(sqrtM>=9)} {10.3*(sqrtM>=10)} 1
Gx11 0 {1.1*(sqrtM>=11)} {11.3*(sqrtM>=11)} {12.3*(sqrtM>=12)} 1
Gx13 0 {1.1*(sqrtM>=13)} {13.3*(sqrtM>=13)} {14.3*(sqrtM>=14)} 1
Gx15 0 {1.1*(sqrtM>=15)} {15.3*(sqrtM>=15)} {16.3*(sqrtM>=16)} 1
*** h[n], all in sequential order, active until {M}, the rest - disabled
*** first one is always active
RGh 0 1.2 1
Gh_0 0 1.2 667 0 {hn(0)}
*** there can be maximum 32 multipliers/column with input node 667;
*** these take care of it
Gh_1 0 {Gh_out(1)} {Gh_in_row(1)} 0 {hn(1)}
Gh_2 0 {Gh_out(2)} {Gh_in_row(2)} 0 {hn(2)}
Gh_3 0 {Gh_out(3)} {Gh_in_row(3)} 0 {hn(3)}
Gh_4 0 {Gh_out(4)} {Gh_in_row(4)} 0 {hn(4)}
Gh_5 0 {Gh_out(5)} {Gh_in_row(5)} 0 {hn(5)}
Gh_6 0 {Gh_out(6)} {Gh_in_row(6)} 0 {hn(6)}
Gh_7 0 {Gh_out(7)} {Gh_in_row(7)} 0 {hn(7)}
Gh_8 0 {Gh_out(8)} {Gh_in_row(8)} 0 {hn(8)}
Gh_9 0 {Gh_out(9)} {Gh_in_row(9)} 0 {hn(9)}
Gh_10 0 {Gh_out(10)} {Gh_in_row(10)} 0 {hn(10)}
Gh_11 0 {Gh_out(11)} {Gh_in_row(11)} 0 {hn(11)}
Gh_12 0 {Gh_out(12)} {Gh_in_row(12)} 0 {hn(12)}
Gh_13 0 {Gh_out(13)} {Gh_in_row(13)} 0 {hn(13)}
Gh_14 0 {Gh_out(14)} {Gh_in_row(14)} 0 {hn(14)}
Gh_15 0 {Gh_out(15)} {Gh_in_row(15)} 0 {hn(15)}
Gh_16 0 {Gh_out(16)} {Gh_in_row(16)} 0 {hn(16)}
Gh_17 0 {Gh_out(17)} {Gh_in_row(17)} 0 {hn(17)}
Gh_18 0 {Gh_out(18)} {Gh_in_row(18)} 0 {hn(18)}
Gh_19 0 {Gh_out(19)} {Gh_in_row(19)} 0 {hn(19)}
Gh_20 0 {Gh_out(20)} {Gh_in_row(20)} 0 {hn(20)}
Gh_21 0 {Gh_out(21)} {Gh_in_row(21)} 0 {hn(21)}
Gh_22 0 {Gh_out(22)} {Gh_in_row(22)} 0 {hn(22)}
Gh_23 0 {Gh_out(23)} {Gh_in_row(23)} 0 {hn(23)}
Gh_24 0 {Gh_out(24)} {Gh_in_row(24)} 0 {hn(24)}
Gh_25 0 {Gh_out(25)} {Gh_in_row(25)} 0 {hn(25)}
Gh_26 0 {Gh_out(26)} {Gh_in_row(26)} 0 {hn(26)}
Gh_27 0 {Gh_out(27)} {Gh_in_row(27)} 0 {hn(27)}
Gh_28 0 {Gh_out(28)} {Gh_in_row(28)} 0 {hn(28)}
Gh_29 0 {Gh_out(29)} {Gh_in_row(29)} 0 {hn(29)}
Gh_30 0 {Gh_out(30)} {Gh_in_row(30)} 0 {hn(30)}
Gh_31 0 {Gh_out(31)} {Gh_in_row(31)} 0 {hn(31)}
Gh_32 0 {Gh_out(32)} {Gh_in_row(32)} 0 {hn(32)}
*** the rest of the array's 'coefficients'
Gh_33 0 {Gh_out(33)} {Gh_in(33)} 0 {hn(33)}
Gh_34 0 {Gh_out(34)} {Gh_in(34)} 0 {hn(34)}
Gh_35 0 {Gh_out(35)} {Gh_in(35)} 0 {hn(35)}
Gh_36 0 {Gh_out(36)} {Gh_in(36)} 0 {hn(36)}
Gh_37 0 {Gh_out(37)} {Gh_in(37)} 0 {hn(37)}
Gh_38 0 {Gh_out(38)} {Gh_in(38)} 0 {hn(38)}
Gh_39 0 {Gh_out(39)} {Gh_in(39)} 0 {hn(39)}
Gh_40 0 {Gh_out(40)} {Gh_in(40)} 0 {hn(40)}
Gh_41 0 {Gh_out(41)} {Gh_in(41)} 0 {hn(41)}
Gh_42 0 {Gh_out(42)} {Gh_in(42)} 0 {hn(42)}
Gh_43 0 {Gh_out(43)} {Gh_in(43)} 0 {hn(43)}
Gh_44 0 {Gh_out(44)} {Gh_in(44)} 0 {hn(44)}
Gh_45 0 {Gh_out(45)} {Gh_in(45)} 0 {hn(45)}
Gh_46 0 {Gh_out(46)} {Gh_in(46)} 0 {hn(46)}
Gh_47 0 {Gh_out(47)} {Gh_in(47)} 0 {hn(47)}
Gh_48 0 {Gh_out(48)} {Gh_in(48)} 0 {hn(48)}
Gh_49 0 {Gh_out(49)} {Gh_in(49)} 0 {hn(49)}
Gh_50 0 {Gh_out(50)} {Gh_in(50)} 0 {hn(50)}
Gh_51 0 {Gh_out(51)} {Gh_in(51)} 0 {hn(51)}
Gh_52 0 {Gh_out(52)} {Gh_in(52)} 0 {hn(52)}
Gh_53 0 {Gh_out(53)} {Gh_in(53)} 0 {hn(53)}
Gh_54 0 {Gh_out(54)} {Gh_in(54)} 0 {hn(54)}
Gh_55 0 {Gh_out(55)} {Gh_in(55)} 0 {hn(55)}
Gh_56 0 {Gh_out(56)} {Gh_in(56)} 0 {hn(56)}
Gh_57 0 {Gh_out(57)} {Gh_in(57)} 0 {hn(57)}
Gh_58 0 {Gh_out(58)} {Gh_in(58)} 0 {hn(58)}
Gh_59 0 {Gh_out(59)} {Gh_in(59)} 0 {hn(59)}
Gh_60 0 {Gh_out(60)} {Gh_in(60)} 0 {hn(60)}
Gh_61 0 {Gh_out(61)} {Gh_in(61)} 0 {hn(61)}
Gh_62 0 {Gh_out(62)} {Gh_in(62)} 0 {hn(62)}
Gh_63 0 {Gh_out(63)} {Gh_in(63)} 0 {hn(63)}
Gh_64 0 {Gh_out(64)} {Gh_in(64)} 0 {hn(64)}
Gh_65 0 {Gh_out(65)} {Gh_in(65)} 0 {hn(65)}
Gh_66 0 {Gh_out(66)} {Gh_in(66)} 0 {hn(66)}
Gh_67 0 {Gh_out(67)} {Gh_in(67)} 0 {hn(67)}
Gh_68 0 {Gh_out(68)} {Gh_in(68)} 0 {hn(68)}
Gh_69 0 {Gh_out(69)} {Gh_in(69)} 0 {hn(69)}
Gh_70 0 {Gh_out(70)} {Gh_in(70)} 0 {hn(70)}
Gh_71 0 {Gh_out(71)} {Gh_in(71)} 0 {hn(71)}
Gh_72 0 {Gh_out(72)} {Gh_in(72)} 0 {hn(72)}
Gh_73 0 {Gh_out(73)} {Gh_in(73)} 0 {hn(73)}
Gh_74 0 {Gh_out(74)} {Gh_in(74)} 0 {hn(74)}
Gh_75 0 {Gh_out(75)} {Gh_in(75)} 0 {hn(75)}
Gh_76 0 {Gh_out(76)} {Gh_in(76)} 0 {hn(76)}
Gh_77 0 {Gh_out(77)} {Gh_in(77)} 0 {hn(77)}
Gh_78 0 {Gh_out(78)} {Gh_in(78)} 0 {hn(78)}
Gh_79 0 {Gh_out(79)} {Gh_in(79)} 0 {hn(79)}
Gh_80 0 {Gh_out(80)} {Gh_in(80)} 0 {hn(80)}
Gh_81 0 {Gh_out(81)} {Gh_in(81)} 0 {hn(81)}
Gh_82 0 {Gh_out(82)} {Gh_in(82)} 0 {hn(82)}
Gh_83 0 {Gh_out(83)} {Gh_in(83)} 0 {hn(83)}
Gh_84 0 {Gh_out(84)} {Gh_in(84)} 0 {hn(84)}
Gh_85 0 {Gh_out(85)} {Gh_in(85)} 0 {hn(85)}
Gh_86 0 {Gh_out(86)} {Gh_in(86)} 0 {hn(86)}
Gh_87 0 {Gh_out(87)} {Gh_in(87)} 0 {hn(87)}
Gh_88 0 {Gh_out(88)} {Gh_in(88)} 0 {hn(88)}
Gh_89 0 {Gh_out(89)} {Gh_in(89)} 0 {hn(89)}
Gh_90 0 {Gh_out(90)} {Gh_in(90)} 0 {hn(90)}
Gh_91 0 {Gh_out(91)} {Gh_in(91)} 0 {hn(91)}
Gh_92 0 {Gh_out(92)} {Gh_in(92)} 0 {hn(92)}
Gh_93 0 {Gh_out(93)} {Gh_in(93)} 0 {hn(93)}
Gh_94 0 {Gh_out(94)} {Gh_in(94)} 0 {hn(94)}
Gh_95 0 {Gh_out(95)} {Gh_in(95)} 0 {hn(95)}
Gh_96 0 {Gh_out(96)} {Gh_in(96)} 0 {hn(96)}
Gh_97 0 {Gh_out(97)} {Gh_in(97)} 0 {hn(97)}
Gh_98 0 {Gh_out(98)} {Gh_in(98)} 0 {hn(98)}
Gh_99 0 {Gh_out(99)} {Gh_in(99)} 0 {hn(99)}
Gh_100 0 {Gh_out(100)} {Gh_in(100)} 0 {hn(100)}
Gh_101 0 {Gh_out(101)} {Gh_in(101)} 0 {hn(101)}
Gh_102 0 {Gh_out(102)} {Gh_in(102)} 0 {hn(102)}
Gh_103 0 {Gh_out(103)} {Gh_in(103)} 0 {hn(103)}
Gh_104 0 {Gh_out(104)} {Gh_in(104)} 0 {hn(104)}
Gh_105 0 {Gh_out(105)} {Gh_in(105)} 0 {hn(105)}
Gh_106 0 {Gh_out(106)} {Gh_in(106)} 0 {hn(106)}
Gh_107 0 {Gh_out(107)} {Gh_in(107)} 0 {hn(107)}
Gh_108 0 {Gh_out(108)} {Gh_in(108)} 0 {hn(108)}
Gh_109 0 {Gh_out(109)} {Gh_in(109)} 0 {hn(109)}
Gh_110 0 {Gh_out(110)} {Gh_in(110)} 0 {hn(110)}
Gh_111 0 {Gh_out(111)} {Gh_in(111)} 0 {hn(111)}
Gh_112 0 {Gh_out(112)} {Gh_in(112)} 0 {hn(112)}
Gh_113 0 {Gh_out(113)} {Gh_in(113)} 0 {hn(113)}
Gh_114 0 {Gh_out(114)} {Gh_in(114)} 0 {hn(114)}
Gh_115 0 {Gh_out(115)} {Gh_in(115)} 0 {hn(115)}
Gh_116 0 {Gh_out(116)} {Gh_in(116)} 0 {hn(116)}
Gh_117 0 {Gh_out(117)} {Gh_in(117)} 0 {hn(117)}
Gh_118 0 {Gh_out(118)} {Gh_in(118)} 0 {hn(118)}
Gh_119 0 {Gh_out(119)} {Gh_in(119)} 0 {hn(119)}
Gh_120 0 {Gh_out(120)} {Gh_in(120)} 0 {hn(120)}
Gh_121 0 {Gh_out(121)} {Gh_in(121)} 0 {hn(121)}
Gh_122 0 {Gh_out(122)} {Gh_in(122)} 0 {hn(122)}
Gh_123 0 {Gh_out(123)} {Gh_in(123)} 0 {hn(123)}
Gh_124 0 {Gh_out(124)} {Gh_in(124)} 0 {hn(124)}
Gh_125 0 {Gh_out(125)} {Gh_in(125)} 0 {hn(125)}
Gh_126 0 {Gh_out(126)} {Gh_in(126)} 0 {hn(126)}
Gh_127 0 {Gh_out(127)} {Gh_in(127)} 0 {hn(127)}
Gh_128 0 {Gh_out(128)} {Gh_in(128)} 0 {hn(128)}
Gh_129 0 {Gh_out(129)} {Gh_in(129)} 0 {hn(129)}
Gh_130 0 {Gh_out(130)} {Gh_in(130)} 0 {hn(130)}
Gh_131 0 {Gh_out(131)} {Gh_in(131)} 0 {hn(131)}
Gh_132 0 {Gh_out(132)} {Gh_in(132)} 0 {hn(132)}
Gh_133 0 {Gh_out(133)} {Gh_in(133)} 0 {hn(133)}
Gh_134 0 {Gh_out(134)} {Gh_in(134)} 0 {hn(134)}
Gh_135 0 {Gh_out(135)} {Gh_in(135)} 0 {hn(135)}
Gh_136 0 {Gh_out(136)} {Gh_in(136)} 0 {hn(136)}
Gh_137 0 {Gh_out(137)} {Gh_in(137)} 0 {hn(137)}
Gh_138 0 {Gh_out(138)} {Gh_in(138)} 0 {hn(138)}
Gh_139 0 {Gh_out(139)} {Gh_in(139)} 0 {hn(139)}
Gh_140 0 {Gh_out(140)} {Gh_in(140)} 0 {hn(140)}
Gh_141 0 {Gh_out(141)} {Gh_in(141)} 0 {hn(141)}
Gh_142 0 {Gh_out(142)} {Gh_in(142)} 0 {hn(142)}
Gh_143 0 {Gh_out(143)} {Gh_in(143)} 0 {hn(143)}
Gh_144 0 {Gh_out(144)} {Gh_in(144)} 0 {hn(144)}
Gh_145 0 {Gh_out(145)} {Gh_in(145)} 0 {hn(145)}
Gh_146 0 {Gh_out(146)} {Gh_in(146)} 0 {hn(146)}
Gh_147 0 {Gh_out(147)} {Gh_in(147)} 0 {hn(147)}
Gh_148 0 {Gh_out(148)} {Gh_in(148)} 0 {hn(148)}
Gh_149 0 {Gh_out(149)} {Gh_in(149)} 0 {hn(149)}
Gh_150 0 {Gh_out(150)} {Gh_in(150)} 0 {hn(150)}
Gh_151 0 {Gh_out(151)} {Gh_in(151)} 0 {hn(151)}
Gh_152 0 {Gh_out(152)} {Gh_in(152)} 0 {hn(152)}
Gh_153 0 {Gh_out(153)} {Gh_in(153)} 0 {hn(153)}
Gh_154 0 {Gh_out(154)} {Gh_in(154)} 0 {hn(154)}
Gh_155 0 {Gh_out(155)} {Gh_in(155)} 0 {hn(155)}
Gh_156 0 {Gh_out(156)} {Gh_in(156)} 0 {hn(156)}
Gh_157 0 {Gh_out(157)} {Gh_in(157)} 0 {hn(157)}
Gh_158 0 {Gh_out(158)} {Gh_in(158)} 0 {hn(158)}
Gh_159 0 {Gh_out(159)} {Gh_in(159)} 0 {hn(159)}
Gh_160 0 {Gh_out(160)} {Gh_in(160)} 0 {hn(160)}
Gh_161 0 {Gh_out(161)} {Gh_in(161)} 0 {hn(161)}
Gh_162 0 {Gh_out(162)} {Gh_in(162)} 0 {hn(162)}
Gh_163 0 {Gh_out(163)} {Gh_in(163)} 0 {hn(163)}
Gh_164 0 {Gh_out(164)} {Gh_in(164)} 0 {hn(164)}
Gh_165 0 {Gh_out(165)} {Gh_in(165)} 0 {hn(165)}
Gh_166 0 {Gh_out(166)} {Gh_in(166)} 0 {hn(166)}
Gh_167 0 {Gh_out(167)} {Gh_in(167)} 0 {hn(167)}
Gh_168 0 {Gh_out(168)} {Gh_in(168)} 0 {hn(168)}
Gh_169 0 {Gh_out(169)} {Gh_in(169)} 0 {hn(169)}
Gh_170 0 {Gh_out(170)} {Gh_in(170)} 0 {hn(170)}
Gh_171 0 {Gh_out(171)} {Gh_in(171)} 0 {hn(171)}
Gh_172 0 {Gh_out(172)} {Gh_in(172)} 0 {hn(172)}
Gh_173 0 {Gh_out(173)} {Gh_in(173)} 0 {hn(173)}
Gh_174 0 {Gh_out(174)} {Gh_in(174)} 0 {hn(174)}
Gh_175 0 {Gh_out(175)} {Gh_in(175)} 0 {hn(175)}
Gh_176 0 {Gh_out(176)} {Gh_in(176)} 0 {hn(176)}
Gh_177 0 {Gh_out(177)} {Gh_in(177)} 0 {hn(177)}
Gh_178 0 {Gh_out(178)} {Gh_in(178)} 0 {hn(178)}
Gh_179 0 {Gh_out(179)} {Gh_in(179)} 0 {hn(179)}
Gh_180 0 {Gh_out(180)} {Gh_in(180)} 0 {hn(180)}
Gh_181 0 {Gh_out(181)} {Gh_in(181)} 0 {hn(181)}
Gh_182 0 {Gh_out(182)} {Gh_in(182)} 0 {hn(182)}
Gh_183 0 {Gh_out(183)} {Gh_in(183)} 0 {hn(183)}
Gh_184 0 {Gh_out(184)} {Gh_in(184)} 0 {hn(184)}
Gh_185 0 {Gh_out(185)} {Gh_in(185)} 0 {hn(185)}
Gh_186 0 {Gh_out(186)} {Gh_in(186)} 0 {hn(186)}
Gh_187 0 {Gh_out(187)} {Gh_in(187)} 0 {hn(187)}
Gh_188 0 {Gh_out(188)} {Gh_in(188)} 0 {hn(188)}
Gh_189 0 {Gh_out(189)} {Gh_in(189)} 0 {hn(189)}
Gh_190 0 {Gh_out(190)} {Gh_in(190)} 0 {hn(190)}
Gh_191 0 {Gh_out(191)} {Gh_in(191)} 0 {hn(191)}
Gh_192 0 {Gh_out(192)} {Gh_in(192)} 0 {hn(192)}
Gh_193 0 {Gh_out(193)} {Gh_in(193)} 0 {hn(193)}
Gh_194 0 {Gh_out(194)} {Gh_in(194)} 0 {hn(194)}
Gh_195 0 {Gh_out(195)} {Gh_in(195)} 0 {hn(195)}
Gh_196 0 {Gh_out(196)} {Gh_in(196)} 0 {hn(196)}
Gh_197 0 {Gh_out(197)} {Gh_in(197)} 0 {hn(197)}
Gh_198 0 {Gh_out(198)} {Gh_in(198)} 0 {hn(198)}
Gh_199 0 {Gh_out(199)} {Gh_in(199)} 0 {hn(199)}
Gh_200 0 {Gh_out(200)} {Gh_in(200)} 0 {hn(200)}
Gh_201 0 {Gh_out(201)} {Gh_in(201)} 0 {hn(201)}
Gh_202 0 {Gh_out(202)} {Gh_in(202)} 0 {hn(202)}
Gh_203 0 {Gh_out(203)} {Gh_in(203)} 0 {hn(203)}
Gh_204 0 {Gh_out(204)} {Gh_in(204)} 0 {hn(204)}
Gh_205 0 {Gh_out(205)} {Gh_in(205)} 0 {hn(205)}
Gh_206 0 {Gh_out(206)} {Gh_in(206)} 0 {hn(206)}
Gh_207 0 {Gh_out(207)} {Gh_in(207)} 0 {hn(207)}
Gh_208 0 {Gh_out(208)} {Gh_in(208)} 0 {hn(208)}
Gh_209 0 {Gh_out(209)} {Gh_in(209)} 0 {hn(209)}
Gh_210 0 {Gh_out(210)} {Gh_in(210)} 0 {hn(210)}
Gh_211 0 {Gh_out(211)} {Gh_in(211)} 0 {hn(211)}
Gh_212 0 {Gh_out(212)} {Gh_in(212)} 0 {hn(212)}
Gh_213 0 {Gh_out(213)} {Gh_in(213)} 0 {hn(213)}
Gh_214 0 {Gh_out(214)} {Gh_in(214)} 0 {hn(214)}
Gh_215 0 {Gh_out(215)} {Gh_in(215)} 0 {hn(215)}
Gh_216 0 {Gh_out(216)} {Gh_in(216)} 0 {hn(216)}
Gh_217 0 {Gh_out(217)} {Gh_in(217)} 0 {hn(217)}
Gh_218 0 {Gh_out(218)} {Gh_in(218)} 0 {hn(218)}
Gh_219 0 {Gh_out(219)} {Gh_in(219)} 0 {hn(219)}
Gh_220 0 {Gh_out(220)} {Gh_in(220)} 0 {hn(220)}
Gh_221 0 {Gh_out(221)} {Gh_in(221)} 0 {hn(221)}
Gh_222 0 {Gh_out(222)} {Gh_in(222)} 0 {hn(222)}
Gh_223 0 {Gh_out(223)} {Gh_in(223)} 0 {hn(223)}
Gh_224 0 {Gh_out(224)} {Gh_in(224)} 0 {hn(224)}
Gh_225 0 {Gh_out(225)} {Gh_in(225)} 0 {hn(225)}
Gh_226 0 {Gh_out(226)} {Gh_in(226)} 0 {hn(226)}
Gh_227 0 {Gh_out(227)} {Gh_in(227)} 0 {hn(227)}
Gh_228 0 {Gh_out(228)} {Gh_in(228)} 0 {hn(228)}
Gh_229 0 {Gh_out(229)} {Gh_in(229)} 0 {hn(229)}
Gh_230 0 {Gh_out(230)} {Gh_in(230)} 0 {hn(230)}
Gh_231 0 {Gh_out(231)} {Gh_in(231)} 0 {hn(231)}
Gh_232 0 {Gh_out(232)} {Gh_in(232)} 0 {hn(232)}
Gh_233 0 {Gh_out(233)} {Gh_in(233)} 0 {hn(233)}
Gh_234 0 {Gh_out(234)} {Gh_in(234)} 0 {hn(234)}
Gh_235 0 {Gh_out(235)} {Gh_in(235)} 0 {hn(235)}
Gh_236 0 {Gh_out(236)} {Gh_in(236)} 0 {hn(236)}
Gh_237 0 {Gh_out(237)} {Gh_in(237)} 0 {hn(237)}
Gh_238 0 {Gh_out(238)} {Gh_in(238)} 0 {hn(238)}
Gh_239 0 {Gh_out(239)} {Gh_in(239)} 0 {hn(239)}
Gh_240 0 {Gh_out(240)} {Gh_in(240)} 0 {hn(240)}
Gh_241 0 {Gh_out(241)} {Gh_in(241)} 0 {hn(241)}
Gh_242 0 {Gh_out(242)} {Gh_in(242)} 0 {hn(242)}
Gh_243 0 {Gh_out(243)} {Gh_in(243)} 0 {hn(243)}
Gh_244 0 {Gh_out(244)} {Gh_in(244)} 0 {hn(244)}
Gh_245 0 {Gh_out(245)} {Gh_in(245)} 0 {hn(245)}
Gh_246 0 {Gh_out(246)} {Gh_in(246)} 0 {hn(246)}
Gh_247 0 {Gh_out(247)} {Gh_in(247)} 0 {hn(247)}
Gh_248 0 {Gh_out(248)} {Gh_in(248)} 0 {hn(248)}
Gh_249 0 {Gh_out(249)} {Gh_in(249)} 0 {hn(249)}
Gh_250 0 {Gh_out(250)} {Gh_in(250)} 0 {hn(250)}
Gh_251 0 {Gh_out(251)} {Gh_in(251)} 0 {hn(251)}
Gh_252 0 {Gh_out(252)} {Gh_in(252)} 0 {hn(252)}
Gh_253 0 {Gh_out(253)} {Gh_in(253)} 0 {hn(253)}
Gh_254 0 {Gh_out(254)} {Gh_in(254)} 0 {hn(254)}
Gh_255 0 {Gh_out(255)} {Gh_in(255)} 0 {hn(255)}
Gh_256 0 {Gh_out(256)} {Gh_in(256)} 0 {hn(256)}
*** testing area
Vtype 0.1 0 {Type} AC {10**(Type/20)} {Type}
.param simM=M/sim simM2=simM/2
Bfreq 0.2 0 v=fspl(time*simM2)
Bcoef 0.3 0 v=hn(round(time*simM))
.ends FIR_FS
********************************************************************************
********************************************************************************
*
*               -- MOVING AVERAGE FILTERS --
*
********************************************************************************
********************************************************************************
********************************************************
*
*     MAFv, moving average filter, variable period
*
********************************************************
*
* Parameters: f0
*	(optional: Rpar)
* Supports: LP
* Pins used: IN, OUT, GROUND, 0.4
*
* [PARAMETERS]
*
* f0	[Hz]	= inverse of the period of the sliding window, default 1k;
* G         = gain, linear, default 1.
*
* - Hidden:
*
* Rpar [Ohm]  = LTspice's specific for capacitors, MAFv only, default 1g.
*
********************************************************
.subckt MAFv IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ f0=1k
+ G=1
+ Rpar=1G lim=1g
Gin 0 _in in GROUND 1
Cin _in 0 1 Rser=0 Lser=0 Rpar={Rpar} Cpar=0 RLshunt=0 ic=0
Bd 0 2 I=delay(v(_in), 1/v(0.4)) rpar=1
R0.1 0 0.4 1G
Afreq 2 _in 0.4 0 GROUND GROUND OUT 0 OTA vhigh={lim} vlow={-lim} rout=1 g={G} linear
Vfreq 0.4 0 {f0} Rser=1g
.ends MAFv
****************************************
*
*     RRS, recursive running sum
*
****************************************
*
* Parameters: f0, N
* Supports: LP
* Pins used: IN, OUT, GROUND
*
* [PARAMETERS]
*
* f0	[Hz]	= inverse of the period of the discrete integrator, default 1k;
* N=<0:inf>	= the number of samples per period, default 10;
* G         = gain, linear, default 1.
*
* [NOTES]
*
* - It may need either .ic for input, or uic.
* - The averaging period is set by f0*N.
*
****************************************
.subckt RRS IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ f0=1k
+ G=1 N=10
Gin 0 666 in GROUND 1
Tin 666 0 z1 0 Td={N/f0} Z0=1
GTin 0 999 666 z1 {1/N}
Rin z1 0 1
GTout 0 999 z2 0 1
Tout z2 0 999 0 Td={1/f0} Z0=1
RTout z2 0 1
Gout GROUND out 999 0 {G}
Rout GROUND out 1
.ends RRS
********************************************************************************
********************************************************************************
*
*                               ~~ CUSTOM FILTERS ~~
*
********************************************************************************
********************************************************************************
*
* sigma         = tweak to make 3dBoct's response smoother or sharper around the
*               corner frequency.
* nT=           = by default, the spacing of the RC cells is octave-based,
*               2^n, but this can override it as (2+nT)^n.
* fp1 [Hz]      = corner frequency, or
* BWp [Hz]      = pass-band bandwidth.
* G=<-inf..inf> = gain, linear.
* N=<1:32>      = the maximum number of RC cells.
*
* - Hidden:
*
* Rpar  [Ohm]   = dummy resistance across capacitors, default 1G, can be null.
*
************************
*
*     -3dB/octave
*
************************
*
* Parameters used: [fp1/BWp], G, N
*   (optional: sigma, nT)
* Supports: LP
* Pins used: IN, OUT, GROUND
*   (hidden: Rpar)
*
* [NOTES]
*
* - It's an approximation made up of RC cells.
* - For an integrator-like response with 0dB@fp, set BWp=fp/100 and G=10.
*
***********************
.subckt 3dBoct IN OUT 0.1 0.2 0.3 0.4 GROUND params: ;default parameters
+ sigma=1 nT=0
+ fp1=100
+ G=1 N=32
+ Rpar=1G
.param BWp=fp1
*** functions
.func cap(x) {res(x)/2/pi/BWp/2**(2.3-nT*sigma)}
.func res(x) {(2+max(-1,nT))**(-x+sigma)}
.func nod(x) {x<=N}
*** buffered input and output
Gin 0 1 in GROUND 1
Rout out GROUND 1
Gout GROUND out 1 0 {G}
*** series RC cells
Cx1 {nod(1)} 0 {cap(1)} Rser={res(1)} Rpar=1 Cpar=0 Lser=0 RLshunt=0
Cx2 {nod(2)} 0 {cap(2)} Rser={res(2)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx3 {nod(3)} 0 {cap(3)} Rser={res(3)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx4 {nod(4)} 0 {cap(4)} Rser={res(4)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx5 {nod(5)} 0 {cap(5)} Rser={res(5)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx6 {nod(6)} 0 {cap(6)} Rser={res(6)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx7 {nod(7)} 0 {cap(7)} Rser={res(7)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx8 {nod(8)} 0 {cap(8)} Rser={res(8)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx9 {nod(9)} 0 {cap(9)} Rser={res(9)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx10 {nod(10)} 0 {cap(10)} Rser={res(10)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx11 {nod(11)} 0 {cap(11)} Rser={res(11)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx12 {nod(12)} 0 {cap(12)} Rser={res(12)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx13 {nod(13)} 0 {cap(13)} Rser={res(13)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx14 {nod(14)} 0 {cap(14)} Rser={res(14)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx15 {nod(15)} 0 {cap(15)} Rser={res(15)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx16 {nod(16)} 0 {cap(16)} Rser={res(16)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx17 {nod(17)} 0 {cap(17)} Rser={res(17)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx18 {nod(18)} 0 {cap(18)} Rser={res(18)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx19 {nod(19)} 0 {cap(19)} Rser={res(19)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx20 {nod(20)} 0 {cap(20)} Rser={res(20)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx21 {nod(21)} 0 {cap(21)} Rser={res(21)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx22 {nod(22)} 0 {cap(22)} Rser={res(22)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx23 {nod(23)} 0 {cap(23)} Rser={res(23)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx24 {nod(24)} 0 {cap(24)} Rser={res(24)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx25 {nod(25)} 0 {cap(25)} Rser={res(25)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx26 {nod(26)} 0 {cap(26)} Rser={res(26)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx27 {nod(27)} 0 {cap(27)} Rser={res(27)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx28 {nod(28)} 0 {cap(28)} Rser={res(28)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx29 {nod(29)} 0 {cap(29)} Rser={res(29)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx30 {nod(30)} 0 {cap(30)} Rser={res(30)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx31 {nod(31)} 0 {cap(31)} Rser={res(31)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
Cx32 {nod(32)} 0 {cap(32)} Rser={res(32)} Rpar={Rpar} Cpar=0 Lser=0 RLshunt=0
.ends 3dBoct
********************************************************************************
********************************************************************************
*
*	Updates:
*
* 2013.01.03  - Added a temporary Bessel2, same as Bessel, but which makes use
*             of "choice-nodes", it didn't make sense to have all the internal
*             elements active when only N=2 is needed. Two 4th order filters
*             in a schematic would have encumbered the matrix with useless
*             elements.
* 2013.01.04  - Made the same add-ons for the rest of the analog and IIR.
* 2013.01.05  - Made the new versions the default and removed the old ones
*             except Bessel (now Bessel2) which is still here because of the
*             sometimes ugly results of the new one in .AC.
* 2013.05.30  - Added hyperbolic cosine and exponential windows to the FIRs.
*             - Corrected a long-standing error in Kaiser's order calculation.
*             - Added possibility for external synchronization to FIRs and
*             IIRs and sped up a bit the simulation when SH=1.
* 2013.05.31  - Added {sigma} as an adjustable parameter for the hyperbolic
*             cosine and the Lanczos windows.
*             - Added the half-band and the Dolph-Chebyshev windows.
* 2013.06.02  - Added Nuttall window.
* 2013.05.04  - Added RRS (recursive running sum) to MAFs, much faster than
*             AF with SH=1.
*             - Replaced former {quant} with what originally was {SH}, but
*             kept an internal .param quant=SH for backward compatibility.
*             - Modified the definition for Kaiser's {beta} so now As<21 is
*             possible for any window.
* 2013.06.06  - Made the the gaussian BT product to be calculated in the same
*             manner the roll-off factor is for raised cosine and rrc ({sigma}
*             no longer applies).
* 2013.06.09  - Major changes under the hood: polyphase implementation which
*             makes decimation/interpolation possible while providing a great
*             speed-up (in .TRAN). In fact, the larger k in Fact=<k,1/k>, the
*             faster.
* 2013.06.11  - Corrected the FIR differentiator's response with respect to
*             the new implementation.
*             - Corrected HP/BP/BS gain for interpolator/decimator in FIR.
*             - Incorporated MAF into FIR and left the moving average section
*             with only the analog approaches: MAFv and RRS.
* 2013.06.15  - Made all .funcs by the book.
* 2013.06.16  - Disabled Dolph-Chebysheb by default, it slows everything too
*             much. It can be re-enabled through three simple steps if needed.
* 2013.06.18  - Separated Dolph-Chebyshev from the others and made FIR2 with
*             only it and Choice=<1:7>.
* 2013.06.19  - Modified FIR's power of cosine window so it now accepts any
*             value between <0..inf>.
* 2013.06.25  - Added frequency sampling method, available in FIR_FS. It has
*             all the windows from FIR but with Choice=1 only.
* 2013.06.27  - Corrected type IV Hilbert transformer's response.
* 2013.07.01  - GPL.
* 2013.07.02  - Added {nT} to Analogs and IIRs which gives the possibility
*	            of having unscaled DC gain (1-delta) for even orders in the case
*             of Chebyshev I and Cauer.
*             - If nT=-1, the same unscaled gain is applied to FIRs, too.
*             - Fixed a problem where decimation was not possible due to the
*             way LTspice handles variables. E.g. Fact=1/7 would give errors
*             about "Singular matrix:  check node u1:2.20000000000003", but
*             the actual value would have been:
*             Fact**sgn(Fact-1) => (1/7)**sgn(1/7-1) => Fact=7
*             if LTspice would have been a mathematical software (but 1/7 is
*             first evaluated, not analyzed for reduction).
*             So, decimation is done now via Fact=-k and interpolation via
*             Fact=k.
*             - Restructured/rewrote the comments, hopefully clearer.
* 2013.07.03  - FIR_FS now has all four types, with odd (nT=0) or even (nT=1)
*             sampling.
* 2013.07.11  - Corrected Dolph-Chebyshev's gain.
* 2013.07.21  - Corrected upsampling behaviour for FIR and FIR2. Now SH=1 is
*             mandatory for correct interpolation/decimation .TRAN response.
* 2013.07.25  - Workaround for decimation in order to allow .AC analysis (FIR
*             and FIR2).
* 2013.07.28  - Removed the limitation for interpolation/decimation to be max.
*             +/-ceil[sqrt(N-1)], instead it can be max. +/-32 (FIR and FIR2).
* 2013.07.30  - Removed interpolation/decimation from FIR_FS.
*             - In FIR_FS, pin '0.2' outputs the whole spectrum, <0..2*pi>.
* 2013.10.25  - FIR, FIR2: Corrected internal clock when Fact=1.
* 2013.10.30  - FIR, FIR2: Corrected gain when nT=-1.
*             - Corrected FIR2's response.
* 2013.11.06  - fs1=0 for HP, fp1=fp2 for BP and fs1=fs2 for BS are allowed
*             now. (FIR, FIR2)
*             - Rearranged some of the internal functions to gain some speed
*             during pre-simulation. (FIR, FIR_FS)
* 2013.11.23  - Adjusted interpolation/decimation response for input signals
*             greater than 1Vpk. Also a minor speed-up. (FIR, FIR2)
* 2013.11.30  - Added CIC.
* 2013.12.16  - Corrected FIR's and FIR2's .AC response.
* 2013.12.21  - Corrected interpolation for FIR and FIR2 when SH=1.
* 2013.12.30  - Added interpolation (Fact>1)/decimation (Fact<1,Fact=/=0) to
*             the IIRs.
*             - Signals >1Vpk can be processed by the IIRs when SH=1.
* 2014.01.03  - Removed CIC, far too unstable in .TRAN.
* 2014.01.04  - Corrected type III and IV responses for FIR and FIR2.
* 2014.01.05  - Corrected the windows with non-zero end coefficients.
* 2014.01.06  - Trapped an error for type III differentiator with specific
*             settings for frequencies. (FIR, FIR2)
*             - Corrected the three pulse-shaping filters' gain and their
*             over-sampling calculation. (FIR, FIR2)
* 2014.01.07  - Trapped an error in the pulse-shaping windows. As a result,
*             the oversampling factor is no longer calculated from {fp1} and
*             {fs1}, but from {Fact}.
* 2014.01.08  - Corrected gain and response for FIR2.
*             - FIR moving average is now for Choice=0, while the windowing
*             functions start with rectangular, Win=1.
* 2014.01.09  - Removed Choice=7 from FIR and FIR2, the half-band filter since
*             Choice=1 and correct {fp1} and {fs1} makes for a Nyquist filter.
* 2014.01.10  - Corrected type III and IV response for FIR_FS.
* 2014.01.11  - Workaround some precision issues for pulse-shaping windows. To
*             design them using OS, beta and nr. symbols use the formulas as
*             described in FINITE IMPULSE RESPONSE/{Choice}.
*             - Gave up gain (G) for FIR_FS as it didn't make sense since the
*             frequency-domain formula encompasses it.
*             - Corrected IIRs interpolation/decimation .AC response for SH=0.
* 2014.01.12  - Added {test} and {sim} parameters to the Analogs and IIRs.
* 2014.01.13  - Made test=<0,1> only, overall, <1> enables quantized values,
*             <0> disables test pins.
*             - Removed Gaussian pulse-shaping from FIR2 as it didn't make
*             much sense having it there.
*             - Corrected Gaussian pulse-shaping window and the pulse-shaping
*             order calculation. (FIR)
*             - Improved speed for FIR2.
*             - FIR_FS odd-sampling means nT=1 and even-sampling means nT=0,
*             to be more intuitive.
* 2014.01.16  - Due to the same precision issues, the formula of {case} was
*             affected, too (it did not allow proper settings for AP). As a
*             consequence, there is a rather big change in all filters: the
*             four frequencies, {fp1}, {fs1}, {fp2} and {fs2}, have been
*             replaced by {fc} (center frequency), {BWp} (pass-band bandwidth)
*             and {BWs} (stop-band bandwidth). Their way of influencing the
*             filter's response is shown in the [FREQUENCY GRAPHS] paragraph.
*             - Corrected AP for Bessel, Butterworth and Chebyshev (Analog).
*             - The test pin that output the {case} is replaced with one that
*             outputs the pass-band and stop-band frequencies (the previous
*             four).
*             - Since the vast majority of the filters have I/O buffers, an
*             external 'GROUND' pin has added. Pin '0.4' has been moved a bit
*             to the right.
* 2014.01.25  - Removed everything except parameters' descriptions and made a
*             separate manual.
* 2014.01.27  - Corrected "matrix is singular" output of FIR_FS.
* 2014.01.28  - Added a polynomial approximation to Bessel's AP to allow phase
*             delays of N*180deg. The minimax errors are [-3.323,3.628]deg for
*             even N=<2,32>.
* 2014.02.04  - Added Butterworth_LC, a passive LC ladder network.
*             - Added two terms to the symbol's properties, {Zin} and {Zout},
*             for Butterworth_LC.
*             - Removed {a[0:4]} terms from the symbol's attributes; they are
*             still available through the .sub file.
* 2014.02.07  - Added Chebyshev_LC.
*             - Added {sim} and {test} to the Analog Passive filters.
* 2014.02.08  - Corrected unnormalized gain for Chebyshev.
*             - Added {nT} parameter to the Analog Active filters.
* 2014.02.09  - Removed the {nT} parameter from Analog Passive and modified
*             Zin=<-1,0,0+>.
* 2014.02.10  - Modified Bessel (and Bessel2) so now AP with odd orders can be
*             done.
* 2014.02.11  - Added table frequency scaling for AP. (Bessel, Bessel2)
* 2012.02.12  - Corrected response for Analog Passive when N>18(36).
*             - Improved for speed the Analog Passive filters.
* 2012.02.13  - Replaced {fc} with {BWp} for 3dBoct for consistency with the
*             others.
*             - Corrected phase response for Bessel and Bessel2 to be 180deg
*             when Asc=0.
* 2014.02.24  - Great speed improvements for AAFs and IIRs. For Cauer_IIR it's
*             a 50% or more decrease.
*             - Managed to derive an LTspice-friendly formula for frequency
*             scaling for Cauer and Cauer_IIR.
*             - Corrected Cauer_IIR's gain normalization.
* 2014.02.25  - Corrected Chebyshev's and Chebyshev_IIR's gain normalization.
* 2014.03.02  - Added separate ground path for APFs.
* 2014.03.08  - Corrected frequency scaling for Cauer, Cauer_IIR when Asc<=Ap.
* 2014.03.17  - Corrected AP frequency scaling for Bessel, Bessel2 when N=19.
* 2014.03.26  - Corrected the gain of pin '0.3' for FIR, FIR2.
* 2014.04.03  - Corrected the gain of InvChebyshev (Analog, IIR).
*             - Corrected the response of InvChebyshev for BP for odd orders
*             (Analog, IIR).
* 2014.07.30  - Improved the speed with external sync with the new f0<0.
*             - Slightly improved performance for FIRs and IIRs.
* 2014.08.07  - FIRx is now an extended version of FIR (Nmax=1024), having
*             ltline (O) instead of tline (T).
* 2015.03.14  - Corrected Lanczos window for sigma<0.5 (FIR, FIRx, FIR_FS).
* 2015.03.16  - Corrected the response of the hilbert transformer (FIR, FIRx,
*             FIR2).
* 2015.03.29  - Added the missing input source for FIR_FS...
* 2015.03.30  - Added a link to ltspicegoodies.ltwiki.org for the manual.
* 2015.03.30  - Added possibility for N=257 (FIR, FIR2, FIR_FS) and N=1025
*             (FIRx).
* 2015.03.31  - Improved external sync for IIRs and FIRs.
* 2015.04.11  - Added gain to MAFv and RRS.
* 2015.04.26  - Trapped a round-off error for the raised cosine window. (FIR,
*             FIR2, FIRx)
* 2015/10.02  - Modified normalizing gain for FIR and FIRx to allow non-
*             symmetrical coefficients, too.
* 2016.05.26  - Corrected the gain for bandpass Chebyshev and Chebyshev_IIR.
*             - Ensured {sigma} can't be the cause for a division by zero,
*             anymore. (FIR, FIRx, FIR_FS)
* 2016.05.28  - Corrected the gain for all FIRs.
*             - Replaced Kaiser's Bessel function with a less-computational
*             one, minor speed up. (FIR, FIRx, FIR_FS)
* 2016.09.01  - Corrected Chebyshev_LC output for even orders.
* 2016.10.24  - Great simplifications and speed gains to the analog active
*             filters.
* 2018.06.02  - After two years, finally, update the "updates" section about all
*             the updates. Which makes sense.
*             - Reverted to old fp1/fs1/fp2/fs2 behaviour, since the reason for
*             changing to BWp/BWs/fc is not only gone, but LTspice was reporting
*             errors elsewhere than where the conflict was. The old behaviour is
*             not lost, BWp/BWs/fc can still be used and schematics that already
*             have them set will work as before.
*             - Removed up-/down-sampling from all IIRs and FIRs, since there's
*             UpDnSpl in filt.sub which does a better job, and is more visible.
*             - Removed useless elements for all FIRs.
*             - Replaced {Choice} with {Func} in all FIRs.
*             - Added spline transition window to FIR, FIRx.
*             - Rearranged the {Win} list to be alphabetical.
*             - For AAFs and IIRs, BP and BS are no longer restricted to N,
*             because now N reflects the lowpass prototype order. If N=32, the
*             BP/BS will actually be 64th order.
*             - Corrected the frequency response for analog active filters for
*             bandpass and bandstop.
*             - Bessel now supports AP/LP/HP/BP/BS and corrected AP response.
*             - Added the test pin 0.2 to Bessel, governed by {test} and {sim}.
*             - Removed Bessel2 -- weird things happen in XVII, sometimes it is
*             possible to .step Bessel, sometimes not, depending on whether the
*             .save card is present, or not, and what voltages are saved.
*             - Reduced 3dbOct to N=32 max and added a tweak parameter, {nT}.
*             - All filters that use {test} and {sim} parameters are no longer
*             slowed down (this includes Cauer_IIR).
*             - Significant speedup for IIRs, Cauer_IIR in particular.
*             - Optimized computations for passive filters.
*             - Minor speed increase for Kaiser's Bessel function (FIR, FIRx,
*             FIR_FS).
*             - Corrected pulse shaping filter (FIR, FIRx, FIR2).
*             - Removed {test} parameter, the test pins no longer slow down.
*             - Added {Norm} for all FIRs for gain normalization, instead of
*             reusing nT.
*             - Improved MAFv.
* 2019.03.04  - Corrected .TRAN response for all FIRs when SH=1.
*
********************************************************************************
