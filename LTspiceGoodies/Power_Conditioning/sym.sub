********************************************************************************
* Author: Vlad Ionescu
* Copyright (C) 2008-2019, Vlad Ionescu, <imbvlad@gmail.com>
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Library General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Library General Public License for more details.
*
* You should have received a copy of the GNU Library General Public
* License along with this library; if not, write to the
* Free Software Foundation, Inc., 59 Temple Place - Suite 330,
* Boston, MA 02111-1307, USA.
*
********************************************************************************
********************************************************************************
*
* For more info, go to:
*  https://ltspicegoodies.ltwiki.org
* or visit
*  https://ltwiki.org/?title=Filter_Page_and_LTspice_Goodies
* and choose the link for "Filter"
*
********************************************************************************
********************************************************************************
*
*  Symmetrical components analyzer, phasor approach, ABC to 120 and inverse.
*
*     Vlad, Â©2008 - today
*
********************************************************************************
*
* [CONTENTS]
*
* abc-120   abc to 120 symmetrical components matrix
* 120-abc   120 to abc    --,,--        --,,--
*
********************************************************************************
*
*   abc-120, 120-abc - Symmetrical components matrix
*
********************************************************************************
*
* [SYMBOL]
*
* A,B,C     = three-phase I/O, floating (abc-120) or Rout=1 (120-abc);
* M[1,2,0]  = magnitude I/O, floating (abc-120) or Rout=1 (120-abc);
* A[1,2,0]  = angle I/O, floating (abc-120) or Rout=1 (120-abc).
*
*
* [PARAMETERS]
*
* f [Hz]    = working frequency, default 50;
* deg=<0,1> = whether angles are in radians (0) or in degrees (1, default).
*
* Hidden:
*
* lim   [V]   = internal limit to avoid clipping, default 1g;
* fmax  [Hz]  = estimated bandwidth for the implicit hypot(), default 1meg;
* ic    [V]   = initial conditions, default 0;
* Cout  [F]   = dummy parallel capacitance to aid convergence, default 1u/f
*             (120-abc only).
*
*
* [NOTES]
*
* - It may need .IC set in the simulation card.
*
************************
*
*     abc-120
*
************************
.subckt abc-120 A B C M[1] M[2] M[0] A[1] A[2] A[0] params: f=50 deg=1
+ ic=0 lim=1g fmax=1meg
*** the lesser evil: local .ic, compared to global uic
.ic v(Asin)=0 v(Acos)=0 v(Bsin)=0 v(Bcos)=0 v(Csin)=0 v(Ccos)=0
*** moving average filtering
* A
A_A 0 A 0 0 0 Acos Asin 0 MODULATOR mark={f} space=0
TAs Asin 0 11 0 Td={1/f} Z0=1
RAs 11 0 1
GAs 0 reA Asin 11 2
CAs reA 0 {1/f} ic={ic} Rpar=1G
TAc Acos 0 12 0 Td={1/f} Z0=1
RAc 12 0 1
GAc 0 imA Acos 12 2
CAc imA 0 {1/f} ic=0 Rpar=1G
* B
A_B 0 B 0 0 0 Bcos Bsin 0 MODULATOR mark={f} space=0
TBs Bsin 0 21 0 Td={1/f} Z0=1
RBs 21 0 1
GBs 0 reB Bsin 21 2
CBs reB 0 {1/f} ic=0 Rpar=1G
TBc Bcos 0 22 0 Td={1/f} Z0=1
RBc 22 0 1
GBc 0 imB Bcos 22 2
CBc imB 0 {1/f} ic=0 Rpar=1G
* C
A_C 0 C 0 0 0 Ccos Csin 0 MODULATOR mark={f} space=0
TCs Csin 0 31 0 Td={1/f} Z0=1
RCs 31 0 1
GCs 0 reC Csin 31 2
CCs reC 0 {1/f} ic=0 Rpar=1G
TCc Ccos 0 32 0 Td={1/f} Z0=1
RCc 32 0 1
GCc 0 imC Ccos 32 2
CCc imC 0 {1/f} ic=0 Rpar=1G
*** precalculate common occurences of terms
* t1re = (2*re(A) - re(B) - re(C))/3
G_reA-reB 0 2reA-reB-reC reA reB 1
G_-reC 0 2reA-reB-reC reA reC 1
R_reA-reB-reC 2reA-reB-reC 0 {1/3}
* t1im = (2*im(A) - im(B) - im(C))/3
G_imA-imB 0 2imA-imB-imC imA imB 1
G_-imC 0 2imA-imB-imC imA imC 1
R_imA-imB-imC 2imA-imB-imC 0 {1/3}
* t2re = (re(B) - re(C))/sqrt(3)
G_reB-reC 0 reB-reC reB reC {1/sqrt(3)}
R_reB-reC reB-reC 0 1
* t2im = (im(B) - im(C))/sqrt(3)
G_imB-imC 0 imB-imC imB imC {1/sqrt(3)}
R_imB-imC imB-imC 0 1
*** precalculate arguments for hypot() and atan2()
* re(arg[1]) = t1re - t2im
G_arg1re 0 arg1re 2reA-reB-reC imB-imC 1
R_arg1re arg1re 0 1
* im(arg[1]) = t1im + t2re
G_arg1im_1 0 arg1im 2imA-imB-imC 0 1
G_arg1im_2 0 arg1im reB-reC 0 1
R_arg1im arg1im 0 1
* re(arg[2]) = t1re + t2im
G_arg2re_1 0 arg2re 2reA-reB-reC 0 1
G_arg2re_2 0 arg2re imB-imC 0 1
R_arg2re arg2re 0 1
* im(arg[2]) = t1im - t2re
G_arg2im 0 arg2im 2imA-imB-imC reB-reC 1
R_arg2im arg2im 0 1
* re(arg[0]) = (re(A) + re(B) + re(C))*2/3
G_reA 0 arg0re reA 0 1
G_reB 0 arg0re reB 0 1
G_reC 0 arg0re reC 0 1
R_arg0re arg0re 0 {2/3}
* im(arg[0]) = (im(A) + im(B) + im(C))*2/3
G_imA 0 arg0im imA 0 1
G_imB 0 arg0im imB 0 1
G_imC 0 arg0im imC 0 1
R_arg0im arg0im 0 {2/3}
*** magnitudes, implicit method for hypot()
* M[1]
A_arg1im_sq 0 arg1im arg1im 0 0 0 M1_sq 0 ota vhigh={lim} rout=1 linear
A_arg1re_sq 0 arg1re arg1re 0 0 0 M1_sq 0 ota vhigh={lim} linear
A_M1 _M1 M1_sq 0 0 0 0 M[1] 0 ota vhigh={lim} rout=1g cout={1n/fmax} linear
A_M1_lf 0 M[1] M[1] 0 0 0 _M1 0 ota vhigh={lim} rout=1 linear
* M[2]
A_arg2im_sq 0 arg2im arg2im 0 0 0 M2_sq 0 ota vhigh={lim} rout=1 linear
A_arg2re_sq 0 arg2re arg2re 0 0 0 M2_sq 0 ota vhigh={lim} linear
A_M2 _M2 M2_sq 0 0 0 0 M[2] 0 ota vhigh={lim} rout=1g cout={1n/fmax} linear
A_M2_lf 0 M[2] M[2] 0 0 0 _M2 0 ota vhigh={lim} rout=1 linear
* M[0]
A_arg0im_sq 0 arg0im arg0im 0 0 0 M0_sq 0 ota vhigh={lim} rout=1 linear
A_arg0re_sq 0 arg0re arg0re 0 0 0 M0_sq 0 ota vhigh={lim} linear
A_M0 _M0 M0_sq 0 0 0 0 M[0] 0 ota vhigh={lim} rout=1g cout={1n/fmax} linear
A_M0_lf 0 M[0] M[0] 0 0 0 _M0 0 ota vhigh={lim} rout=1 linear
*** angles
B_A1 0 A[1] I=atan2(v(arg1im),v(arg1re)) Rpar={(180/pi)**u(deg)}
B_A2 0 A[2] I=atan2(v(arg2im),v(arg2re)) Rpar={(180/pi)**u(deg)}
B_A0 0 A[0] I=atan2(v(arg0im),v(arg0re)) Rpar={(180/pi)**u(deg)}
.ends abc-120
************************
*
*     120-abc
*
************************
.subckt 120-abc A B C M[1] M[2] M[0] A[1] A[2] A[0] params: f=50 deg=0 ic=0
+ ic=0 lim=1g Cout=1u/f dr=(pi/180)**deg
*** calculate sin/cos...
B_cosA0 0 cosA0 I=cos(v(A[0])*dr) ic={ic} Rpar=1 Cpar={Cout}
B_cosA1 0 cosA1 I=cos(v(A[1])*dr) ic={ic} Rpar=1 Cpar={Cout}
B_cosA2 0 cosA2 I=cos(v(A[2])*dr) ic={ic} Rpar=1 Cpar={Cout}
B_sinA0 0 sinA0 I=sin(v(A[0])*dr) ic={ic} Rpar=1 Cpar={Cout}
B_sinA1 0 sinA1 I=sin(v(A[1])*dr) ic={ic} Rpar=1 Cpar={Cout}
B_sinA2 0 sinA2 I=sin(v(A[2])*dr) ic={ic} Rpar=1 Cpar={Cout}
*** ...and real/imaginary parts based on them
A_re0 0 cosA0 M[0] 0 0 0 re0 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
A_re1 0 cosA1 M[1] 0 0 0 re1 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
A_re2 0 cosA2 M[2] 0 0 0 re2 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
A_im0 0 sinA0 M[0] 0 0 0 im0 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
A_im1 0 sinA1 M[1] 0 0 0 im1 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
A_im2 0 sinA2 M[2] 0 0 0 im2 0 ota vhigh={lim} vlow={-lim} rout=1 cout={Cout} linear
*** precalculate common occurences of terms
* t1re = 2*re(0) - re(1) - re(2)
A_re0-re1 re1 re0 0 0 0 0 2re0-re1-re2 0 ota vhigh={lim} vlow={-lim} rout=0.5 cout={Cout} linear
A_re0-re2 re2 re0 0 0 0 0 2re0-re1-re2 0 ota vhigh={lim} vlow={-lim} linear
* t2re = re(1) - re(2)
A_re1-re2 re2 re1 0 0 0 0 re1-re2 0 ota vhigh={lim} vlow={-lim} rout={sqrt(3)/2} cout={Cout} linear
* t1im = 2*im(0) - im(1) - im(2)
A_im0-im1 im1 im0 0 0 0 0 2im0-im1-im2 0 ota vhigh={lim} vlow={-lim} rout=0.5 cout={Cout} linear
A_im0-im2 im2 im0 0 0 0 0 2im0-im1-im2 0 ota vhigh={lim} vlow={-lim} linear
* t2im = im(1) - im(2)
A_im1-im2 im2 im1 0 0 0 0 im1-im2 0 ota vhigh={lim} vlow={-lim} rout={sqrt(3)/2} cout={Cout} linear
*** assemble the waveforms
* A = re0 + re1 + re2 + j*(im0 + im1 + im2)
A_Are1 0 re0 0 0 0 0 Are 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Are2 0 re1 0 0 0 0 Are 0 ota vhigh={lim} vlow={-lim} linear
A_Are3 0 re2 0 0 0 0 Are 0 ota vhigh={lim} vlow={-lim} linear
A_Aim1 0 im0 0 0 0 0 Aim 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Aim2 0 im1 0 0 0 0 Aim 0 ota vhigh={lim} vlow={-lim} linear
A_Aim3 0 im2 0 0 0 0 Aim 0 ota vhigh={lim} vlow={-lim} linear
A_Are 0 Are 0 0 0 0 A 0 MODULATOR mark={f} space=0 rout=2
A_Aim 0 Aim 0 0 0 A 0 0 MODULATOR mark={f} space=0 rout=2
* B = t1re + t2im + j*(t1im - t2re)
A_Bre1 0 2re0-re1-re2 0 0 0 0 Bre 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Bim1 0 im1-im2 0 0 0 0 Bre 0 ota vhigh={lim} vlow={-lim} linear
A_Bre2im2 re1-re2 2im0-im1-im2 0 0 0 0 Bim 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Bre 0 Bre 0 0 0 0 B 0 MODULATOR mark={f} space=0 rout=2
A_Bim 0 Bim 0 0 0 B 0 0 MODULATOR mark={f} space=0 rout=2
* C = t1im + t1re + j*(t1re - t2im)
A_Cim2 0 2im0-im1-im2 0 0 0 0 Cim 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Cre2 0 re1-re2 0 0 0 0 Cim 0 ota vhigh={lim} vlow={-lim} linear
A_Cre1im1 im1-im2 2re0-re1-re2 0 0 0 0 Cre 0 ota vhigh={lim} vlow={-lim} rout=2 cout={Cout} linear
A_Cre 0 Cre 0 0 0 0 C 0 MODULATOR mark={f} space=0 rout=2
A_Cim 0 Cim 0 0 0 C 0 0 MODULATOR mark={f} space=0 rout=2
.ends 120-abc
********************************************************************************
*
* [UPDATES]
*
* 2014.04.13  - Corrected and optimized 120-abc.
* 2018.12.27  - Improved abc-120 and 120-abc for large input signals.
*             - GPL'd.
*
********************************************************************************
